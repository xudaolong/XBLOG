{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","path":"css/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/favicon.ico","hash":"8520a68e3d942c9b0df568960ff98ccaf9784b1f","modified":1482973787000},{"_id":"themes/maupassant/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1485415864000},{"_id":"themes/maupassant/LICENSE","hash":"019dc6a9aba02ae3aaabca45f39aecd6e8e7f1d8","modified":1485415864000},{"_id":"themes/maupassant/README.md","hash":"75d8c42569809961953d1934de445418c00ab94c","modified":1485415864000},{"_id":"themes/maupassant/_config.yml","hash":"240caa901648250d9fd283f46dfa6ef8a4fd6abd","modified":1486351748000},{"_id":"themes/maupassant/package.json","hash":"81fb4e2ac051ecfb9a93f37b28910291b939771a","modified":1485415864000},{"_id":"themes/maupassant/.git/config","hash":"037345b11c41abb3dbbbd6e0242ced24979a7097","modified":1485415864000},{"_id":"themes/maupassant/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1485415864000},{"_id":"themes/maupassant/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1485415859000},{"_id":"themes/maupassant/.git/index","hash":"114e958526573a1cd31c527d8e5079e2e5efb8e3","modified":1485417183000},{"_id":"themes/maupassant/.git/packed-refs","hash":"965458983a3bb3e282036aa5812345d6370fe31d","modified":1485415864000},{"_id":"themes/maupassant/languages/en.yml","hash":"e13ab1a2d2f1edbe67b4c035fd4667cb6a31db8e","modified":1485415864000},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"31b9fd80e272d4f2bbdab18d78455ae51c2f2729","modified":1486351182000},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1485415864000},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"b47906ec0abf867fb3e3360bc046b7afb68aee25","modified":1485415864000},{"_id":"themes/maupassant/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1485415864000},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"ebacfa5d0c14d603e0d505757adb24c0bbe5dd13","modified":1485415864000},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"56b65995c60e99dcebbf00168447fd225d28e5b2","modified":1485415864000},{"_id":"themes/maupassant/layout/archive.jade","hash":"0050c883b4f202add71c8664d65e6072179e7190","modified":1485415864000},{"_id":"themes/maupassant/layout/base-without-sidebar.jade","hash":"690fee04231b2e6721580516849f7b80cf42be94","modified":1485415864000},{"_id":"themes/maupassant/layout/base.jade","hash":"99259568f4cc21bd825772b4cb84be2b29b78fa5","modified":1485415864000},{"_id":"themes/maupassant/layout/index.jade","hash":"f842164f6cba007c1dfcd7fe7bba24736bc886a9","modified":1485415864000},{"_id":"themes/maupassant/layout/page.jade","hash":"8d70fd3b93f2c9087a9ea7ec538dcc1d413bea01","modified":1485415864000},{"_id":"themes/maupassant/layout/single-column.jade","hash":"c35fff4d9b331a41af5bc10f4278ec3d9da503db","modified":1485415864000},{"_id":"themes/maupassant/layout/timeline.jade","hash":"f03d8df63a188543cfe4e85e76194abe081411a1","modified":1485415864000},{"_id":"themes/maupassant/layout/post.jade","hash":"9cf29fb0daed95935154ce0fa2b154df5a9b11b1","modified":1485415864000},{"_id":"source/_posts/Git-套路/git-SSH-keys.md","hash":"5ba59edc804e1b6b675df6f1776bff0d678f03d0","modified":1485418670000},{"_id":"source/_posts/Git-套路/git-压缩包.md","hash":"a182dde4025baa1528f00c0b0842e3d1d98f98f4","modified":1485418670000},{"_id":"source/_posts/Git-套路/git-代码提交.md","hash":"cbe9ede8cc7faea31006c15e5f724a502c3afdce","modified":1485418670000},{"_id":"source/_posts/Git-套路/git-分支.md","hash":"0e7d285be2834bd38dc232d74cc1548c3788228c","modified":1485418670000},{"_id":"source/_posts/Git-套路/git-增加-删除文件.md","hash":"c06d25dc3b99241973c39440edfdd3fd28f95c37","modified":1485418670000},{"_id":"source/_posts/Git-套路/git-忽略上传--gitignore.md","hash":"5a4dcff1734c9021ca8236c97de2b79f60cd8cda","modified":1485418670000},{"_id":"source/_posts/Git-套路/git-新建代码库.md","hash":"9a2bb032e0421b0fe644362945f6c918d769d416","modified":1485418670000},{"_id":"source/_posts/Git-套路/git-撤销.md","hash":"b73bd7e3ddec54caffa924f1b4f01f7dbafd7269","modified":1485418670000},{"_id":"source/_posts/Git-套路/git-查看信息.md","hash":"ec265925a3a2a2c04cf43d5e8bab57be9cd466b7","modified":1485418670000},{"_id":"source/_posts/Git-套路/git-标签.md","hash":"f3ee918fdde3d7cf1f67df9b3a02a2746722fe4b","modified":1485418670000},{"_id":"source/_posts/Git-套路/git-远程同步.md","hash":"e1368d730aafe91e36d21e6d4c9e5efa9cbe3189","modified":1485418670000},{"_id":"source/_posts/Git-套路/git-配置.md","hash":"ee4ab840269a016ec6058cd516cad29144dccb03","modified":1485418670000},{"_id":"source/_posts/Java-套路/java-ArrayList和LinkedList的几种循环遍历方式.md","hash":"17027de0c6b5ea3543fee6f0cd9d5c00d852c363","modified":1485418670000},{"_id":"source/_posts/Java-套路/java-castor-与XML的数据绑定.md","hash":"89cf931216c2aea76354b9bf2d571280e4484df4","modified":1485418670000},{"_id":"source/_posts/Java-套路/java-fastjson-解析json配置文件.md","hash":"4c93d86c64bf2aa548757a969966f23664ec8c8c","modified":1485418670000},{"_id":"source/_posts/Java-套路/java-intell-IDEA-配置-tomcat.html","hash":"1473ae1ec05201a8c346cfc7430d74ea34a31df1","modified":1485418670000},{"_id":"source/_posts/Java-套路/java-maven-pom-xml.md","hash":"19a8ac660fb2cd10b532185ac6ca6dd540875c03","modified":1485418670000},{"_id":"source/_posts/Java-套路/java-图片切割.md","hash":"7a32dadcd65bc0a0816fbe3a7b8783c2efa3945c","modified":1485418670000},{"_id":"source/_posts/Java-套路/java-获取当前文件-class-的相对或绝对路径.md","hash":"8d6a622e27ce1622ebb1b508b82ce405e5de0e65","modified":1485418670000},{"_id":"source/_posts/Java-套路/java-搜罗-分析具体项目中使用的包.md","hash":"bdcbe107aff0ce25d16c234635cda908e3b07506","modified":1485418670000},{"_id":"source/_posts/Java-套路/java-测试项目的流程.md","hash":"9af3732cedd398563af83b3002e6402d0b98fde4","modified":1485418670000},{"_id":"source/_posts/Java-套路/java-项目目录结构分析.md","hash":"890b89c780e2982805ac27b4ed79836b789bb8e0","modified":1485418670000},{"_id":"source/_posts/Javascript-Promise-套路/js-Promise-all.md","hash":"b4157acb1c630c51a817b895491cac6efdb6b892","modified":1485418670000},{"_id":"source/_posts/Javascript-Promise-套路/js-Promise-Thenable.md","hash":"9fa56ceb5742ed423e6885c8a123db19686cc93d","modified":1485418670000},{"_id":"source/_posts/Javascript-Promise-套路/js-Promise-catch.md","hash":"7a4118eac421c88c2272841a9b76341f28c8e871","modified":1485418670000},{"_id":"source/_posts/Javascript-Promise-套路/js-Promise-race.md","hash":"d295cc0210779ee44437323456788b7aa66c3905","modified":1485418670000},{"_id":"source/_posts/Javascript-Promise-套路/js-Promise-简介及例子.md","hash":"fd3daf1c01dded6b5b3fdef74267ba96ef4168b9","modified":1485418670000},{"_id":"source/_posts/Javascript-Promise-套路/js-Promise-resolve().md","hash":"04692d0a40317b7011f7f294c3940bc516a92a5a","modified":1485418670000},{"_id":"source/_posts/Javascript-Promise-套路/js-Promise-传值.md","hash":"d0df20f7575dd352fa73cd50d146de2dca7f023c","modified":1485418670000},{"_id":"source/_posts/Javascript-Promise-套路/js-Promise-解决地狱回调.md","hash":"4475f4ed582eeaade3bcb21924f321da49686a4e","modified":1485418670000},{"_id":"source/_posts/Javascript-array-套路/js-array-Array-of-转换数组.md","hash":"e3cc55d3301740b34830b375991741b442ae3f80","modified":1485418670000},{"_id":"source/_posts/Javascript-Promise-套路/js-Promise.md","hash":"343c107485d7e3fcf9c5eefaed34261f317196e4","modified":1485418670000},{"_id":"source/_posts/Javascript-array-套路/js-array-api-常用.md","hash":"e94abc1e36ce56f9993482cea4cb73bbb4aa62aa","modified":1485418670000},{"_id":"source/_posts/Javascript-array-套路/js-array-reduce.md","hash":"adf3bd69e09c00407ca01dc608c2a6282556f346","modified":1485418670000},{"_id":"source/_posts/Javascript-array-套路/js-array-填充数组.md","hash":"fe14f035acf5d73d97d1e4c62f080079ee41613c","modified":1485418670000},{"_id":"source/_posts/Javascript-array-套路/js-array-复制数组.md","hash":"d02ec0c5697505ff55aca487f7bb674ae73f44ef","modified":1485418670000},{"_id":"source/_posts/Javascript-array-套路/js-array-生成数组.md","hash":"301ce52ff00687a2d44a31f435462928a94f7424","modified":1485418670000},{"_id":"source/_posts/Javascript-array-套路/js-array-遍历数组.md","hash":"ab93687cb8275357269d2f89173195bedef9f098","modified":1485418670000},{"_id":"source/_posts/Javascript-array-套路/js-json-转换.md","hash":"abf841d6d32928df718cb6b5f29f622900407df7","modified":1485418670000},{"_id":"source/_posts/Javascript-套路/js-&&-和----用法.md","hash":"275813a6d6838df42e61fafe0da42022b08b4a5a","modified":1485418670000},{"_id":"source/_posts/Javascript-套路/js-IIFE--立即调用的函数表达式.md","hash":"b897d16c4cacee06c50a0b393324fb2bb4d0dd92","modified":1485418670000},{"_id":"source/_posts/Javascript-套路/js-Reflect.md","hash":"5175a68ae19a52db5d12050f9ebca202a3a40f7c","modified":1485418670000},{"_id":"source/_posts/Javascript-套路/js-Set-简介.md","hash":"091d061748c1485057e408796b38ffaf2423ed6b","modified":1485418670000},{"_id":"source/_posts/Javascript-套路/js-Symbol-介绍及应用.md","hash":"73ebee9bc3108e6e70bcda097d3f8ab734af86fb","modified":1485418670000},{"_id":"source/_posts/Javascript-套路/js-es6-对象解构赋值.md","hash":"1c873b106c99d3037c8cb4440dd1a72fddee0403","modified":1485418670000},{"_id":"source/_posts/Javascript-套路/js-es6-数组解构赋值.md","hash":"68064323ef2bec84ac368f0b16d73b6226cf46e0","modified":1485418670000},{"_id":"source/_posts/Javascript-套路/js-export.md","hash":"62d3ebd9ff9b22da086f8b203410b47ba26c1075","modified":1485418670000},{"_id":"source/_posts/Javascript-套路/js-module-多种模式的开发.md","hash":"7b9edf7b4e18aeb0aadf1afcd3b7f488fd5a8d3f","modified":1485418670000},{"_id":"source/_posts/Javascript-套路/js-对象简写.md","hash":"1cd6274ece3865d53735c6de699a939d95975ac6","modified":1485418670000},{"_id":"source/_posts/Javascript-套路/js-数据属性和访问器属性.md","hash":"ac9b7c9b4e1b6db895b6cdc4d8706a3a87feeaf1","modified":1485418670000},{"_id":"source/_posts/Javascript-套路/js-时间--测试函数.md","hash":"e025ad533121e832ec3e61b3bef0b3c0dabc597a","modified":1485418670000},{"_id":"source/_posts/Javascript-套路/js-管理私有属性.md","hash":"445eeb371d3c2986d236d64aef41ad7ab9261134","modified":1485418670000},{"_id":"source/_posts/Javascript-套路/js-类型的转换.md","hash":"10aa51851af6dc9b84a20809048f9e90dab560a1","modified":1485418670000},{"_id":"source/_posts/Javascript-套路/js-闭包理解---缺乏形参.md","hash":"ab13582ca8788a5e3d99f9c1c0f8d841f9eb7ba8","modified":1485418670000},{"_id":"source/_posts/Javascript-设计模式-套路/js-pattern--h-模板方法模式.md","hash":"545456e880b666f354e014121652ee17a881880a","modified":1485418670000},{"_id":"source/_posts/Javascript-设计模式-套路/js-pattern--h-状态模式.md","hash":"be725eef152357d2c1b4f6b14bdd9e0d5a2bf90b","modified":1485418670000},{"_id":"source/_posts/Javascript-设计模式-套路/js-pattern--h-策略模式.md","hash":"1ace808c8af28e7b133dc0e60fd96131275911c8","modified":1485418670000},{"_id":"source/_posts/Javascript-设计模式-套路/js-pattern--k-节流模式.md","hash":"60583b677cc4e315a79c16376818bbcb08de2680","modified":1485418670000},{"_id":"source/_posts/Javascript-设计模式-套路/js-pattern--h-观察者模式.md","hash":"7ec7c0f751db5c3d15a7e8e9554b4ac99b2ff492","modified":1485418670000},{"_id":"source/_posts/Javascript-设计模式-套路/js-pattern--s-享元模式.md","hash":"108698d77995066f139958e16db739eaee5c9134","modified":1485418670000},{"_id":"source/_posts/Javascript-设计模式-套路/js-pattern-简介与对象的收编.md","hash":"c5d871564ccae14e21cf7c9bffd89ae86f87d787","modified":1485418670000},{"_id":"source/_posts/Mysql-套路/brew-安装-mysql-启动.md","hash":"0eb4d237f4855ce6712f4a0f6d0b2a14bfa48764","modified":1485418670000},{"_id":"source/_posts/OSX-套路/mac-http-proxy.md","hash":"8ec2042dc361df6855c2d5ac0c632474709c0cd0","modified":1485418670000},{"_id":"source/_posts/OSX-套路/alfred-workflows-多风格的编码变量-插件---.md","hash":"83549e5c7e7c99aa5777855eac755fd483cd7c7e","modified":1485418670000},{"_id":"source/_posts/OSX-套路/brew-java-安装.md","hash":"7bad8b4e498a6bf47d394171de7868fcd8477e82","modified":1485418670000},{"_id":"source/_posts/OSX-套路/mac-切换root用户.md","hash":"6803802548a0b260c41c0952f4a5a47f16f06efd","modified":1485418670000},{"_id":"source/_posts/OSX-套路/mac-切换到子用户.md","hash":"614d7b2706416291945885c2108af795d1ec675e","modified":1485418670000},{"_id":"source/_posts/OSX-套路/mac-日常遇到的命令记录.md","hash":"34af3a3b536c73917db02f7b3575dad2dcb4dfd1","modified":1485418670000},{"_id":"source/_posts/OSX-套路/mac-系统文件夹的含义.md","hash":"9cc8b167627caaec60e99741b029cd3b284fbd9d","modified":1485418670000},{"_id":"source/_posts/OSX-套路/mac-终端-用-proxychains-ng-走-shadowsocks.md","hash":"8eb9ee9cd2d8dd4e8a752f5a05c233b33f51bc3c","modified":1485418670000},{"_id":"source/_posts/Oracle-PL-SQL-套路-/oracle-关于生成包-存储过程.md","hash":"0117531ccdd518f87c1a2d4ac91b0985cae22e8c","modified":1485418670000},{"_id":"source/_posts/Oracle-PL-SQL-套路-/基于-JetBrains-DataGrip-之-Oracle-PL-SQL-攻略--(一).md","hash":"a1d6a16f6f5817cb4d4c52b1ef88ff8cd645be5e","modified":1485418670000},{"_id":"source/_posts/OSX-套路/mac-访问-Windows-共享文件夹.md","hash":"97967d2f74dab4f96a223b07693a4993630fcd21","modified":1485418670000},{"_id":"source/_posts/OSX-套路/mongodb-开机启动.md","hash":"293deb6b2af4a491f5496410e248851c459ed1f3","modified":1485418670000},{"_id":"source/_posts/Oracle-PL-SQL-套路-/基于-JetBrains-DataGrip-之-Oracle-PL-SQL-攻略--(二).md","hash":"7aa587f182d886c1c834ec64229e7835de168b29","modified":1485418670000},{"_id":"source/_posts/Oracle-PL-SQL-套路-/基于-JetBrains-DataGrip-之-Oracle-PL-SQL-攻略--LiveTemplate.md","hash":"d4d652bd437bd4292b12c02b72025e625cfc5b79","modified":1485418670000},{"_id":"source/_posts/angular-套路/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1485419429000},{"_id":"source/_posts/angular-套路/angular-$scope变量和方法.md","hash":"f94c7540118e9526b79f64f2599b589c04522fc7","modified":1486344719000},{"_id":"source/_posts/angular-套路/angular-constant.md","hash":"441e7efb6828b0edcd55c2334f9906ffa29d776e","modified":1486344982000},{"_id":"source/_posts/angular-套路/angular-$watch.md","hash":"bce11300fa7d06a443d1fbc775a878a9feaa0a9f","modified":1486344725000},{"_id":"source/_posts/angular-套路/angular-JQuery-的-数据获取.md","hash":"be01641915c7533d474326aa4ebfe3ef43930c5d","modified":1486344950000},{"_id":"source/_posts/angular-套路/angular-controller.md","hash":"290c864cf92f5c69f300ef3420aba5321a0e3da4","modified":1486344975000},{"_id":"source/_posts/angular-套路/angular-css类和样式.md","hash":"73977594fafbacd1011fb1b8037fa24afb377107","modified":1486344969000},{"_id":"source/_posts/angular-套路/angular-factory.md","hash":"092f73684f895f04b7ac2581c556a336129b4e3f","modified":1486344964000},{"_id":"source/_posts/angular-套路/angular-restrict作用.md","hash":"97ddeb804ac2aab64317712c5d0d0e10bc49eb9a","modified":1486344935000},{"_id":"source/_posts/angular-套路/angular-provider-.md","hash":"32ea6efd9e164f1d025b44f347c9a4395804af19","modified":1485418670000},{"_id":"source/_posts/angular-套路/angular-service.md","hash":"a02c37e226faa669a10923c993962bf2e1bd3a9f","modified":1486344930000},{"_id":"source/_posts/angular-套路/angular-value.md","hash":"e49e7e9bc1b18e37c62753d29cea322a8622d55e","modified":1486344923000},{"_id":"source/_posts/angular-套路/angular-事件绑定.md","hash":"91173a97c87e2dc98a1a77bdf34cd72dccd959a0","modified":1486344916000},{"_id":"source/_posts/angular-套路/angular-入门.md","hash":"c9fa414d20df7bf76a0586ebf0820673ae8aa793","modified":1486344911000},{"_id":"source/_posts/angular-套路/angular-创建自定义指令.md","hash":"ac88c3dde6778698a38a14e13da1c3b141ac815e","modified":1486344905000},{"_id":"source/_posts/angular-套路/angular-包含.md","hash":"281b540971c90009603768b6858c103ff6059fb3","modified":1486344897000},{"_id":"source/_posts/angular-套路/angular-控件间的传值.md","hash":"9318cb2d75fe7414ff9b49c24b7c6074605af497","modified":1486344883000},{"_id":"source/_posts/angular-套路/angular-扩展html.md","hash":"00dad1044b41bda3f0398b506f9787cb7475a328","modified":1486344889000},{"_id":"source/_posts/angular-套路/angular-模板内容、方式.md","hash":"c10545b1b051d61a27857ab897b7e77551279e4c","modified":1486344877000},{"_id":"source/_posts/angular-套路/angular-自定义指令.md","hash":"521b55a4cc64d77b9106c07a223837cc7d6b308b","modified":1486344854000},{"_id":"source/_posts/angular-套路/angular-模板节点控制.md","hash":"7b4c3cce0bd64c2cf9f3a8de10acce7d8f8700e3","modified":1486344861000},{"_id":"source/_posts/angular-套路/angular-模板内容渲染.md","hash":"5e6a76060373cbce4a25f9fab3fac4fc3ba764ae","modified":1486344868000},{"_id":"source/_posts/angular-套路/angular-获取列表中的值.md","hash":"d562c9b84ac997fc22dec5910a6813aee87c227d","modified":1486344848000},{"_id":"source/_posts/angular-套路/angular-表单.md","hash":"6428df784b03c2b7264b53a35b85599443bf51bf","modified":1486344841000},{"_id":"source/_posts/angular-套路/angular-表单输入.md","hash":"756650fd81e4bfa909a11e8e2ba2a96a0f7c8c52","modified":1486344833000},{"_id":"source/_posts/apache-common-套路/apache-common-BeanUtils-教程.md","hash":"131fed4b802548fa78af327be355931036f6054b","modified":1485418670000},{"_id":"source/_posts/angular-套路/angular-隔离指令的作用域.md","hash":"7e3d7e0d1f38e7d0ad0a755b96353319bcc8f189","modified":1486344821000},{"_id":"source/_posts/apache-common-套路/apache-common-浅尝实操.md","hash":"32c07a31f7875a55d6f5d0420591c7a4a3e0f5a2","modified":1485418670000},{"_id":"source/_posts/apache-common-套路/java-common-Lang-CharSetUtils.md","hash":"07975486b593278c561dfcba17664f978442408d","modified":1485418670000},{"_id":"source/_posts/apache-common-套路/java-common-Lang-StringUtils.md","hash":"72b68bf9a1b956b390b8b27135177788dd192fd4","modified":1485418670000},{"_id":"source/_posts/express-套路/jade-在express下调用.md","hash":"81aae1dbe3d082e1f4e9e06016251c6520e622d2","modified":1485418670000},{"_id":"source/_posts/docker-套路/docker-技术入门与实战-笔记.md","hash":"f541ecac2c7701ee117d8959ec4970b110b86c5e","modified":1485418670000},{"_id":"source/_posts/express-套路/jade-语法格式.md","hash":"90cf42000fb3a3a1a6964d40fed62cfde43716bd","modified":1485418670000},{"_id":"source/_posts/intellj-idea-套路/intellj-idea-maven-Web项目-+-tomcat-的搭建.md","hash":"c3573492057500cdb3fe54856571134d5b39fa98","modified":1485418670000},{"_id":"source/_posts/intellj-idea-套路/intellj-idea-开发环境配置.md","hash":"1040cc62fafb23dd56a69dcce9ad62e7c37cb83b","modified":1485418670000},{"_id":"source/_posts/ios-套路/app-签收.md","hash":"772b43568505476240777c61cdddf4dad401be14","modified":1485418670000},{"_id":"source/_posts/ios-套路/Mac-OS-X-安装-maven-.md","hash":"33b451bc046b8b804c1f86d79f6d35c5acd4d869","modified":1485418670000},{"_id":"source/_posts/ios-套路/ios-核心开发手册读书笔记.md","hash":"cd13edefcbd06c846353996d1d8a7811a2f190d6","modified":1485418670000},{"_id":"source/_posts/jenkins/jenkins-常用配置记录.md","hash":"ace6c6f0fcc903afd347e3aa72b6ff7ade016f16","modified":1486349541000},{"_id":"source/_posts/mongodb-套路/mongodb-find&sort.md","hash":"8de71b07d93c03570a89406bc4d34663282aa1af","modified":1485418670000},{"_id":"source/_posts/mongodb-套路/mongodb-insert&save.md","hash":"dd7e2e38f7b3f12513db57dbeccb8ba6cb25dec2","modified":1485418670000},{"_id":"source/_posts/mongodb-套路/mongodb-remove.md","hash":"9fe31217a8426406cd0a8b4480d8bd5a1a7a2911","modified":1485418670000},{"_id":"source/_posts/mongodb-套路/mongodb-update.md","hash":"69e494a7c6540d6a6178d8abe0b63d2cc47c8a4c","modified":1485418670000},{"_id":"source/_posts/mongodb-套路/mongodb-初识.md","hash":"b2de1c203fbf446af91c523a01406e74d0adf193","modified":1485418670000},{"_id":"source/_posts/mongodb-套路/mongodb-索引.md","hash":"6612f205a9e57da71b28cbbf58b358006212909b","modified":1485418670000},{"_id":"source/_posts/nginx-套路/nginx-开发理解.md","hash":"e705be5c8ba2c86ebaeaab4f8f07d90b92f8eb9e","modified":1485418670000},{"_id":"source/_posts/react-native套路/rn-mac-android-开发日常记录.md","hash":"3dbd44c61fd2d3f8e2c6072267c04e83cb91ba0a","modified":1485418670000},{"_id":"source/_posts/react-native套路/rn-mac-android-开发环境部署.md","hash":"d950f74c6503bef1775edd35d6e36f4c128ae4b1","modified":1485418670000},{"_id":"source/_posts/服务器-套路/阿里云部署-Nginx.md","hash":"2a27bc1f41a34e1f32c2409b9e24004b2dc42d1a","modified":1485418670000},{"_id":"source/_posts/服务器-套路/阿里云部署-安装-Node.md","hash":"15192052549a6974545b4b9eb2e865277248aa44","modified":1485418670000},{"_id":"source/_posts/服务器-套路/阿里云部署-安装FTP-.md","hash":"397dd370bd47df5f06b9b8a6ede9fd4fe72039bb","modified":1485418670000},{"_id":"source/_posts/服务器-套路/阿里云配置-VPN-常用操作.md","hash":"21e2a9fef529e7dddd84b966e99b3fe04a796e08","modified":1485418670000},{"_id":"source/_posts/服务器-套路/阿里云配置-yummyftp-激活码.md","hash":"f053465b2fa7d3c85fa46fec447aba3441461a37","modified":1485418670000},{"_id":"source/_posts/项目开发-点滴/Aspose-barcode-.md","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1485418670000},{"_id":"source/_posts/项目开发-点滴/Aspose-barcode-条码和二维码处理.md","hash":"bbfa81c2829849d2f7fcb77b27d56a794735e0cb","modified":1485418670000},{"_id":"source/_posts/项目开发-点滴/Mac-Photoshop-cs6-.md","hash":"6cab402156b55991c5bcdbd15623dd2b6793a613","modified":1485418670000},{"_id":"source/_posts/项目开发-点滴/LI系统整体框架解析.md","hash":"cfcd0ffbf71ca51c828eb79b91b1399238899786","modified":1485418670000},{"_id":"source/_posts/项目开发-点滴/bms数据库-还回.md","hash":"e11afbef0bd0b5d6ee3a5c24101c22ebe59d47c6","modified":1485418670000},{"_id":"source/_posts/项目开发-点滴/jersey-2-x-记录.md","hash":"99b56547ffebf5e87b6a33252763670cecd91541","modified":1485418670000},{"_id":"source/_posts/项目开发-点滴/bms数据库---借出.md","hash":"df906025b79fa636c6cc63a660929257290c30fe","modified":1485418670000},{"_id":"source/_posts/项目开发-点滴/图像处理-ImageMagick-+-im4java.md","hash":"e02c581f6f43b1f21012b552c60a0fda7ccfe43d","modified":1485418670000},{"_id":"source/_posts/项目开发-点滴/备忘录.md","hash":"985982bc10e2c153f4107692e44a08c421e3d297","modified":1485418670000},{"_id":"source/_posts/项目开发-点滴/如何更有效地使用谷歌搜索-Chrome.md","hash":"9502130320fa92312e1fdc8f717749b722500422","modified":1485418670000},{"_id":"source/_posts/项目开发-点滴/年度工作总结-医药行业与软件技术的碰撞.md","hash":"78bbc72469b726463bc556d68d2e4f49a337447f","modified":1485418670000},{"_id":"source/_posts/项目开发-点滴/打印中心需求文档.md","hash":"412d09679dfc926876f26f385e91b5f123cd4281","modified":1485418670000},{"_id":"source/_posts/项目开发-点滴/添加的数据.md","hash":"8978450cf5e064e3aa86e4d20a21c32eacedae38","modified":1485418670000},{"_id":"themes/maupassant/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1485415859000},{"_id":"themes/maupassant/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1485415859000},{"_id":"themes/maupassant/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1485415859000},{"_id":"themes/maupassant/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1485415859000},{"_id":"themes/maupassant/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1485415859000},{"_id":"themes/maupassant/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1485415859000},{"_id":"themes/maupassant/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1485415859000},{"_id":"themes/maupassant/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1485415859000},{"_id":"themes/maupassant/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1485415859000},{"_id":"themes/maupassant/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1485415859000},{"_id":"themes/maupassant/.git/logs/HEAD","hash":"b58c1bb4ca9058c9a7f9df9a827c22e3ac9c89c0","modified":1485415864000},{"_id":"themes/maupassant/layout/_partial/after_footer.jade","hash":"3dbcc9a9f0d6e55da191d3393c18bbfcfe99fa69","modified":1485415864000},{"_id":"themes/maupassant/layout/_partial/helpers.jade","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1485415864000},{"_id":"themes/maupassant/layout/_partial/comments.jade","hash":"6c7f63ba04a4d28323ba31e79a4927f3d3fcc56e","modified":1485415864000},{"_id":"themes/maupassant/layout/_partial/footer.jade","hash":"aa020b794e697e8e9612530c97c6295efde469fe","modified":1485415864000},{"_id":"themes/maupassant/layout/_partial/mathjax.jade","hash":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1485415864000},{"_id":"themes/maupassant/layout/_partial/mathjax2.jade","hash":"d6ac5dc4e9c7a1b866f1f92d88988cfb35aded4c","modified":1485415864000},{"_id":"themes/maupassant/layout/_partial/paginator.jade","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1485415864000},{"_id":"themes/maupassant/layout/_partial/post_nav.jade","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1485415864000},{"_id":"themes/maupassant/layout/_partial/tag.jade","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1485415864000},{"_id":"themes/maupassant/layout/_partial/totop.jade","hash":"8225bbc3cdb9648bc2e6872e5c616a9a1e4def4f","modified":1485415864000},{"_id":"themes/maupassant/layout/_widget/category.jade","hash":"7c6aed762934ca51aa2669b886254da24b77bc14","modified":1485415864000},{"_id":"themes/maupassant/layout/_widget/links.jade","hash":"f57a0c76d243882b2b77330132bdb43bc648948b","modified":1485415864000},{"_id":"themes/maupassant/layout/_widget/recent_comments.jade","hash":"e119c5afa85abc60d139e2da99b0bfcd7a6530f8","modified":1485415864000},{"_id":"themes/maupassant/layout/_widget/recent_posts.jade","hash":"19431336d724d2118e46da43683bce9063176541","modified":1485415864000},{"_id":"themes/maupassant/layout/_widget/search.jade","hash":"193546282908e499813534f86d27ef6e0a1357b3","modified":1485415864000},{"_id":"themes/maupassant/layout/_widget/tag.jade","hash":"132f049ce677d0e38f50073174c4ee4b825d4a06","modified":1485415864000},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","hash":"f42f761157f26244673eb2f4a9215c70956f80dc","modified":1485415864000},{"_id":"themes/maupassant/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1485415864000},{"_id":"themes/maupassant/source/css/style.scss","hash":"158f1ebecf7b994ffae5332a627465f6bf38113b","modified":1485415864000},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1485415864000},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1485415864000},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1485415864000},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1485415864000},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1485415864000},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1485415864000},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1485415864000},{"_id":"themes/maupassant/source/js/search.js","hash":"0c0630e2ef213701d393b041f10572e951a27985","modified":1485415864000},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1485415864000},{"_id":"themes/maupassant/source/js/share.js","hash":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1485415864000},{"_id":"themes/maupassant/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1485415864000},{"_id":"themes/maupassant/.git/objects/pack/pack-75caa364d8078c39e32101665c0c6c94ab45492f.idx","hash":"6918c045c1d26cd82874029e879921a25e1f78fe","modified":1485415864000},{"_id":"themes/maupassant/.git/refs/heads/master","hash":"e7de97753d00149057ca0ae9ed395fd347042cbf","modified":1485415864000},{"_id":"themes/maupassant/.git/logs/refs/heads/master","hash":"b58c1bb4ca9058c9a7f9df9a827c22e3ac9c89c0","modified":1485415864000},{"_id":"themes/maupassant/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1485415864000},{"_id":"themes/maupassant/.git/logs/refs/remotes/origin/HEAD","hash":"b58c1bb4ca9058c9a7f9df9a827c22e3ac9c89c0","modified":1485415864000},{"_id":"themes/maupassant/.git/objects/pack/pack-75caa364d8078c39e32101665c0c6c94ab45492f.pack","hash":"6052695097aa1a2b32d539f20f4778a915177617","modified":1485415864000},{"_id":"source/_posts/angular-套路/angular-provider.md","hash":"d90308dd1d1a28b2058afc40c59e854b3536d230","modified":1486344943000},{"_id":"source/_posts/Git/git-SSH-keys.md","hash":"35a762794f4d95b3e51b1785f30346100a21f036","modified":1486345304000},{"_id":"source/_posts/Git/git-代码提交.md","hash":"cbe9ede8cc7faea31006c15e5f724a502c3afdce","modified":1485418670000},{"_id":"source/_posts/Git/git-压缩包.md","hash":"a182dde4025baa1528f00c0b0842e3d1d98f98f4","modified":1485418670000},{"_id":"source/_posts/Git/git-增加-删除文件.md","hash":"c06d25dc3b99241973c39440edfdd3fd28f95c37","modified":1485418670000},{"_id":"source/_posts/Git/git-分支.md","hash":"0e7d285be2834bd38dc232d74cc1548c3788228c","modified":1485418670000},{"_id":"source/_posts/Git/git-忽略上传--gitignore.md","hash":"5a4dcff1734c9021ca8236c97de2b79f60cd8cda","modified":1485418670000},{"_id":"source/_posts/Git/git-新建代码库.md","hash":"9a2bb032e0421b0fe644362945f6c918d769d416","modified":1485418670000},{"_id":"source/_posts/Git/git-撤销.md","hash":"b73bd7e3ddec54caffa924f1b4f01f7dbafd7269","modified":1485418670000},{"_id":"source/_posts/Git/git-查看信息.md","hash":"ec265925a3a2a2c04cf43d5e8bab57be9cd466b7","modified":1485418670000},{"_id":"source/_posts/Git/git-远程同步.md","hash":"e1368d730aafe91e36d21e6d4c9e5efa9cbe3189","modified":1485418670000},{"_id":"source/_posts/Git/git-标签.md","hash":"f3ee918fdde3d7cf1f67df9b3a02a2746722fe4b","modified":1485418670000},{"_id":"source/_posts/Git/git-配置.md","hash":"ee4ab840269a016ec6058cd516cad29144dccb03","modified":1485418670000},{"_id":"source/_posts/express/jade-在express下调用.md","hash":"b0beb2d353c9937004d445bc2a2c099f177b192b","modified":1486345245000},{"_id":"source/_posts/express/jade-语法格式.md","hash":"ce00624feb9dd6cd0980c1a9299d556aa2225613","modified":1486345259000},{"_id":"source/_posts/docker/docker-技术入门与实战-笔记.md","hash":"5e7e15e895cc25e1c90c3dfdd19ce1e1e7a52cc2","modified":1486345175000},{"_id":"source/_posts/apache-common/java-common-Lang-CharSetUtils.md","hash":"4d09bfba6613400a37285bda8f8efd1159699529","modified":1486345123000},{"_id":"source/_posts/apache-common/apache-common-浅尝实操.md","hash":"b5135b351c371fb8a488af14032b8eb386a41543","modified":1486345123000},{"_id":"source/_posts/apache-common/java-common-Lang-StringUtils.md","hash":"a506fbef60540fe9363bff1d9db477a044d8f5d7","modified":1486345123000},{"_id":"source/_posts/angular/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1485419429000},{"_id":"source/_posts/angular/angular-$scope变量和方法.md","hash":"cbea956301b1471d6d5d4536e68907533155f85a","modified":1486350370000},{"_id":"source/_posts/angular/angular-$watch.md","hash":"b11a7cf6435995e245d1ac43b5081745eb8dbd1b","modified":1486350385000},{"_id":"source/_posts/angular/angular-JQuery-的-数据获取.md","hash":"be01641915c7533d474326aa4ebfe3ef43930c5d","modified":1486344950000},{"_id":"source/_posts/angular/angular-constant.md","hash":"441e7efb6828b0edcd55c2334f9906ffa29d776e","modified":1486344982000},{"_id":"source/_posts/angular/angular-controller.md","hash":"d36968028465c43d6fe83b89c0ddf15d3f03c234","modified":1486350408000},{"_id":"source/_posts/angular/angular-css类和样式.md","hash":"73977594fafbacd1011fb1b8037fa24afb377107","modified":1486344969000},{"_id":"source/_posts/angular/angular-factory.md","hash":"38c4a314eea32f3451c46e0ddb418b5161d77ff7","modified":1486350424000},{"_id":"source/_posts/angular/angular-provider.md","hash":"3989c2d66a84affb3afa3d3c53ca47d77275fb96","modified":1486350440000},{"_id":"source/_posts/angular/angular-restrict作用.md","hash":"97ddeb804ac2aab64317712c5d0d0e10bc49eb9a","modified":1486344935000},{"_id":"source/_posts/angular/angular-service.md","hash":"fd3aeb5d8c27e99f525215a4863ff69e716cc16f","modified":1486350461000},{"_id":"source/_posts/angular/angular-value.md","hash":"e22b806081e826b0d79c1118109d150b17e63ef7","modified":1486350545000},{"_id":"source/_posts/angular/angular-事件绑定.md","hash":"91173a97c87e2dc98a1a77bdf34cd72dccd959a0","modified":1486344916000},{"_id":"source/_posts/angular/angular-入门.md","hash":"c9fa414d20df7bf76a0586ebf0820673ae8aa793","modified":1486344911000},{"_id":"source/_posts/angular/angular-创建自定义指令.md","hash":"46eb80d4d46386e401c96a8c8148f0f61c5db703","modified":1486350545000},{"_id":"source/_posts/angular/angular-包含.md","hash":"37d83cd44045b2e1122cf6e53df14086d7db355b","modified":1486350545000},{"_id":"source/_posts/angular/angular-扩展html.md","hash":"8bb16601a886cfd1353b7edde3b665daee06deec","modified":1486350545000},{"_id":"source/_posts/angular/angular-控件间的传值.md","hash":"eb25e09227ecdf2a48fdf5a3b11e30595e6c3dad","modified":1486350545000},{"_id":"source/_posts/angular/angular-模板内容、方式.md","hash":"3c44c40fd74a7f9e528d7f6e9de787306fe97da3","modified":1486350545000},{"_id":"source/_posts/angular/angular-模板节点控制.md","hash":"e2daf2405bc9dfcb132777290c7e15c46adcc069","modified":1486350545000},{"_id":"source/_posts/angular/angular-获取列表中的值.md","hash":"d562c9b84ac997fc22dec5910a6813aee87c227d","modified":1486344848000},{"_id":"source/_posts/angular/angular-模板内容渲染.md","hash":"3f1b9ec5cb1620d9aa5f9356cb83cb542269afef","modified":1486350545000},{"_id":"source/_posts/angular/angular-自定义指令.md","hash":"fbb5ebd091425b1cf806dbf4ae30ee7e2008415a","modified":1486350545000},{"_id":"source/_posts/angular/angular-隔离指令的作用域.md","hash":"569265e9d0d36056746a63c195943869bed2a2e9","modified":1486350545000},{"_id":"source/_posts/angular/angular-表单输入.md","hash":"bff97ca1bd50909c81d4aedd5ea7061180602dc2","modified":1486350545000},{"_id":"source/_posts/angular/angular-表单.md","hash":"401ad10cba865131ad06c1f92a1dfb0656929c7e","modified":1486350545000},{"_id":"source/_posts/intellj-idea/intellj-idea-maven-Web项目-+-tomcat-的搭建.md","hash":"6e8bcc51c59f1d92f19fbf6208c02aadc82cc705","modified":1486346637000},{"_id":"source/_posts/intellj-idea/intellj-idea-开发环境配置.md","hash":"f72cb57b6dac1133bc4bba906b1c8f189e89ffa0","modified":1486346653000},{"_id":"source/_posts/ios/Mac-OS-X-安装-maven-.md","hash":"33b451bc046b8b804c1f86d79f6d35c5acd4d869","modified":1485418670000},{"_id":"source/_posts/ios/app-签收.md","hash":"772b43568505476240777c61cdddf4dad401be14","modified":1485418670000},{"_id":"source/_posts/ios/ios-核心开发手册读书笔记.md","hash":"bb2aaddf210c99b0cb4377e5a4a6009ae5bd0a67","modified":1486346688000},{"_id":"source/_posts/Java/java-intell-IDEA-配置-tomcat.html","hash":"1473ae1ec05201a8c346cfc7430d74ea34a31df1","modified":1485418670000},{"_id":"source/_posts/Java/java-fastjson-解析json配置文件.md","hash":"4c93d86c64bf2aa548757a969966f23664ec8c8c","modified":1485418670000},{"_id":"source/_posts/Java/java-maven-pom-xml.md","hash":"19a8ac660fb2cd10b532185ac6ca6dd540875c03","modified":1485418670000},{"_id":"source/_posts/Java/java-ArrayList和LinkedList的几种循环遍历方式.md","hash":"17027de0c6b5ea3543fee6f0cd9d5c00d852c363","modified":1485418670000},{"_id":"source/_posts/Java/java-图片切割.md","hash":"7a32dadcd65bc0a0816fbe3a7b8783c2efa3945c","modified":1485418670000},{"_id":"source/_posts/Java/java-castor-与XML的数据绑定.md","hash":"8870d6b976fee23562ccd70d43f91d38915e7b35","modified":1486347095000},{"_id":"source/_posts/Java/java-搜罗-分析具体项目中使用的包.md","hash":"bdcbe107aff0ce25d16c234635cda908e3b07506","modified":1485418670000},{"_id":"source/_posts/Java/java-获取当前文件-class-的相对或绝对路径.md","hash":"8d6a622e27ce1622ebb1b508b82ce405e5de0e65","modified":1485418670000},{"_id":"source/_posts/Java/java-测试项目的流程.md","hash":"9af3732cedd398563af83b3002e6402d0b98fde4","modified":1485418670000},{"_id":"source/_posts/Java/java-项目目录结构分析.md","hash":"890b89c780e2982805ac27b4ed79836b789bb8e0","modified":1485418670000},{"_id":"source/_posts/Javascript-array/js-array-Array-of-转换数组.md","hash":"4a7f7af0c081bff74a7e974c376383c732b124cb","modified":1486349226000},{"_id":"source/_posts/Javascript-array/js-array-api-常用.md","hash":"56c4532df8e54332e009503ad7e0d1ea0657faa5","modified":1486349231000},{"_id":"source/_posts/Javascript-array/js-array-reduce.md","hash":"a713985c70846f53ae8046a4bed6e8a64c44daf6","modified":1486349222000},{"_id":"source/_posts/Javascript-array/js-array-填充数组.md","hash":"73c2c032821f62802fe21b944ba342a8da2c68f4","modified":1486350621000},{"_id":"source/_posts/Javascript-array/js-array-生成数组.md","hash":"59d08921a70a38e21acbca4c2398c1bd73899b70","modified":1486350621000},{"_id":"source/_posts/Javascript-array/js-array-复制数组.md","hash":"6d84d194fc3eb556e5629e9c5e5aaa63f2a73411","modified":1486350621000},{"_id":"source/_posts/Javascript-array/js-json-转换.md","hash":"ea00ed8b2e2d720194ce32db67c7fccd542feb42","modified":1486350621000},{"_id":"source/_posts/Javascript-array/js-array-遍历数组.md","hash":"6d84b3604a00a273445c7c5a9661cc1ccfa81f2d","modified":1486349200000},{"_id":"source/_posts/Javascript-Promise/js-Promise-race.md","hash":"b19ec0fead2584b2d2b5f32df124a3a985b52ff0","modified":1486349393000},{"_id":"source/_posts/Javascript-Promise/js-Promise-Thenable.md","hash":"af20138df966ba61b80196596146941f765fdac3","modified":1486350671000},{"_id":"source/_posts/Javascript-Promise/js-Promise-catch.md","hash":"1a6fbd869617cf59f50ddac9e0499e4b0da1b1ad","modified":1486350661000},{"_id":"source/_posts/Javascript-Promise/js-Promise-简介及例子.md","hash":"373ba89bbdeb5cc66638f116788e12f625fabb19","modified":1486350661000},{"_id":"source/_posts/Javascript-Promise/js-Promise-all.md","hash":"b4a4a012d46012c575e061a0afd881e7c6fa063a","modified":1486350661000},{"_id":"source/_posts/Javascript-Promise/js-Promise-resolve().md","hash":"04692d0a40317b7011f7f294c3940bc516a92a5a","modified":1485418670000},{"_id":"source/_posts/Javascript-Promise/js-Promise-传值.md","hash":"6d28e48b9c88cd535b01d64ce22343bdd464cabd","modified":1486349370000},{"_id":"source/_posts/Javascript-Promise/js-Promise.md","hash":"d051de600ef5b75db355d6c7621f218260c7fcf9","modified":1486350661000},{"_id":"source/_posts/Javascript-Promise/js-Promise-解决地狱回调.md","hash":"556213688925307cfe4a7eab5557bcf071bc4e96","modified":1486350661000},{"_id":"source/_posts/Javascript/js-IIFE--立即调用的函数表达式.md","hash":"c4948455f1ce2ff5199349582ec16ee59417327b","modified":1486347385000},{"_id":"source/_posts/Javascript/js-&&-和----用法.md","hash":"f3747b40543cc825b4798bb77e88a506910ea92c","modified":1486347287000},{"_id":"source/_posts/Javascript/js-Reflect.md","hash":"cb2836d9703c480fc3ebd2873eadfd53adfee9a1","modified":1486347375000},{"_id":"source/_posts/Javascript/js-Set-简介.md","hash":"f1283234daccbb4f6da4e17d1e9854ba85def016","modified":1486350754000},{"_id":"source/_posts/Javascript/js-Symbol-介绍及应用.md","hash":"2008bb1489b0b7704592c77086630eb934c60c1e","modified":1486347365000},{"_id":"source/_posts/Javascript/js-es6-对象解构赋值.md","hash":"cb86d9994315b1201e670bf43350409527dfde18","modified":1486350754000},{"_id":"source/_posts/Javascript/js-es6-数组解构赋值.md","hash":"0e89abe8c68d2e8ce8f88b7e416c05925e7e1de7","modified":1486350754000},{"_id":"source/_posts/Javascript/js-export.md","hash":"f91a9bb9f66d8f2701db1ebeaa9c97ee778243a3","modified":1486350754000},{"_id":"source/_posts/Javascript/js-module-多种模式的开发.md","hash":"d5662aa2c326d94619a740a80b23862861213480","modified":1486350754000},{"_id":"source/_posts/Javascript/js-对象简写.md","hash":"d9e31fbee2f496112b6fa285d7b43c84b2ed63ab","modified":1486350754000},{"_id":"source/_posts/Javascript/js-数据属性和访问器属性.md","hash":"7baf85969bf0a84038b74a2a4d7fcfd23df8c13b","modified":1486350754000},{"_id":"source/_posts/Javascript/js-时间--测试函数.md","hash":"08cc722bb46384873fb844a7baa5c39c3bb864e3","modified":1486347350000},{"_id":"source/_posts/Javascript/js-管理私有属性.md","hash":"d3f83623a661b8a25872a567bf481e898ecdf98f","modified":1486347344000},{"_id":"source/_posts/Javascript/js-类型的转换.md","hash":"7f1eb3a61c3e89d3d0266aa01d7198c96bc4d591","modified":1486350754000},{"_id":"source/_posts/Javascript/js-闭包理解---缺乏形参.md","hash":"e3dc57d79a1785ae6327e636bd797868cec1a586","modified":1486347334000},{"_id":"source/_posts/Javascript-设计模式/js-pattern--h-策略模式.md","hash":"6cd298001a9b1038cc6b52f83df1fc73aa5e2dbc","modified":1486349497000},{"_id":"source/_posts/Javascript-设计模式/js-pattern--h-模板方法模式.md","hash":"2d72c2edbdb346fdc10c7d4884370f152c8da2f7","modified":1486349508000},{"_id":"source/_posts/Javascript-设计模式/js-pattern--h-观察者模式.md","hash":"98ce661c3062366055c497ac1c26f46bd8a7867d","modified":1486349490000},{"_id":"source/_posts/Javascript-设计模式/js-pattern--k-节流模式.md","hash":"c17360c651d4d04000fde1c1d32a1d71929b4ff1","modified":1486349482000},{"_id":"source/_posts/Javascript-设计模式/js-pattern-简介与对象的收编.md","hash":"f139f3e0c88c2b9b2d988db728d94e08b097a117","modified":1486349470000},{"_id":"source/_posts/Javascript-设计模式/js-pattern--s-享元模式.md","hash":"69b6f25cf9de12c95d6e3186177b22a8c86a4767","modified":1486349476000},{"_id":"source/_posts/Javascript-设计模式/js-pattern--h-状态模式.md","hash":"6123a1e5bc3bb01965af81ba565782c838d48895","modified":1486349503000},{"_id":"source/_posts/mongodb/mongodb-find&sort.md","hash":"267329248a670ded0e33ab600a5d672a34aaf3ba","modified":1486350868000},{"_id":"source/_posts/mongodb/mongodb-remove.md","hash":"24311659dd547a2e79f09eff9db8b4125a42714c","modified":1486349602000},{"_id":"source/_posts/mongodb/mongodb-insert&save.md","hash":"8c7369fa18806a669a48ee2f45b8cee5b59b1677","modified":1486349607000},{"_id":"source/_posts/mongodb/mongodb-update.md","hash":"deb3d4e28c04ccb4bbec4a07effed50cf3496043","modified":1486349597000},{"_id":"source/_posts/mongodb/mongodb-初识.md","hash":"650e84d503515b16a5e808ceb29902c43d71168d","modified":1486350895000},{"_id":"source/_posts/mongodb/mongodb-索引.md","hash":"1f3ca187af224c6bc11b2fed4b83901542454f3b","modified":1486350907000},{"_id":"source/_posts/Mysql/brew-安装-mysql-启动.md","hash":"4e9bb61e4ea2d8e7df19070c2738ab2d5e26996c","modified":1486349638000},{"_id":"source/_posts/nginx/nginx-开发理解.md","hash":"3ebf29db9bfbe177101ec5c1d1f0069b21e9f2e1","modified":1486349669000},{"_id":"source/_posts/Oracle-PL-SQL/oracle-关于生成包-存储过程.md","hash":"0117531ccdd518f87c1a2d4ac91b0985cae22e8c","modified":1485418670000},{"_id":"source/_posts/Oracle-PL-SQL/基于-JetBrains-DataGrip-之-Oracle-PL-SQL-攻略--(一).md","hash":"a1d6a16f6f5817cb4d4c52b1ef88ff8cd645be5e","modified":1485418670000},{"_id":"source/_posts/Oracle-PL-SQL/基于-JetBrains-DataGrip-之-Oracle-PL-SQL-攻略--(二).md","hash":"7aa587f182d886c1c834ec64229e7835de168b29","modified":1485418670000},{"_id":"source/_posts/Oracle-PL-SQL/基于-JetBrains-DataGrip-之-Oracle-PL-SQL-攻略--LiveTemplate.md","hash":"d4d652bd437bd4292b12c02b72025e625cfc5b79","modified":1485418670000},{"_id":"source/_posts/OSX/alfred-workflows-多风格的编码变量-插件---.md","hash":"411e586e369fcba1c6eaa004cd94cfff9e1f83bb","modified":1486350062000},{"_id":"source/_posts/OSX/mac-http-proxy.md","hash":"a0dbf66d509bbd221e1da34e4f59698dd105aca6","modified":1486350056000},{"_id":"source/_posts/OSX/brew-java-安装.md","hash":"5b2899b0da5ca373097f7ae94a60810e46d86334","modified":1486350056000},{"_id":"source/_posts/OSX/mac-切换root用户.md","hash":"ec55cf4184b43a385e7f23cc276531486e6e1cc8","modified":1486350046000},{"_id":"source/_posts/OSX/mac-日常遇到的命令记录.md","hash":"6221645e653fe75064491bbc22fbf251bb6131ae","modified":1486350028000},{"_id":"source/_posts/OSX/mac-终端-用-proxychains-ng-走-shadowsocks.md","hash":"b52e283f27b8fed0591356d002b1a3fbc65759a5","modified":1486350017000},{"_id":"source/_posts/OSX/mac-系统文件夹的含义.md","hash":"d87093d5edc3485ab64794af2102da6821e9d3e8","modified":1486350023000},{"_id":"source/_posts/OSX/mac-切换到子用户.md","hash":"61062f8f7a8861784c3484c734e76417b2a171a4","modified":1486350039000},{"_id":"source/_posts/OSX/mac-访问-Windows-共享文件夹.md","hash":"75f6d8ffc5c8d51eb6abcb7ae81cad25f85e408e","modified":1486350012000},{"_id":"source/_posts/OSX/mongodb-开机启动.md","hash":"277ceaefd4f89d015608e46df01222633b3bba85","modified":1486350008000},{"_id":"source/_posts/react-native/rn-mac-android-开发环境部署.md","hash":"ecdae361f4cdf94cf91338e1faba4222aa399e6a","modified":1486350102000},{"_id":"source/_posts/react-native/rn-mac-android-开发日常记录.md","hash":"61981714502978f71381edf79a2ddaff8574f4d1","modified":1486350108000},{"_id":"source/_posts/服务器/阿里云部署-Nginx.md","hash":"2a27bc1f41a34e1f32c2409b9e24004b2dc42d1a","modified":1485418670000},{"_id":"source/_posts/服务器/阿里云部署-安装-Node.md","hash":"15192052549a6974545b4b9eb2e865277248aa44","modified":1485418670000},{"_id":"source/_posts/服务器/阿里云部署-安装FTP-.md","hash":"397dd370bd47df5f06b9b8a6ede9fd4fe72039bb","modified":1485418670000},{"_id":"source/_posts/服务器/阿里云配置-VPN-常用操作.md","hash":"21e2a9fef529e7dddd84b966e99b3fe04a796e08","modified":1485418670000},{"_id":"source/_posts/服务器/阿里云配置-yummyftp-激活码.md","hash":"f053465b2fa7d3c85fa46fec447aba3441461a37","modified":1485418670000},{"_id":"source/_posts/项目开发/Aspose-barcode-.md","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1485418670000},{"_id":"source/_posts/项目开发/Aspose-barcode-条码和二维码处理.md","hash":"bbfa81c2829849d2f7fcb77b27d56a794735e0cb","modified":1485418670000},{"_id":"source/_posts/项目开发/LI系统整体框架解析.md","hash":"cfcd0ffbf71ca51c828eb79b91b1399238899786","modified":1485418670000},{"_id":"source/_posts/项目开发/Mac-Photoshop-cs6-.md","hash":"6cab402156b55991c5bcdbd15623dd2b6793a613","modified":1485418670000},{"_id":"source/_posts/项目开发/bms数据库---借出.md","hash":"df906025b79fa636c6cc63a660929257290c30fe","modified":1485418670000},{"_id":"source/_posts/项目开发/bms数据库-还回.md","hash":"e11afbef0bd0b5d6ee3a5c24101c22ebe59d47c6","modified":1485418670000},{"_id":"source/_posts/项目开发/jersey-2-x-记录.md","hash":"99b56547ffebf5e87b6a33252763670cecd91541","modified":1485418670000},{"_id":"source/_posts/项目开发/图像处理-ImageMagick-+-im4java.md","hash":"e02c581f6f43b1f21012b552c60a0fda7ccfe43d","modified":1485418670000},{"_id":"source/_posts/项目开发/备忘录.md","hash":"985982bc10e2c153f4107692e44a08c421e3d297","modified":1485418670000},{"_id":"source/_posts/项目开发/如何更有效地使用谷歌搜索-Chrome.md","hash":"9502130320fa92312e1fdc8f717749b722500422","modified":1485418670000},{"_id":"source/_posts/项目开发/年度工作总结-医药行业与软件技术的碰撞.md","hash":"78bbc72469b726463bc556d68d2e4f49a337447f","modified":1485418670000},{"_id":"source/_posts/项目开发/打印中心需求文档.md","hash":"412d09679dfc926876f26f385e91b5f123cd4281","modified":1485418670000},{"_id":"source/_posts/项目开发/添加的数据.md","hash":"8978450cf5e064e3aa86e4d20a21c32eacedae38","modified":1485418670000},{"_id":"source/_posts/git/git 指令大全.md","hash":"fe28be6bb888303daf427ad5fb865f489d52be7e","modified":1486346046000},{"_id":"source/_posts/Git/git 指令大全.md","hash":"fe28be6bb888303daf427ad5fb865f489d52be7e","modified":1486346046000},{"_id":"source/_posts/Java/Mac-OS-X-安装-maven-.md","hash":"6256d37d2b63933b7fe807fb6c61f38973890df1","modified":1486346734000},{"_id":"source/_posts/java/Mac-OS-X-安装-maven-.md","hash":"6256d37d2b63933b7fe807fb6c61f38973890df1","modified":1486346734000},{"_id":"source/_posts/java/java-castor-与XML的数据绑定.md","hash":"815f7cc8b0a570dd235cf774eb4f67ead17231c3","modified":1486347102000},{"_id":"source/_posts/java/java-fastjson-解析json配置文件.md","hash":"71e339be23c1cff2833e3ed5e6b03852b14a7a54","modified":1486347226000},{"_id":"source/_posts/java/java-maven-pom-xml.md","hash":"19a8ac660fb2cd10b532185ac6ca6dd540875c03","modified":1485418670000},{"_id":"source/_posts/java/java-intell-IDEA-配置-tomcat.html","hash":"1473ae1ec05201a8c346cfc7430d74ea34a31df1","modified":1485418670000},{"_id":"source/_posts/java/java-图片切割.md","hash":"9f384cb070dfe1065a36dc2c54780affedb39a65","modified":1486347233000},{"_id":"source/_posts/java/java-搜罗-分析具体项目中使用的包.md","hash":"bdcbe107aff0ce25d16c234635cda908e3b07506","modified":1485418670000},{"_id":"source/_posts/java/java-测试项目的流程.md","hash":"9af3732cedd398563af83b3002e6402d0b98fde4","modified":1485418670000},{"_id":"source/_posts/java/java-获取当前文件-class-的相对或绝对路径.md","hash":"e541547103520a7b6277171aaa8901dc4afe75ca","modified":1486347202000},{"_id":"source/_posts/java/java-项目目录结构分析.md","hash":"890b89c780e2982805ac27b4ed79836b789bb8e0","modified":1485418670000},{"_id":"source/_posts/工具/oracle-关于生成包-存储过程.md","hash":"a8f732d2c89a6cb778b41e30bc8872857d7084ee","modified":1486349731000},{"_id":"source/_posts/工具/基于-JetBrains-DataGrip-之-Oracle-PL-SQL-攻略--(一).md","hash":"6e0c6a03acc39c0fa1cf985dbbb9ba9df7773794","modified":1486349760000},{"_id":"source/_posts/工具/基于-JetBrains-DataGrip-之-Oracle-PL-SQL-攻略--(二).md","hash":"d0d7491215b6faa3efe4b33bc1c6ff2d7f46349b","modified":1486349765000},{"_id":"source/_posts/其他/Aspose-barcode-条码和二维码处理.md","hash":"d4781136c40b67de9cf4fa0fdd593fb29660fbbc","modified":1486350341000},{"_id":"source/_posts/其他/Mac-Photoshop-cs6-.md","hash":"6cab402156b55991c5bcdbd15623dd2b6793a613","modified":1485418670000},{"_id":"source/_posts/其他/jersey-2-x-记录.md","hash":"d6bbde1ba65153294a521de78952ffcf3f360f5d","modified":1486350341000},{"_id":"source/_posts/其他/图像处理-ImageMagick-+-im4java.md","hash":"95024faf0c1a94ae903d46cfb03951887f66cc97","modified":1486350330000},{"_id":"source/_posts/其他/如何更有效地使用谷歌搜索-Chrome.md","hash":"0c26231efb57d1b75dba9f39efc8d8439e1c86d9","modified":1486350325000},{"_id":"source/_posts/Javascript-Promise/js-Promise-resolve.md","hash":"fcf682a2a354dd8fbd321be2ff6cbb997e6a8bfd","modified":1486349381000},{"_id":"source/_posts/工具/Mac-Photoshop-cs6.md","hash":"53994b649db00852d3ae2901d492281ef209018e","modified":1486350296000},{"_id":"source/_posts/工具/yummyftp-激活码.md","hash":"0ebbef7338cfab362ad0e35d8b78a34b6aa3c5f5","modified":1486350193000},{"_id":"source/_posts/服务器/部署-Nginx.md","hash":"b3b7c2e8062202565d7a5dd5af70cd5720090629","modified":1486350947000},{"_id":"source/_posts/服务器/部署-VPN-常用操作.md","hash":"ac26cd2c467f22737c22400345abbbdf2b79c710","modified":1486350960000},{"_id":"source/_posts/服务器/部署-安装-Node.md","hash":"f625597be22e80692de39b144e654cfcb95c4f7e","modified":1486350960000},{"_id":"source/_posts/服务器/部署-安装FTP-.md","hash":"f231b49ba492f14e7ae3b50063126f9934e517d1","modified":1486350966000}],"Category":[{"name":"angular","_id":"ciytffo770001s10oso7rbaun"},{"name":"apache-common","_id":"ciytfidvo000us10ol5hdwrgm"},{"name":"java","parent":"ciytfidvo000us10ol5hdwrgm","_id":"ciytfidvo000vs10o9nkhsxts"},{"name":"docker","_id":"ciytfjhcn0014s10oizpzfhq5"},{"name":"express","_id":"ciytfkk0v0016s10opv15jsd9"},{"name":"git","_id":"ciytfm8th001as10oq3ibddkl"},{"name":"intellj-idea","_id":"ciytgetdj006as10ons8uceli"},{"name":"ios","_id":"ciytgfwq9006es10olitic2il"},{"name":"java","_id":"ciytggwox006js10o5sx9nf23"},{"name":"javascript","_id":"ciytgsr1q0075s10ooqmw3z7q"},{"name":"jenkins","_id":"ciyti51yb000ji20o8n63zb6i"},{"name":"mongodb","_id":"ciyti5yk3000li20o9q9h9phl"},{"name":"mysql","_id":"ciyti721s000ui20oa5ta50wc"},{"name":"nginx","_id":"ciyti7t1i000xi20ohtbyxwj5"},{"name":"工具","_id":"ciyti950e000zi20o2oj82ngb"},{"name":"osx","_id":"ciytiewia001ai20ot94iuh8y"},{"name":"react-native","_id":"ciytigzns001ni20o4arwu8jj"},{"name":"服务器","_id":"ciytihun9001ri20ook2dro4q"},{"name":"vps","_id":"ciytii0zt001ti20og2ttqhcd"},{"name":"others","_id":"ciytil98j002li20oia6rplic"}],"Data":[],"Page":[],"Post":[{"title":"jenkins-常用配置记录","date":"2016-09-10T16:00:00.000Z","_content":"\n> 设定默认端口\n\n```\n\nsudo defaults write /Library/Preferences/org.jenkins-ci httpPort 7070\n\n```\n\n> 启动\n\n```\n\nsudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist\n\n```\n\n> 关闭\n\n```\n\nsudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist\n\n```\n","source":"_posts/jenkins/jenkins-常用配置记录.md","raw":"---\ntitle: jenkins-常用配置记录\ndate: 2016-09-11\ncategories: \n- jenkins\n---\n\n> 设定默认端口\n\n```\n\nsudo defaults write /Library/Preferences/org.jenkins-ci httpPort 7070\n\n```\n\n> 启动\n\n```\n\nsudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist\n\n```\n\n> 关闭\n\n```\n\nsudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist\n\n```\n","slug":"jenkins/jenkins-常用配置记录","published":1,"updated":"2017-02-06T02:52:21.000Z","_id":"ciytdotw80035nr0o25ido452","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>设定默认端口</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">sudo defaults write /Library/Preferences/org.jenkins-ci httpPort 7070</div></pre></td></tr></table></figure>\n<blockquote>\n<p>启动</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist</div></pre></td></tr></table></figure>\n<blockquote>\n<p>关闭</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">sudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>设定默认端口</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">sudo defaults write /Library/Preferences/org.jenkins-ci httpPort 7070</div></pre></td></tr></table></figure>\n<blockquote>\n<p>启动</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist</div></pre></td></tr></table></figure>\n<blockquote>\n<p>关闭</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">sudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist</div></pre></td></tr></table></figure>\n"},{"title":"jade-在express下调用","date":"2016-09-10T16:00:00.000Z","_content":"\n# 在express 下调用\n\n```\napp.set('view engine', 'jade'); // 设置模板引擎\napp.set('views', __dirname);  // 设置模板相对路径(相对当前目录)\n\napp.get('/', function(req, res) {\n    res.render('test'); // 调用当前路径下的 test.jade 模板\n})\n\n```\n","source":"_posts/express/jade-在express下调用.md","raw":"---\ntitle: jade-在express下调用\ndate: 2016-09-11\ncategories: \n- express\n---\n\n# 在express 下调用\n\n```\napp.set('view engine', 'jade'); // 设置模板引擎\napp.set('views', __dirname);  // 设置模板相对路径(相对当前目录)\n\napp.get('/', function(req, res) {\n    res.render('test'); // 调用当前路径下的 test.jade 模板\n})\n\n```\n","slug":"express/jade-在express下调用","published":1,"updated":"2017-02-06T01:40:45.000Z","_id":"ciytfmesh001ps10ojtjft1kt","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"在express-下调用\"><a href=\"#在express-下调用\" class=\"headerlink\" title=\"在express 下调用\"></a>在express 下调用</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.set(&apos;view engine&apos;, &apos;jade&apos;); // 设置模板引擎</div><div class=\"line\">app.set(&apos;views&apos;, __dirname);  // 设置模板相对路径(相对当前目录)</div><div class=\"line\"></div><div class=\"line\">app.get(&apos;/&apos;, function(req, res) &#123;</div><div class=\"line\">    res.render(&apos;test&apos;); // 调用当前路径下的 test.jade 模板</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"在express-下调用\"><a href=\"#在express-下调用\" class=\"headerlink\" title=\"在express 下调用\"></a>在express 下调用</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.set(&apos;view engine&apos;, &apos;jade&apos;); // 设置模板引擎</div><div class=\"line\">app.set(&apos;views&apos;, __dirname);  // 设置模板相对路径(相对当前目录)</div><div class=\"line\"></div><div class=\"line\">app.get(&apos;/&apos;, function(req, res) &#123;</div><div class=\"line\">    res.render(&apos;test&apos;); // 调用当前路径下的 test.jade 模板</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n"},{"title":"jade-语法格式","date":"2016-09-10T16:00:00.000Z","_content":"\n# 相同\n\n```\np\n  | foo bar baz\n  | rawr rawr\n``` \n\n```\np.\n  foo bar baz\n  rawr rawr\n``` \n \n# 变量\n\n```\n#{表达式} -->任何地方\n=表达式 -->值\n!=表达式\n\n- var s = 'hello world' // 在服务端空间中定义变量\np #{s}\np= s\n```\n\n# 404页面\n```\n                var error = #{error}\n\n                if (error)\n                    p  #{error}\n                else\n                    h1 你想干嘛       -- 404 页面.\n                    \n```\n                    error = Error: Not Found\n                    Error: Not Found\n\n\n                    \n                    \n","source":"_posts/express/jade-语法格式.md","raw":"---\ntitle: jade-语法格式\ndate: 2016-09-11\ncategories: \n- express\n---\n\n# 相同\n\n```\np\n  | foo bar baz\n  | rawr rawr\n``` \n\n```\np.\n  foo bar baz\n  rawr rawr\n``` \n \n# 变量\n\n```\n#{表达式} -->任何地方\n=表达式 -->值\n!=表达式\n\n- var s = 'hello world' // 在服务端空间中定义变量\np #{s}\np= s\n```\n\n# 404页面\n```\n                var error = #{error}\n\n                if (error)\n                    p  #{error}\n                else\n                    h1 你想干嘛       -- 404 页面.\n                    \n```\n                    error = Error: Not Found\n                    Error: Not Found\n\n\n                    \n                    \n","slug":"express/jade-语法格式","published":1,"updated":"2017-02-06T01:40:59.000Z","_id":"ciytfmesq001rs10ovjjfjscs","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"相同\"><a href=\"#相同\" class=\"headerlink\" title=\"相同\"></a>相同</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">p</div><div class=\"line\">  | foo bar baz</div><div class=\"line\">  | rawr rawr</div><div class=\"line\">```</div></pre></td></tr></table></figure>\n<p>p.<br>  foo bar baz<br>  rawr rawr<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div><div class=\"line\"># 变量</div></pre></td></tr></table></figure></p>\n<p>#{表达式} –&gt;任何地方<br>=表达式 –&gt;值<br>!=表达式</p>\n<ul>\n<li><p>var s = ‘hello world’ // 在服务端空间中定义变量<br>p #{s}<br>p= s</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"># 404页面</div></pre></td></tr></table></figure>\n<pre><code>var error = #{error}\n\nif (error)\n    p  #{error}\nelse\n    h1 你想干嘛       -- 404 页面.\n</code></pre></li>\n</ul>\n<p>```<br>                    error = Error: Not Found<br>                    Error: Not Found</p>\n","excerpt":"","more":"<h1 id=\"相同\"><a href=\"#相同\" class=\"headerlink\" title=\"相同\"></a>相同</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">p</div><div class=\"line\">  | foo bar baz</div><div class=\"line\">  | rawr rawr</div><div class=\"line\">```</div></pre></td></tr></table></figure>\n<p>p.<br>  foo bar baz<br>  rawr rawr<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div><div class=\"line\"># 变量</div></pre></td></tr></table></figure></p>\n<p>#{表达式} –&gt;任何地方<br>=表达式 –&gt;值<br>!=表达式</p>\n<ul>\n<li><p>var s = ‘hello world’ // 在服务端空间中定义变量<br>p #{s}<br>p= s</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"># 404页面</div></pre></td></tr></table></figure>\n<pre><code>var error = #{error}\n\nif (error)\n    p  #{error}\nelse\n    h1 你想干嘛       -- 404 页面.\n</code></pre></li>\n</ul>\n<p>```<br>                    error = Error: Not Found<br>                    Error: Not Found</p>\n"},{"title":"docker-技术入门与实战-笔记","date":"2016-09-10T16:00:00.000Z","_content":"\n> 开源图书<<docker 技术入门与实战>>传送门\n\n```\nhttps://yeasy.gitbooks.io/docker_practice/content/\n```\n\n> 有何作用 : 用了 Docker 技术后，直接把项目源代码和所有关联的软件、库等等全部打包成一个镜像，只要对方的机器里也安装了 Docker，直接把这个镜像放到容器里就行了，完全不用操心版本不匹配、依赖不全的问题。\n\n\n![对比传统虚拟机总结](http://upload-images.jianshu.io/upload_images/80378-a1785897e3d0b4b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n","source":"_posts/docker/docker-技术入门与实战-笔记.md","raw":"---\ntitle: docker-技术入门与实战-笔记\ndate: 2016-09-11\ncategories: \n- docker\n---\n\n> 开源图书<<docker 技术入门与实战>>传送门\n\n```\nhttps://yeasy.gitbooks.io/docker_practice/content/\n```\n\n> 有何作用 : 用了 Docker 技术后，直接把项目源代码和所有关联的软件、库等等全部打包成一个镜像，只要对方的机器里也安装了 Docker，直接把这个镜像放到容器里就行了，完全不用操心版本不匹配、依赖不全的问题。\n\n\n![对比传统虚拟机总结](http://upload-images.jianshu.io/upload_images/80378-a1785897e3d0b4b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n","slug":"docker/docker-技术入门与实战-笔记","published":1,"updated":"2017-02-06T01:39:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciytfmhe1001ts10ox9bu17ve","content":"<blockquote>\n<p>开源图书&lt;<docker 技术入门与实战=\"\">&gt;传送门</docker></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://yeasy.gitbooks.io/docker_practice/content/</div></pre></td></tr></table></figure>\n<blockquote>\n<p>有何作用 : 用了 Docker 技术后，直接把项目源代码和所有关联的软件、库等等全部打包成一个镜像，只要对方的机器里也安装了 Docker，直接把这个镜像放到容器里就行了，完全不用操心版本不匹配、依赖不全的问题。</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-a1785897e3d0b4b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"对比传统虚拟机总结\"></p>\n","excerpt":"","more":"<blockquote>\n<p>开源图书&lt;<docker 技术入门与实战>&gt;传送门</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://yeasy.gitbooks.io/docker_practice/content/</div></pre></td></tr></table></figure>\n<blockquote>\n<p>有何作用 : 用了 Docker 技术后，直接把项目源代码和所有关联的软件、库等等全部打包成一个镜像，只要对方的机器里也安装了 Docker，直接把这个镜像放到容器里就行了，完全不用操心版本不匹配、依赖不全的问题。</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-a1785897e3d0b4b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"对比传统虚拟机总结\"></p>\n"},{"title":"apache-common-浅尝实操","date":"2016-09-10T16:00:00.000Z","_content":"\n\n> 嘿嘿嘿,工作需要,又做回Java开发了...于是想熟悉一下常用的开发包...apache common 系列的包便是首选..\n\n> 以下是有必要需要了解的开发包--https://commons.apache.org/\n> 学习一些比较常用...一直有更新的包...\n> 对自己而言,如果没有时间看源码,至少也得会有,或者有一定的了解,你说,是吧\n\n```\n\n//以下是更新至2014\n[BeanUtils](https://commons.apache.org/proper/commons-beanutils/)\n这个名字看起来很熟,那就先从这个开始咯...\n\n[Codec](https://commons.apache.org/proper/commons-codec/)\n\n[DbUtils](https://commons.apache.org/proper/commons-dbutils/)\n\n[Exec](https://commons.apache.org/proper/commons-exec/)\n\n[Logging](https://commons.apache.org/proper/commons-logging/)\n\n\n//以下更新至2015\n[Pool](https://commons.apache.org/proper/commons-pool/)\n\n[Math](https://commons.apache.org/proper/commons-math/)\n\n[Lang](https://commons.apache.org/proper/commons-lang/)\n\n[Jexl](https://commons.apache.org/proper/commons-jexl/)\n\n[Email](https://commons.apache.org/proper/commons-email/)\n\n[DBCP](https://commons.apache.org/proper/commons-dbcp/)\n\n[Collections](https://commons.apache.org/proper/commons-collections/)\n\n[CLI](https://commons.apache.org/proper/commons-cli/)\n\n//以下更新至2016\n[BCEL](https://commons.apache.org/proper/commons-bcel/)\n\n[Compress](https://commons.apache.org/proper/commons-compress/)\n\n[Configuration](https://commons.apache.org/proper/commons-configuration/)\n\n[Crypto](https://commons.apache.org/proper/commons-crypto/)\n\n[CSV](https://commons.apache.org/proper/commons-csv/)\n\n[FileUpload](https://commons.apache.org/proper/commons-fileupload/)\n\n[IO](https://commons.apache.org/proper/commons-io/)\n\n[Net](https://commons.apache.org/proper/commons-net/)\n\n[Validator](https://commons.apache.org/proper/commons-validator/)\n\n[Validator](https://commons.apache.org/proper/commons-validator/)\n\n[Weaver](https://commons.apache.org/proper/commons-weaver/)\n\n```\n","source":"_posts/apache-common/apache-common-浅尝实操.md","raw":"---\ntitle: apache-common-浅尝实操\ndate: 2016-09-11\ncategories: \n- apache-common\n- java\n---\n\n\n> 嘿嘿嘿,工作需要,又做回Java开发了...于是想熟悉一下常用的开发包...apache common 系列的包便是首选..\n\n> 以下是有必要需要了解的开发包--https://commons.apache.org/\n> 学习一些比较常用...一直有更新的包...\n> 对自己而言,如果没有时间看源码,至少也得会有,或者有一定的了解,你说,是吧\n\n```\n\n//以下是更新至2014\n[BeanUtils](https://commons.apache.org/proper/commons-beanutils/)\n这个名字看起来很熟,那就先从这个开始咯...\n\n[Codec](https://commons.apache.org/proper/commons-codec/)\n\n[DbUtils](https://commons.apache.org/proper/commons-dbutils/)\n\n[Exec](https://commons.apache.org/proper/commons-exec/)\n\n[Logging](https://commons.apache.org/proper/commons-logging/)\n\n\n//以下更新至2015\n[Pool](https://commons.apache.org/proper/commons-pool/)\n\n[Math](https://commons.apache.org/proper/commons-math/)\n\n[Lang](https://commons.apache.org/proper/commons-lang/)\n\n[Jexl](https://commons.apache.org/proper/commons-jexl/)\n\n[Email](https://commons.apache.org/proper/commons-email/)\n\n[DBCP](https://commons.apache.org/proper/commons-dbcp/)\n\n[Collections](https://commons.apache.org/proper/commons-collections/)\n\n[CLI](https://commons.apache.org/proper/commons-cli/)\n\n//以下更新至2016\n[BCEL](https://commons.apache.org/proper/commons-bcel/)\n\n[Compress](https://commons.apache.org/proper/commons-compress/)\n\n[Configuration](https://commons.apache.org/proper/commons-configuration/)\n\n[Crypto](https://commons.apache.org/proper/commons-crypto/)\n\n[CSV](https://commons.apache.org/proper/commons-csv/)\n\n[FileUpload](https://commons.apache.org/proper/commons-fileupload/)\n\n[IO](https://commons.apache.org/proper/commons-io/)\n\n[Net](https://commons.apache.org/proper/commons-net/)\n\n[Validator](https://commons.apache.org/proper/commons-validator/)\n\n[Validator](https://commons.apache.org/proper/commons-validator/)\n\n[Weaver](https://commons.apache.org/proper/commons-weaver/)\n\n```\n","slug":"apache-common/apache-common-浅尝实操","published":1,"updated":"2017-02-06T01:38:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciytfmk7n001vs10otiuk9iwd","content":"<blockquote>\n<p>嘿嘿嘿,工作需要,又做回Java开发了…于是想熟悉一下常用的开发包…apache common 系列的包便是首选..</p>\n<p>以下是有必要需要了解的开发包–<a href=\"https://commons.apache.org/\" target=\"_blank\" rel=\"external\">https://commons.apache.org/</a><br>学习一些比较常用…一直有更新的包…<br>对自己而言,如果没有时间看源码,至少也得会有,或者有一定的了解,你说,是吧</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">//以下是更新至2014</div><div class=\"line\">[BeanUtils](https://commons.apache.org/proper/commons-beanutils/)</div><div class=\"line\">这个名字看起来很熟,那就先从这个开始咯...</div><div class=\"line\"></div><div class=\"line\">[Codec](https://commons.apache.org/proper/commons-codec/)</div><div class=\"line\"></div><div class=\"line\">[DbUtils](https://commons.apache.org/proper/commons-dbutils/)</div><div class=\"line\"></div><div class=\"line\">[Exec](https://commons.apache.org/proper/commons-exec/)</div><div class=\"line\"></div><div class=\"line\">[Logging](https://commons.apache.org/proper/commons-logging/)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//以下更新至2015</div><div class=\"line\">[Pool](https://commons.apache.org/proper/commons-pool/)</div><div class=\"line\"></div><div class=\"line\">[Math](https://commons.apache.org/proper/commons-math/)</div><div class=\"line\"></div><div class=\"line\">[Lang](https://commons.apache.org/proper/commons-lang/)</div><div class=\"line\"></div><div class=\"line\">[Jexl](https://commons.apache.org/proper/commons-jexl/)</div><div class=\"line\"></div><div class=\"line\">[Email](https://commons.apache.org/proper/commons-email/)</div><div class=\"line\"></div><div class=\"line\">[DBCP](https://commons.apache.org/proper/commons-dbcp/)</div><div class=\"line\"></div><div class=\"line\">[Collections](https://commons.apache.org/proper/commons-collections/)</div><div class=\"line\"></div><div class=\"line\">[CLI](https://commons.apache.org/proper/commons-cli/)</div><div class=\"line\"></div><div class=\"line\">//以下更新至2016</div><div class=\"line\">[BCEL](https://commons.apache.org/proper/commons-bcel/)</div><div class=\"line\"></div><div class=\"line\">[Compress](https://commons.apache.org/proper/commons-compress/)</div><div class=\"line\"></div><div class=\"line\">[Configuration](https://commons.apache.org/proper/commons-configuration/)</div><div class=\"line\"></div><div class=\"line\">[Crypto](https://commons.apache.org/proper/commons-crypto/)</div><div class=\"line\"></div><div class=\"line\">[CSV](https://commons.apache.org/proper/commons-csv/)</div><div class=\"line\"></div><div class=\"line\">[FileUpload](https://commons.apache.org/proper/commons-fileupload/)</div><div class=\"line\"></div><div class=\"line\">[IO](https://commons.apache.org/proper/commons-io/)</div><div class=\"line\"></div><div class=\"line\">[Net](https://commons.apache.org/proper/commons-net/)</div><div class=\"line\"></div><div class=\"line\">[Validator](https://commons.apache.org/proper/commons-validator/)</div><div class=\"line\"></div><div class=\"line\">[Validator](https://commons.apache.org/proper/commons-validator/)</div><div class=\"line\"></div><div class=\"line\">[Weaver](https://commons.apache.org/proper/commons-weaver/)</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>嘿嘿嘿,工作需要,又做回Java开发了…于是想熟悉一下常用的开发包…apache common 系列的包便是首选..</p>\n<p>以下是有必要需要了解的开发包–<a href=\"https://commons.apache.org/\">https://commons.apache.org/</a><br>学习一些比较常用…一直有更新的包…<br>对自己而言,如果没有时间看源码,至少也得会有,或者有一定的了解,你说,是吧</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">//以下是更新至2014</div><div class=\"line\">[BeanUtils](https://commons.apache.org/proper/commons-beanutils/)</div><div class=\"line\">这个名字看起来很熟,那就先从这个开始咯...</div><div class=\"line\"></div><div class=\"line\">[Codec](https://commons.apache.org/proper/commons-codec/)</div><div class=\"line\"></div><div class=\"line\">[DbUtils](https://commons.apache.org/proper/commons-dbutils/)</div><div class=\"line\"></div><div class=\"line\">[Exec](https://commons.apache.org/proper/commons-exec/)</div><div class=\"line\"></div><div class=\"line\">[Logging](https://commons.apache.org/proper/commons-logging/)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//以下更新至2015</div><div class=\"line\">[Pool](https://commons.apache.org/proper/commons-pool/)</div><div class=\"line\"></div><div class=\"line\">[Math](https://commons.apache.org/proper/commons-math/)</div><div class=\"line\"></div><div class=\"line\">[Lang](https://commons.apache.org/proper/commons-lang/)</div><div class=\"line\"></div><div class=\"line\">[Jexl](https://commons.apache.org/proper/commons-jexl/)</div><div class=\"line\"></div><div class=\"line\">[Email](https://commons.apache.org/proper/commons-email/)</div><div class=\"line\"></div><div class=\"line\">[DBCP](https://commons.apache.org/proper/commons-dbcp/)</div><div class=\"line\"></div><div class=\"line\">[Collections](https://commons.apache.org/proper/commons-collections/)</div><div class=\"line\"></div><div class=\"line\">[CLI](https://commons.apache.org/proper/commons-cli/)</div><div class=\"line\"></div><div class=\"line\">//以下更新至2016</div><div class=\"line\">[BCEL](https://commons.apache.org/proper/commons-bcel/)</div><div class=\"line\"></div><div class=\"line\">[Compress](https://commons.apache.org/proper/commons-compress/)</div><div class=\"line\"></div><div class=\"line\">[Configuration](https://commons.apache.org/proper/commons-configuration/)</div><div class=\"line\"></div><div class=\"line\">[Crypto](https://commons.apache.org/proper/commons-crypto/)</div><div class=\"line\"></div><div class=\"line\">[CSV](https://commons.apache.org/proper/commons-csv/)</div><div class=\"line\"></div><div class=\"line\">[FileUpload](https://commons.apache.org/proper/commons-fileupload/)</div><div class=\"line\"></div><div class=\"line\">[IO](https://commons.apache.org/proper/commons-io/)</div><div class=\"line\"></div><div class=\"line\">[Net](https://commons.apache.org/proper/commons-net/)</div><div class=\"line\"></div><div class=\"line\">[Validator](https://commons.apache.org/proper/commons-validator/)</div><div class=\"line\"></div><div class=\"line\">[Validator](https://commons.apache.org/proper/commons-validator/)</div><div class=\"line\"></div><div class=\"line\">[Weaver](https://commons.apache.org/proper/commons-weaver/)</div></pre></td></tr></table></figure>\n"},{"title":"java-common-Lang-CharSetUtils","date":"2016-09-10T16:00:00.000Z","_content":"\n\n> 常用函数如下:\n\n```\n\nstatic boolean\tcontainsAny(String str, String... set)\n接受一个参数集语法,看到evaluateSet, 并确定是否有任何的角色出现在指定的字符串中。\nstatic int\tcount(String str, String... set)\n接受一个参数集语法,看到evaluateSet, 并返回指定数量的字符出现在字符串。\nstatic String\tdelete(String str, String... set)\n接受一个参数集语法,看到evaluateSet, 和删除任何的字符出现在指定的字符串。\nstatic String\tkeep(String str, String... set)\n接受一个参数集语法,看到evaluateSet, 并保持任何的字符出现在指定的字符串。\nstatic String\tsqueeze(String str, String... set)\n根据参数二set提供的字母序列,删除重复的字符\n\n```\n\n\n> 测试用例\n\n```\n\n/**\n * 文 件 名: TestCharSetUtils\n * 创 建 人: xudaolong\n * 创建日期: 16/7/23 14:09\n * 邮   箱: xudaolong@vip.qq.com\n * 博   客: http://xudaolong.github.io/\n * 修改时间：\n * 修改备注：\n */\npublic class TestCharSetUtils {\n\n    public static Logger log = Logger.getLogger(TestCharSetUtils.class);\n\n    @Test\n    public void TestCharSet() {\n        String memo = \"xudaollong\";\n        /**\n         * 好像都是些过滤的作用而已\n         */\n        //是否包含指定的字母列\n        log.info(CharSetUtils.containsAny(memo, \"a-v\"));\n        //删除指定的字母列\n        log.info(CharSetUtils.delete(memo,\"a-c\"));\n        //仅保留指定字母列\n        log.info(CharSetUtils.keep(memo,\"c-z\"));\n        //删除重复值\n        log.info(CharSetUtils.squeeze(memo, \"l\"));\n        //计算指定字母数\n        log.info(CharSetUtils.count(memo, \"l\"));\n    }\n\n\n}\n\n```\n\n\n> 结果\n\n```\n\n2016-07-23 14:41:34 [INFO] true [main] com.xudalong.CharSetUtils.TestCharSetUtils [com.xudalong.CharSetUtils.TestCharSetUtils.TestCharSet(TestCharSetUtils.java:27)]\n2016-07-23 14:41:34 [INFO] xudollong [main] com.xudalong.CharSetUtils.TestCharSetUtils [com.xudalong.CharSetUtils.TestCharSetUtils.TestCharSet(TestCharSetUtils.java:29)]\n2016-07-23 14:41:34 [INFO] xudollong [main] com.xudalong.CharSetUtils.TestCharSetUtils [com.xudalong.CharSetUtils.TestCharSetUtils.TestCharSet(TestCharSetUtils.java:31)]\n2016-07-23 14:41:34 [INFO] xudaolong [main] com.xudalong.CharSetUtils.TestCharSetUtils [com.xudalong.CharSetUtils.TestCharSetUtils.TestCharSet(TestCharSetUtils.java:33)]\n2016-07-23 14:41:34 [INFO] 2 [main] com.xudalong.CharSetUtils.TestCharSetUtils [com.xudalong.CharSetUtils.TestCharSetUtils.TestCharSet(TestCharSetUtils.java:35)]\n\n```\n","source":"_posts/apache-common/java-common-Lang-CharSetUtils.md","raw":"---\ntitle: java-common-Lang-CharSetUtils\ndate: 2016-09-11\ncategories: \n- apache-common\n- java\n---\n\n\n> 常用函数如下:\n\n```\n\nstatic boolean\tcontainsAny(String str, String... set)\n接受一个参数集语法,看到evaluateSet, 并确定是否有任何的角色出现在指定的字符串中。\nstatic int\tcount(String str, String... set)\n接受一个参数集语法,看到evaluateSet, 并返回指定数量的字符出现在字符串。\nstatic String\tdelete(String str, String... set)\n接受一个参数集语法,看到evaluateSet, 和删除任何的字符出现在指定的字符串。\nstatic String\tkeep(String str, String... set)\n接受一个参数集语法,看到evaluateSet, 并保持任何的字符出现在指定的字符串。\nstatic String\tsqueeze(String str, String... set)\n根据参数二set提供的字母序列,删除重复的字符\n\n```\n\n\n> 测试用例\n\n```\n\n/**\n * 文 件 名: TestCharSetUtils\n * 创 建 人: xudaolong\n * 创建日期: 16/7/23 14:09\n * 邮   箱: xudaolong@vip.qq.com\n * 博   客: http://xudaolong.github.io/\n * 修改时间：\n * 修改备注：\n */\npublic class TestCharSetUtils {\n\n    public static Logger log = Logger.getLogger(TestCharSetUtils.class);\n\n    @Test\n    public void TestCharSet() {\n        String memo = \"xudaollong\";\n        /**\n         * 好像都是些过滤的作用而已\n         */\n        //是否包含指定的字母列\n        log.info(CharSetUtils.containsAny(memo, \"a-v\"));\n        //删除指定的字母列\n        log.info(CharSetUtils.delete(memo,\"a-c\"));\n        //仅保留指定字母列\n        log.info(CharSetUtils.keep(memo,\"c-z\"));\n        //删除重复值\n        log.info(CharSetUtils.squeeze(memo, \"l\"));\n        //计算指定字母数\n        log.info(CharSetUtils.count(memo, \"l\"));\n    }\n\n\n}\n\n```\n\n\n> 结果\n\n```\n\n2016-07-23 14:41:34 [INFO] true [main] com.xudalong.CharSetUtils.TestCharSetUtils [com.xudalong.CharSetUtils.TestCharSetUtils.TestCharSet(TestCharSetUtils.java:27)]\n2016-07-23 14:41:34 [INFO] xudollong [main] com.xudalong.CharSetUtils.TestCharSetUtils [com.xudalong.CharSetUtils.TestCharSetUtils.TestCharSet(TestCharSetUtils.java:29)]\n2016-07-23 14:41:34 [INFO] xudollong [main] com.xudalong.CharSetUtils.TestCharSetUtils [com.xudalong.CharSetUtils.TestCharSetUtils.TestCharSet(TestCharSetUtils.java:31)]\n2016-07-23 14:41:34 [INFO] xudaolong [main] com.xudalong.CharSetUtils.TestCharSetUtils [com.xudalong.CharSetUtils.TestCharSetUtils.TestCharSet(TestCharSetUtils.java:33)]\n2016-07-23 14:41:34 [INFO] 2 [main] com.xudalong.CharSetUtils.TestCharSetUtils [com.xudalong.CharSetUtils.TestCharSetUtils.TestCharSet(TestCharSetUtils.java:35)]\n\n```\n","slug":"apache-common/java-common-Lang-CharSetUtils","published":1,"updated":"2017-02-06T01:38:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciytfmk7q001ws10ondz24d19","content":"<blockquote>\n<p>常用函数如下:</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">static boolean\tcontainsAny(String str, String... set)</div><div class=\"line\">接受一个参数集语法,看到evaluateSet, 并确定是否有任何的角色出现在指定的字符串中。</div><div class=\"line\">static int\tcount(String str, String... set)</div><div class=\"line\">接受一个参数集语法,看到evaluateSet, 并返回指定数量的字符出现在字符串。</div><div class=\"line\">static String\tdelete(String str, String... set)</div><div class=\"line\">接受一个参数集语法,看到evaluateSet, 和删除任何的字符出现在指定的字符串。</div><div class=\"line\">static String\tkeep(String str, String... set)</div><div class=\"line\">接受一个参数集语法,看到evaluateSet, 并保持任何的字符出现在指定的字符串。</div><div class=\"line\">static String\tsqueeze(String str, String... set)</div><div class=\"line\">根据参数二set提供的字母序列,删除重复的字符</div></pre></td></tr></table></figure>\n<blockquote>\n<p>测试用例</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 文 件 名: TestCharSetUtils</div><div class=\"line\"> * 创 建 人: xudaolong</div><div class=\"line\"> * 创建日期: 16/7/23 14:09</div><div class=\"line\"> * 邮   箱: xudaolong@vip.qq.com</div><div class=\"line\"> * 博   客: http://xudaolong.github.io/</div><div class=\"line\"> * 修改时间：</div><div class=\"line\"> * 修改备注：</div><div class=\"line\"> */</div><div class=\"line\">public class TestCharSetUtils &#123;</div><div class=\"line\"></div><div class=\"line\">    public static Logger log = Logger.getLogger(TestCharSetUtils.class);</div><div class=\"line\"></div><div class=\"line\">    @Test</div><div class=\"line\">    public void TestCharSet() &#123;</div><div class=\"line\">        String memo = &quot;xudaollong&quot;;</div><div class=\"line\">        /**</div><div class=\"line\">         * 好像都是些过滤的作用而已</div><div class=\"line\">         */</div><div class=\"line\">        //是否包含指定的字母列</div><div class=\"line\">        log.info(CharSetUtils.containsAny(memo, &quot;a-v&quot;));</div><div class=\"line\">        //删除指定的字母列</div><div class=\"line\">        log.info(CharSetUtils.delete(memo,&quot;a-c&quot;));</div><div class=\"line\">        //仅保留指定字母列</div><div class=\"line\">        log.info(CharSetUtils.keep(memo,&quot;c-z&quot;));</div><div class=\"line\">        //删除重复值</div><div class=\"line\">        log.info(CharSetUtils.squeeze(memo, &quot;l&quot;));</div><div class=\"line\">        //计算指定字母数</div><div class=\"line\">        log.info(CharSetUtils.count(memo, &quot;l&quot;));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>结果</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">2016-07-23 14:41:34 [INFO] true [main] com.xudalong.CharSetUtils.TestCharSetUtils [com.xudalong.CharSetUtils.TestCharSetUtils.TestCharSet(TestCharSetUtils.java:27)]</div><div class=\"line\">2016-07-23 14:41:34 [INFO] xudollong [main] com.xudalong.CharSetUtils.TestCharSetUtils [com.xudalong.CharSetUtils.TestCharSetUtils.TestCharSet(TestCharSetUtils.java:29)]</div><div class=\"line\">2016-07-23 14:41:34 [INFO] xudollong [main] com.xudalong.CharSetUtils.TestCharSetUtils [com.xudalong.CharSetUtils.TestCharSetUtils.TestCharSet(TestCharSetUtils.java:31)]</div><div class=\"line\">2016-07-23 14:41:34 [INFO] xudaolong [main] com.xudalong.CharSetUtils.TestCharSetUtils [com.xudalong.CharSetUtils.TestCharSetUtils.TestCharSet(TestCharSetUtils.java:33)]</div><div class=\"line\">2016-07-23 14:41:34 [INFO] 2 [main] com.xudalong.CharSetUtils.TestCharSetUtils [com.xudalong.CharSetUtils.TestCharSetUtils.TestCharSet(TestCharSetUtils.java:35)]</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>常用函数如下:</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">static boolean\tcontainsAny(String str, String... set)</div><div class=\"line\">接受一个参数集语法,看到evaluateSet, 并确定是否有任何的角色出现在指定的字符串中。</div><div class=\"line\">static int\tcount(String str, String... set)</div><div class=\"line\">接受一个参数集语法,看到evaluateSet, 并返回指定数量的字符出现在字符串。</div><div class=\"line\">static String\tdelete(String str, String... set)</div><div class=\"line\">接受一个参数集语法,看到evaluateSet, 和删除任何的字符出现在指定的字符串。</div><div class=\"line\">static String\tkeep(String str, String... set)</div><div class=\"line\">接受一个参数集语法,看到evaluateSet, 并保持任何的字符出现在指定的字符串。</div><div class=\"line\">static String\tsqueeze(String str, String... set)</div><div class=\"line\">根据参数二set提供的字母序列,删除重复的字符</div></pre></td></tr></table></figure>\n<blockquote>\n<p>测试用例</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 文 件 名: TestCharSetUtils</div><div class=\"line\"> * 创 建 人: xudaolong</div><div class=\"line\"> * 创建日期: 16/7/23 14:09</div><div class=\"line\"> * 邮   箱: xudaolong@vip.qq.com</div><div class=\"line\"> * 博   客: http://xudaolong.github.io/</div><div class=\"line\"> * 修改时间：</div><div class=\"line\"> * 修改备注：</div><div class=\"line\"> */</div><div class=\"line\">public class TestCharSetUtils &#123;</div><div class=\"line\"></div><div class=\"line\">    public static Logger log = Logger.getLogger(TestCharSetUtils.class);</div><div class=\"line\"></div><div class=\"line\">    @Test</div><div class=\"line\">    public void TestCharSet() &#123;</div><div class=\"line\">        String memo = &quot;xudaollong&quot;;</div><div class=\"line\">        /**</div><div class=\"line\">         * 好像都是些过滤的作用而已</div><div class=\"line\">         */</div><div class=\"line\">        //是否包含指定的字母列</div><div class=\"line\">        log.info(CharSetUtils.containsAny(memo, &quot;a-v&quot;));</div><div class=\"line\">        //删除指定的字母列</div><div class=\"line\">        log.info(CharSetUtils.delete(memo,&quot;a-c&quot;));</div><div class=\"line\">        //仅保留指定字母列</div><div class=\"line\">        log.info(CharSetUtils.keep(memo,&quot;c-z&quot;));</div><div class=\"line\">        //删除重复值</div><div class=\"line\">        log.info(CharSetUtils.squeeze(memo, &quot;l&quot;));</div><div class=\"line\">        //计算指定字母数</div><div class=\"line\">        log.info(CharSetUtils.count(memo, &quot;l&quot;));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>结果</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">2016-07-23 14:41:34 [INFO] true [main] com.xudalong.CharSetUtils.TestCharSetUtils [com.xudalong.CharSetUtils.TestCharSetUtils.TestCharSet(TestCharSetUtils.java:27)]</div><div class=\"line\">2016-07-23 14:41:34 [INFO] xudollong [main] com.xudalong.CharSetUtils.TestCharSetUtils [com.xudalong.CharSetUtils.TestCharSetUtils.TestCharSet(TestCharSetUtils.java:29)]</div><div class=\"line\">2016-07-23 14:41:34 [INFO] xudollong [main] com.xudalong.CharSetUtils.TestCharSetUtils [com.xudalong.CharSetUtils.TestCharSetUtils.TestCharSet(TestCharSetUtils.java:31)]</div><div class=\"line\">2016-07-23 14:41:34 [INFO] xudaolong [main] com.xudalong.CharSetUtils.TestCharSetUtils [com.xudalong.CharSetUtils.TestCharSetUtils.TestCharSet(TestCharSetUtils.java:33)]</div><div class=\"line\">2016-07-23 14:41:34 [INFO] 2 [main] com.xudalong.CharSetUtils.TestCharSetUtils [com.xudalong.CharSetUtils.TestCharSetUtils.TestCharSet(TestCharSetUtils.java:35)]</div></pre></td></tr></table></figure>\n"},{"title":"java-common-Lang-StringUtils","date":"2016-09-10T16:00:00.000Z","_content":"\n\n> 概述介绍基本的功能\n\n```\n\nIsEmpty/IsBlank(可含有whitespace) - 是否包含文本\nTrim/Strip(中间空的保留) - 删除前后空格\nEquals/Compare - 比较两个字符串\nstartsWith - 是否以某字符串开始\nendsWith - 是否以某字符串结束\nIndexOf/LastIndexOf/Contains - 空字符串检测\nIndexOfAny/LastIndexOfAny/IndexOfAnyBut/LastIndexOfAnyBut - 是否包含哪些字符串\nContainsOnly/ContainsNone/ContainsAny - 字符是否仅包含/不含有/任何这些字符串\nSubstring/Left/Right/Mid - 截取字符串\nSubstringBefore/SubstringAfter/SubstringBetween - 提取相对其他字符串\nSplit/Join - 分割/组合成数组\nRemove/Delete - 删除部分字符串\nReplace/Overlay - 搜索/替换字符串\nChomp/Chop - 删除最后的字符串\nAppendIfMissing - 保持固定后缀\nPrependIfMissing - 保持固定前缀\nLeftPad/RightPad/Center/Repeat - 左/右/中/重复/地填充\nUpperCase/LowerCase/SwapCase/Capitalize/Uncapitalize - 改变字符串的大小写\nCountMatches - 计算此字符串在另外一个字符串出现的次数\nIsAlpha/IsNumeric/IsWhitespace/IsAsciiPrintable - 检查字符串的类型\nDefaultString - 防止输入空值而设定默认值\nRotate - 旋转字符串\nReverse/ReverseDelimited - 逆转一个字符串\nAbbreviate - 将字符串省略化\nDifference - 字符串间的区别\nLevenshteinDistance - 两个字符串的具体值差距\n\n\n```\n\n> 除去上面那个比较常见的函数外,还有一些高级的...\n\n> Empty : null 、 \"\"\n\n> Blank : whitespace 、 null 、 \"\"\n\n```\n\nisNotEmpty/isNotBlank : 确保不为空\n\nisAnyEmpty/isAnyBlank : 是否包含一个空字符串\n\nisNoneEmpty/isNoneBlank : 确保全部是有效值\n\ntrimToNull/stripToNull : Blank元素转成 null\n\ntrimToEmpty/stripToEmpty : Blank元素转成 \"\" \n\ntruncate : 按前到后截断\n\nstripAll : 处理多个字符串\n\nstripAccents : 去除音标\n\nequalsIgnoreCase : 忽略大小比较\n\n\n\n```\n","source":"_posts/apache-common/java-common-Lang-StringUtils.md","raw":"---\ntitle: java-common-Lang-StringUtils\ndate: 2016-09-11\ncategories: \n- apache-common\n- java\n---\n\n\n> 概述介绍基本的功能\n\n```\n\nIsEmpty/IsBlank(可含有whitespace) - 是否包含文本\nTrim/Strip(中间空的保留) - 删除前后空格\nEquals/Compare - 比较两个字符串\nstartsWith - 是否以某字符串开始\nendsWith - 是否以某字符串结束\nIndexOf/LastIndexOf/Contains - 空字符串检测\nIndexOfAny/LastIndexOfAny/IndexOfAnyBut/LastIndexOfAnyBut - 是否包含哪些字符串\nContainsOnly/ContainsNone/ContainsAny - 字符是否仅包含/不含有/任何这些字符串\nSubstring/Left/Right/Mid - 截取字符串\nSubstringBefore/SubstringAfter/SubstringBetween - 提取相对其他字符串\nSplit/Join - 分割/组合成数组\nRemove/Delete - 删除部分字符串\nReplace/Overlay - 搜索/替换字符串\nChomp/Chop - 删除最后的字符串\nAppendIfMissing - 保持固定后缀\nPrependIfMissing - 保持固定前缀\nLeftPad/RightPad/Center/Repeat - 左/右/中/重复/地填充\nUpperCase/LowerCase/SwapCase/Capitalize/Uncapitalize - 改变字符串的大小写\nCountMatches - 计算此字符串在另外一个字符串出现的次数\nIsAlpha/IsNumeric/IsWhitespace/IsAsciiPrintable - 检查字符串的类型\nDefaultString - 防止输入空值而设定默认值\nRotate - 旋转字符串\nReverse/ReverseDelimited - 逆转一个字符串\nAbbreviate - 将字符串省略化\nDifference - 字符串间的区别\nLevenshteinDistance - 两个字符串的具体值差距\n\n\n```\n\n> 除去上面那个比较常见的函数外,还有一些高级的...\n\n> Empty : null 、 \"\"\n\n> Blank : whitespace 、 null 、 \"\"\n\n```\n\nisNotEmpty/isNotBlank : 确保不为空\n\nisAnyEmpty/isAnyBlank : 是否包含一个空字符串\n\nisNoneEmpty/isNoneBlank : 确保全部是有效值\n\ntrimToNull/stripToNull : Blank元素转成 null\n\ntrimToEmpty/stripToEmpty : Blank元素转成 \"\" \n\ntruncate : 按前到后截断\n\nstripAll : 处理多个字符串\n\nstripAccents : 去除音标\n\nequalsIgnoreCase : 忽略大小比较\n\n\n\n```\n","slug":"apache-common/java-common-Lang-StringUtils","published":1,"updated":"2017-02-06T01:38:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciytfmk830021s10orp1r7l1f","content":"<blockquote>\n<p>概述介绍基本的功能</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">IsEmpty/IsBlank(可含有whitespace) - 是否包含文本</div><div class=\"line\">Trim/Strip(中间空的保留) - 删除前后空格</div><div class=\"line\">Equals/Compare - 比较两个字符串</div><div class=\"line\">startsWith - 是否以某字符串开始</div><div class=\"line\">endsWith - 是否以某字符串结束</div><div class=\"line\">IndexOf/LastIndexOf/Contains - 空字符串检测</div><div class=\"line\">IndexOfAny/LastIndexOfAny/IndexOfAnyBut/LastIndexOfAnyBut - 是否包含哪些字符串</div><div class=\"line\">ContainsOnly/ContainsNone/ContainsAny - 字符是否仅包含/不含有/任何这些字符串</div><div class=\"line\">Substring/Left/Right/Mid - 截取字符串</div><div class=\"line\">SubstringBefore/SubstringAfter/SubstringBetween - 提取相对其他字符串</div><div class=\"line\">Split/Join - 分割/组合成数组</div><div class=\"line\">Remove/Delete - 删除部分字符串</div><div class=\"line\">Replace/Overlay - 搜索/替换字符串</div><div class=\"line\">Chomp/Chop - 删除最后的字符串</div><div class=\"line\">AppendIfMissing - 保持固定后缀</div><div class=\"line\">PrependIfMissing - 保持固定前缀</div><div class=\"line\">LeftPad/RightPad/Center/Repeat - 左/右/中/重复/地填充</div><div class=\"line\">UpperCase/LowerCase/SwapCase/Capitalize/Uncapitalize - 改变字符串的大小写</div><div class=\"line\">CountMatches - 计算此字符串在另外一个字符串出现的次数</div><div class=\"line\">IsAlpha/IsNumeric/IsWhitespace/IsAsciiPrintable - 检查字符串的类型</div><div class=\"line\">DefaultString - 防止输入空值而设定默认值</div><div class=\"line\">Rotate - 旋转字符串</div><div class=\"line\">Reverse/ReverseDelimited - 逆转一个字符串</div><div class=\"line\">Abbreviate - 将字符串省略化</div><div class=\"line\">Difference - 字符串间的区别</div><div class=\"line\">LevenshteinDistance - 两个字符串的具体值差距</div></pre></td></tr></table></figure>\n<blockquote>\n<p>除去上面那个比较常见的函数外,还有一些高级的…</p>\n<p>Empty : null 、 “”</p>\n<p>Blank : whitespace 、 null 、 “”</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">isNotEmpty/isNotBlank : 确保不为空</div><div class=\"line\"></div><div class=\"line\">isAnyEmpty/isAnyBlank : 是否包含一个空字符串</div><div class=\"line\"></div><div class=\"line\">isNoneEmpty/isNoneBlank : 确保全部是有效值</div><div class=\"line\"></div><div class=\"line\">trimToNull/stripToNull : Blank元素转成 null</div><div class=\"line\"></div><div class=\"line\">trimToEmpty/stripToEmpty : Blank元素转成 &quot;&quot; </div><div class=\"line\"></div><div class=\"line\">truncate : 按前到后截断</div><div class=\"line\"></div><div class=\"line\">stripAll : 处理多个字符串</div><div class=\"line\"></div><div class=\"line\">stripAccents : 去除音标</div><div class=\"line\"></div><div class=\"line\">equalsIgnoreCase : 忽略大小比较</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>概述介绍基本的功能</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">IsEmpty/IsBlank(可含有whitespace) - 是否包含文本</div><div class=\"line\">Trim/Strip(中间空的保留) - 删除前后空格</div><div class=\"line\">Equals/Compare - 比较两个字符串</div><div class=\"line\">startsWith - 是否以某字符串开始</div><div class=\"line\">endsWith - 是否以某字符串结束</div><div class=\"line\">IndexOf/LastIndexOf/Contains - 空字符串检测</div><div class=\"line\">IndexOfAny/LastIndexOfAny/IndexOfAnyBut/LastIndexOfAnyBut - 是否包含哪些字符串</div><div class=\"line\">ContainsOnly/ContainsNone/ContainsAny - 字符是否仅包含/不含有/任何这些字符串</div><div class=\"line\">Substring/Left/Right/Mid - 截取字符串</div><div class=\"line\">SubstringBefore/SubstringAfter/SubstringBetween - 提取相对其他字符串</div><div class=\"line\">Split/Join - 分割/组合成数组</div><div class=\"line\">Remove/Delete - 删除部分字符串</div><div class=\"line\">Replace/Overlay - 搜索/替换字符串</div><div class=\"line\">Chomp/Chop - 删除最后的字符串</div><div class=\"line\">AppendIfMissing - 保持固定后缀</div><div class=\"line\">PrependIfMissing - 保持固定前缀</div><div class=\"line\">LeftPad/RightPad/Center/Repeat - 左/右/中/重复/地填充</div><div class=\"line\">UpperCase/LowerCase/SwapCase/Capitalize/Uncapitalize - 改变字符串的大小写</div><div class=\"line\">CountMatches - 计算此字符串在另外一个字符串出现的次数</div><div class=\"line\">IsAlpha/IsNumeric/IsWhitespace/IsAsciiPrintable - 检查字符串的类型</div><div class=\"line\">DefaultString - 防止输入空值而设定默认值</div><div class=\"line\">Rotate - 旋转字符串</div><div class=\"line\">Reverse/ReverseDelimited - 逆转一个字符串</div><div class=\"line\">Abbreviate - 将字符串省略化</div><div class=\"line\">Difference - 字符串间的区别</div><div class=\"line\">LevenshteinDistance - 两个字符串的具体值差距</div></pre></td></tr></table></figure>\n<blockquote>\n<p>除去上面那个比较常见的函数外,还有一些高级的…</p>\n<p>Empty : null 、 “”</p>\n<p>Blank : whitespace 、 null 、 “”</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">isNotEmpty/isNotBlank : 确保不为空</div><div class=\"line\"></div><div class=\"line\">isAnyEmpty/isAnyBlank : 是否包含一个空字符串</div><div class=\"line\"></div><div class=\"line\">isNoneEmpty/isNoneBlank : 确保全部是有效值</div><div class=\"line\"></div><div class=\"line\">trimToNull/stripToNull : Blank元素转成 null</div><div class=\"line\"></div><div class=\"line\">trimToEmpty/stripToEmpty : Blank元素转成 &quot;&quot; </div><div class=\"line\"></div><div class=\"line\">truncate : 按前到后截断</div><div class=\"line\"></div><div class=\"line\">stripAll : 处理多个字符串</div><div class=\"line\"></div><div class=\"line\">stripAccents : 去除音标</div><div class=\"line\"></div><div class=\"line\">equalsIgnoreCase : 忽略大小比较</div></pre></td></tr></table></figure>\n"},{"title":"angular-$scope变量和方法","date":"2016-09-10T16:00:00.000Z","_content":"\n> 变量和方法的使用\n> $scope 类似是一个代理的对象,负责增删改和检验等功能\n\n\n> ng-click=\"login()\"\n\n> $scope 生成\n    $scope.user = {\n        name: '',\n        pwd: ''\n    };\n    \n> $scope 引用 \n<input type=\"text\" ng-model=\"user.name\"><br><br>\n<input type=\"text\" ng-model=\"user.pwd\"><br><br>\n\n\n\n```\n<body style=\"padding:10px;\" ng-app=\"app\">\n<div ng-controller=\"MyCtrl\">\n<input type=\"text\"ng-model=\"msg\">\n<h1>{{msg}}</h1>\n<br>\n<h1>{{reverse()}}</h1>\n<!--调用方法，注意这里要加括号-->\n</div>\n<div ng-controller=\"MyCtrl\">\n<input type=\"text\" ng-model=\"user.name\"><br><br>\n<input type=\"text\" ng-model=\"user.pwd\"><br><br>\n<div ng-click=\"login()\">登录</div>\n<div ng-show=\"errormsg.length>0\">{{errormsg}}</div>\n<!--当errormsg长度大于0的时候显示出来-->\n</div>\n</body>\n```\n\n```\nangular.module('app', []).controller('MyCtrl',\nfunction($scope) {\n    $scope.msg = \"\";\n    $scope.reverse = function() {\n        return $scope.msg.split(\"\").reverse().join(\"\"); < !--对输入进行反转-->\n    }\n\n    $scope.user = {\n        name: '',\n        pwd: ''\n    };\n    $scope.errormsg = \"\"; < !--需要先定义，否则会报错-->$scope.login = function() {\n        if ($scope.user.name == \"admin\" && $scope.user.pwd == \"123\") {\n            alert(\"登录成功\");\n        } else {\n            alert(\"用户名或密码错误\");\n        }\n    }\n\n})\n```\n","source":"_posts/angular/angular-$scope变量和方法.md","raw":"---\ntitle: angular-$scope变量和方法\ndate: 2016-09-11\ncategories: \n- angular\n---\n\n> 变量和方法的使用\n> $scope 类似是一个代理的对象,负责增删改和检验等功能\n\n\n> ng-click=\"login()\"\n\n> $scope 生成\n    $scope.user = {\n        name: '',\n        pwd: ''\n    };\n    \n> $scope 引用 \n<input type=\"text\" ng-model=\"user.name\"><br><br>\n<input type=\"text\" ng-model=\"user.pwd\"><br><br>\n\n\n\n```\n<body style=\"padding:10px;\" ng-app=\"app\">\n<div ng-controller=\"MyCtrl\">\n<input type=\"text\"ng-model=\"msg\">\n<h1>{{msg}}</h1>\n<br>\n<h1>{{reverse()}}</h1>\n<!--调用方法，注意这里要加括号-->\n</div>\n<div ng-controller=\"MyCtrl\">\n<input type=\"text\" ng-model=\"user.name\"><br><br>\n<input type=\"text\" ng-model=\"user.pwd\"><br><br>\n<div ng-click=\"login()\">登录</div>\n<div ng-show=\"errormsg.length>0\">{{errormsg}}</div>\n<!--当errormsg长度大于0的时候显示出来-->\n</div>\n</body>\n```\n\n```\nangular.module('app', []).controller('MyCtrl',\nfunction($scope) {\n    $scope.msg = \"\";\n    $scope.reverse = function() {\n        return $scope.msg.split(\"\").reverse().join(\"\"); < !--对输入进行反转-->\n    }\n\n    $scope.user = {\n        name: '',\n        pwd: ''\n    };\n    $scope.errormsg = \"\"; < !--需要先定义，否则会报错-->$scope.login = function() {\n        if ($scope.user.name == \"admin\" && $scope.user.pwd == \"123\") {\n            alert(\"登录成功\");\n        } else {\n            alert(\"用户名或密码错误\");\n        }\n    }\n\n})\n```\n","slug":"angular/angular-$scope变量和方法","published":1,"updated":"2017-02-06T03:06:10.000Z","_id":"ciytfmmst0024s10oii29p4br","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>变量和方法的使用<br>$scope 类似是一个代理的对象,负责增删改和检验等功能</p>\n<p>ng-click=”login()”</p>\n<p>$scope 生成<br>    $scope.user = {<br>        name: ‘’,<br>        pwd: ‘’<br>    };</p>\n<p>$scope 引用 </p>\n<p><input type=\"text\" ng-model=\"user.name\"><br><br></p>\n<p><input type=\"text\" ng-model=\"user.pwd\"><br><br></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body style=&quot;padding:10px;&quot; ng-app=&quot;app&quot;&gt;</div><div class=\"line\">&lt;div ng-controller=&quot;MyCtrl&quot;&gt;</div><div class=\"line\">&lt;input type=&quot;text&quot;ng-model=&quot;msg&quot;&gt;</div><div class=\"line\">&lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</div><div class=\"line\">&lt;br&gt;</div><div class=\"line\">&lt;h1&gt;&#123;&#123;reverse()&#125;&#125;&lt;/h1&gt;</div><div class=\"line\">&lt;!--调用方法，注意这里要加括号--&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;div ng-controller=&quot;MyCtrl&quot;&gt;</div><div class=\"line\">&lt;input type=&quot;text&quot; ng-model=&quot;user.name&quot;&gt;&lt;br&gt;&lt;br&gt;</div><div class=\"line\">&lt;input type=&quot;text&quot; ng-model=&quot;user.pwd&quot;&gt;&lt;br&gt;&lt;br&gt;</div><div class=\"line\">&lt;div ng-click=&quot;login()&quot;&gt;登录&lt;/div&gt;</div><div class=\"line\">&lt;div ng-show=&quot;errormsg.length&gt;0&quot;&gt;&#123;&#123;errormsg&#125;&#125;&lt;/div&gt;</div><div class=\"line\">&lt;!--当errormsg长度大于0的时候显示出来--&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;/body&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(&apos;app&apos;, []).controller(&apos;MyCtrl&apos;,</div><div class=\"line\">function($scope) &#123;</div><div class=\"line\">    $scope.msg = &quot;&quot;;</div><div class=\"line\">    $scope.reverse = function() &#123;</div><div class=\"line\">        return $scope.msg.split(&quot;&quot;).reverse().join(&quot;&quot;); &lt; !--对输入进行反转--&gt;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    $scope.user = &#123;</div><div class=\"line\">        name: &apos;&apos;,</div><div class=\"line\">        pwd: &apos;&apos;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    $scope.errormsg = &quot;&quot;; &lt; !--需要先定义，否则会报错--&gt;$scope.login = function() &#123;</div><div class=\"line\">        if ($scope.user.name == &quot;admin&quot; &amp;&amp; $scope.user.pwd == &quot;123&quot;) &#123;</div><div class=\"line\">            alert(&quot;登录成功&quot;);</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            alert(&quot;用户名或密码错误&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>变量和方法的使用<br>$scope 类似是一个代理的对象,负责增删改和检验等功能</p>\n<p>ng-click=”login()”</p>\n<p>$scope 生成<br>    $scope.user = {<br>        name: ‘’,<br>        pwd: ‘’<br>    };</p>\n<p>$scope 引用 </p>\n<p><input type=\"text\" ng-model=\"user.name\"><br><br></p>\n<p><input type=\"text\" ng-model=\"user.pwd\"><br><br></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body style=&quot;padding:10px;&quot; ng-app=&quot;app&quot;&gt;</div><div class=\"line\">&lt;div ng-controller=&quot;MyCtrl&quot;&gt;</div><div class=\"line\">&lt;input type=&quot;text&quot;ng-model=&quot;msg&quot;&gt;</div><div class=\"line\">&lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</div><div class=\"line\">&lt;br&gt;</div><div class=\"line\">&lt;h1&gt;&#123;&#123;reverse()&#125;&#125;&lt;/h1&gt;</div><div class=\"line\">&lt;!--调用方法，注意这里要加括号--&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;div ng-controller=&quot;MyCtrl&quot;&gt;</div><div class=\"line\">&lt;input type=&quot;text&quot; ng-model=&quot;user.name&quot;&gt;&lt;br&gt;&lt;br&gt;</div><div class=\"line\">&lt;input type=&quot;text&quot; ng-model=&quot;user.pwd&quot;&gt;&lt;br&gt;&lt;br&gt;</div><div class=\"line\">&lt;div ng-click=&quot;login()&quot;&gt;登录&lt;/div&gt;</div><div class=\"line\">&lt;div ng-show=&quot;errormsg.length&gt;0&quot;&gt;&#123;&#123;errormsg&#125;&#125;&lt;/div&gt;</div><div class=\"line\">&lt;!--当errormsg长度大于0的时候显示出来--&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;/body&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(&apos;app&apos;, []).controller(&apos;MyCtrl&apos;,</div><div class=\"line\">function($scope) &#123;</div><div class=\"line\">    $scope.msg = &quot;&quot;;</div><div class=\"line\">    $scope.reverse = function() &#123;</div><div class=\"line\">        return $scope.msg.split(&quot;&quot;).reverse().join(&quot;&quot;); &lt; !--对输入进行反转--&gt;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    $scope.user = &#123;</div><div class=\"line\">        name: &apos;&apos;,</div><div class=\"line\">        pwd: &apos;&apos;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    $scope.errormsg = &quot;&quot;; &lt; !--需要先定义，否则会报错--&gt;$scope.login = function() &#123;</div><div class=\"line\">        if ($scope.user.name == &quot;admin&quot; &amp;&amp; $scope.user.pwd == &quot;123&quot;) &#123;</div><div class=\"line\">            alert(&quot;登录成功&quot;);</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            alert(&quot;用户名或密码错误&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n"},{"title":"angular-$watch","date":"2016-09-10T16:00:00.000Z","_content":"\n$watch(watchFn, watchAction, deepWatch)\n\n> 字符串或者表达式,方法,深watch(一般是数组或者对象)\n\n> 监听 与 注销 \n\nvar dereg = $scope.$watch('someModel.someProperty', callbackOnChange());\n\n\ndereg();\n","source":"_posts/angular/angular-$watch.md","raw":"---\ntitle: angular-$watch\ndate: 2016-09-11\ncategories: \n- angular\n---\n\n$watch(watchFn, watchAction, deepWatch)\n\n> 字符串或者表达式,方法,深watch(一般是数组或者对象)\n\n> 监听 与 注销 \n\nvar dereg = $scope.$watch('someModel.someProperty', callbackOnChange());\n\n\ndereg();\n","slug":"angular/angular-$watch","published":1,"updated":"2017-02-06T03:06:25.000Z","_id":"ciytfmmsu0025s10opmkc121l","comments":1,"layout":"post","photos":[],"link":"","content":"<p>$watch(watchFn, watchAction, deepWatch)</p>\n<blockquote>\n<p>字符串或者表达式,方法,深watch(一般是数组或者对象)</p>\n<p>监听 与 注销 </p>\n</blockquote>\n<p>var dereg = $scope.$watch(‘someModel.someProperty’, callbackOnChange());</p>\n<p>dereg();</p>\n","excerpt":"","more":"<p>$watch(watchFn, watchAction, deepWatch)</p>\n<blockquote>\n<p>字符串或者表达式,方法,深watch(一般是数组或者对象)</p>\n<p>监听 与 注销 </p>\n</blockquote>\n<p>var dereg = $scope.$watch(‘someModel.someProperty’, callbackOnChange());</p>\n<p>dereg();</p>\n"},{"title":"angular-JQuery-的-数据获取","date":"2016-09-10T16:00:00.000Z","_content":"\n\n# jquery\n\n```\n$.ajax({\n  url: '/myEndpoint.json',\n  success: function ( data, status ) {\n    $('ul#log').append('<li>Data Received!</li>');\n  }\n});\n\n<ul class=\"messages\" id=\"log\">\n</ul>\n```\n\n# angular\n\n```\n$http( '/myEndpoint.json' ).then( function ( response ) {\n    $scope.log.push( { msg: 'Data Received!' } );\n});\n\n<ul class=\"messages\">\n    <li ng-repeat=\"entry in log\">{{ entry.msg }}</li>\n</ul>\n```\n","source":"_posts/angular/angular-JQuery-的-数据获取.md","raw":"---\ntitle: angular-JQuery-的-数据获取\ndate: 2016-09-11\ncategories: \n- angular\n---\n\n\n# jquery\n\n```\n$.ajax({\n  url: '/myEndpoint.json',\n  success: function ( data, status ) {\n    $('ul#log').append('<li>Data Received!</li>');\n  }\n});\n\n<ul class=\"messages\" id=\"log\">\n</ul>\n```\n\n# angular\n\n```\n$http( '/myEndpoint.json' ).then( function ( response ) {\n    $scope.log.push( { msg: 'Data Received!' } );\n});\n\n<ul class=\"messages\">\n    <li ng-repeat=\"entry in log\">{{ entry.msg }}</li>\n</ul>\n```\n","slug":"angular/angular-JQuery-的-数据获取","published":1,"updated":"2017-02-06T01:35:50.000Z","_id":"ciytfmmsw0026s10omhocqxyc","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"jquery\"><a href=\"#jquery\" class=\"headerlink\" title=\"jquery\"></a>jquery</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">  url: &apos;/myEndpoint.json&apos;,</div><div class=\"line\">  success: function ( data, status ) &#123;</div><div class=\"line\">    $(&apos;ul#log&apos;).append(&apos;&lt;li&gt;Data Received!&lt;/li&gt;&apos;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">&lt;ul class=&quot;messages&quot; id=&quot;log&quot;&gt;</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"angular\"><a href=\"#angular\" class=\"headerlink\" title=\"angular\"></a>angular</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$http( &apos;/myEndpoint.json&apos; ).then( function ( response ) &#123;</div><div class=\"line\">    $scope.log.push( &#123; msg: &apos;Data Received!&apos; &#125; );</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">&lt;ul class=&quot;messages&quot;&gt;</div><div class=\"line\">    &lt;li ng-repeat=&quot;entry in log&quot;&gt;&#123;&#123; entry.msg &#125;&#125;&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"jquery\"><a href=\"#jquery\" class=\"headerlink\" title=\"jquery\"></a>jquery</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">  url: &apos;/myEndpoint.json&apos;,</div><div class=\"line\">  success: function ( data, status ) &#123;</div><div class=\"line\">    $(&apos;ul#log&apos;).append(&apos;&lt;li&gt;Data Received!&lt;/li&gt;&apos;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">&lt;ul class=&quot;messages&quot; id=&quot;log&quot;&gt;</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"angular\"><a href=\"#angular\" class=\"headerlink\" title=\"angular\"></a>angular</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$http( &apos;/myEndpoint.json&apos; ).then( function ( response ) &#123;</div><div class=\"line\">    $scope.log.push( &#123; msg: &apos;Data Received!&apos; &#125; );</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">&lt;ul class=&quot;messages&quot;&gt;</div><div class=\"line\">    &lt;li ng-repeat=&quot;entry in log&quot;&gt;&#123;&#123; entry.msg &#125;&#125;&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure>\n"},{"title":"angular-constant","date":"2016-09-10T16:00:00.000Z","_content":"\n\n# 归属module 代表常量\n\n```\nvar app = angular.module('myapp', []).value('testvalue', 'widuu').constant('count', 23).service('testservice',\nfunction(testvalue, count) {\n    this.lable = function() {\n        return \"this will output:hello \" + testvalue + \",age is \" + count;\n    }\n});\napp.controller('mytest',\nfunction($scope, testvalue, testservice) {\n    $scope.test = \"hello \" + testvalue;\n    $scope.output = testservice.lable();\n});\n\n```\n","source":"_posts/angular/angular-constant.md","raw":"---\ntitle: angular-constant\ndate: 2016-09-11\ncategories: \n- angular\n---\n\n\n# 归属module 代表常量\n\n```\nvar app = angular.module('myapp', []).value('testvalue', 'widuu').constant('count', 23).service('testservice',\nfunction(testvalue, count) {\n    this.lable = function() {\n        return \"this will output:hello \" + testvalue + \",age is \" + count;\n    }\n});\napp.controller('mytest',\nfunction($scope, testvalue, testservice) {\n    $scope.test = \"hello \" + testvalue;\n    $scope.output = testservice.lable();\n});\n\n```\n","slug":"angular/angular-constant","published":1,"updated":"2017-02-06T01:36:22.000Z","_id":"ciytfmmsz0028s10o9xoqfg9z","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"归属module-代表常量\"><a href=\"#归属module-代表常量\" class=\"headerlink\" title=\"归属module 代表常量\"></a>归属module 代表常量</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var app = angular.module(&apos;myapp&apos;, []).value(&apos;testvalue&apos;, &apos;widuu&apos;).constant(&apos;count&apos;, 23).service(&apos;testservice&apos;,</div><div class=\"line\">function(testvalue, count) &#123;</div><div class=\"line\">    this.lable = function() &#123;</div><div class=\"line\">        return &quot;this will output:hello &quot; + testvalue + &quot;,age is &quot; + count;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">app.controller(&apos;mytest&apos;,</div><div class=\"line\">function($scope, testvalue, testservice) &#123;</div><div class=\"line\">    $scope.test = &quot;hello &quot; + testvalue;</div><div class=\"line\">    $scope.output = testservice.lable();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"归属module-代表常量\"><a href=\"#归属module-代表常量\" class=\"headerlink\" title=\"归属module 代表常量\"></a>归属module 代表常量</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var app = angular.module(&apos;myapp&apos;, []).value(&apos;testvalue&apos;, &apos;widuu&apos;).constant(&apos;count&apos;, 23).service(&apos;testservice&apos;,</div><div class=\"line\">function(testvalue, count) &#123;</div><div class=\"line\">    this.lable = function() &#123;</div><div class=\"line\">        return &quot;this will output:hello &quot; + testvalue + &quot;,age is &quot; + count;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">app.controller(&apos;mytest&apos;,</div><div class=\"line\">function($scope, testvalue, testservice) &#123;</div><div class=\"line\">    $scope.test = &quot;hello &quot; + testvalue;</div><div class=\"line\">    $scope.output = testservice.lable();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n"},{"title":"angular-controller","date":"2016-09-10T16:00:00.000Z","_content":"\n\n> 是module的方法\n> controller(name, constructor); \n> 前者是名字,后者是构造函数\n> 不同的controller中变量相同引用不同\n\n\n```\n<body style=\"padding:10px;\" ng-app=\"app\">\n<div ng-controller=\"FirstCtrl\">\n<input type=\"text\"ng-model=\"msg\">\n<h1>{{msg}}</h1>\n<br>\n<h1 ng-bind=\"msg\"></h1>\n<!--可以使用ng-bind进行绑定，这样就不需要输入{{}}-->\n</div>\n<div ng-controller=\"SecondCtrl\">\n<input type=\"text\" ng-model=\"msg\">\n<h1>{{msg}}</h1>\n<!--同样是msg，但是显示的不同这就是控制器作用域的问题，这个msg绑定的是SecondCtrl-->\n</div>\n</body> \n```\n\n\n```\nangular.module('app',[])\n.controller('FirstCtrl',function($scope){\n    $scope.msg=\"hello angular\";\n})\n.controller('SecondCtrl',function($scope){\n    $scope.msg=\"hello angularjs\"\n})\n```\n\n\n> 比较正式的控制器\n```\nangular.module('myApp', []).controller('userCtrl', function($scope) {\n$scope.fName = '';\n$scope.lName = '';\n$scope.passw1 = '';\n$scope.passw2 = '';\n$scope.users = [\n{id:1, fName:'Hege',lName:\"Pege\" },\n{id:2, fName:'Kim',lName:\"Pim\" },\n{id:3, fName:'Sal',lName:\"Smith\" },\n{id:4, fName:'Jack',lName:\"Jones\" },\n{id:5, fName:'John',lName:\"Doe\" },\n{id:6, fName:'Peter',lName:\"Pan\" }\n];\n$scope.edit = true;\n$scope.error = false;\n$scope.incomplete = false; \n$scope.editUser = function(id) {\n  if (id == 'new') {\n    $scope.edit = true;\n    $scope.incomplete = true;\n    $scope.fName = '';\n    $scope.lName = '';\n    } else {\n    $scope.edit = false;\n    $scope.fName = $scope.users[id-1].fName;\n    $scope.lName = $scope.users[id-1].lName; \n  }\n};\n\n$scope.$watch('passw1',function() {$scope.test();});\n$scope.$watch('passw2',function() {$scope.test();});\n$scope.$watch('fName',function() {$scope.test();});\n$scope.$watch('lName',function() {$scope.test();});\n\n$scope.test = function() {\n  if ($scope.passw1 !== $scope.passw2) {\n    $scope.error = true;\n    } else {\n    $scope.error = false;\n  }\n  $scope.incomplete = false;\n  if ($scope.edit && (!$scope.fName.length ||\n    !$scope.lName.length ||\n    !$scope.passw1.length || !$scope.passw2.length)) {\n    $scope.incomplete = true;\n  }\n};\n})\n\n```\n","source":"_posts/angular/angular-controller.md","raw":"---\ntitle: angular-controller\ndate: 2016-09-11\ncategories: \n- angular\n---\n\n\n> 是module的方法\n> controller(name, constructor); \n> 前者是名字,后者是构造函数\n> 不同的controller中变量相同引用不同\n\n\n```\n<body style=\"padding:10px;\" ng-app=\"app\">\n<div ng-controller=\"FirstCtrl\">\n<input type=\"text\"ng-model=\"msg\">\n<h1>{{msg}}</h1>\n<br>\n<h1 ng-bind=\"msg\"></h1>\n<!--可以使用ng-bind进行绑定，这样就不需要输入{{}}-->\n</div>\n<div ng-controller=\"SecondCtrl\">\n<input type=\"text\" ng-model=\"msg\">\n<h1>{{msg}}</h1>\n<!--同样是msg，但是显示的不同这就是控制器作用域的问题，这个msg绑定的是SecondCtrl-->\n</div>\n</body> \n```\n\n\n```\nangular.module('app',[])\n.controller('FirstCtrl',function($scope){\n    $scope.msg=\"hello angular\";\n})\n.controller('SecondCtrl',function($scope){\n    $scope.msg=\"hello angularjs\"\n})\n```\n\n\n> 比较正式的控制器\n```\nangular.module('myApp', []).controller('userCtrl', function($scope) {\n$scope.fName = '';\n$scope.lName = '';\n$scope.passw1 = '';\n$scope.passw2 = '';\n$scope.users = [\n{id:1, fName:'Hege',lName:\"Pege\" },\n{id:2, fName:'Kim',lName:\"Pim\" },\n{id:3, fName:'Sal',lName:\"Smith\" },\n{id:4, fName:'Jack',lName:\"Jones\" },\n{id:5, fName:'John',lName:\"Doe\" },\n{id:6, fName:'Peter',lName:\"Pan\" }\n];\n$scope.edit = true;\n$scope.error = false;\n$scope.incomplete = false; \n$scope.editUser = function(id) {\n  if (id == 'new') {\n    $scope.edit = true;\n    $scope.incomplete = true;\n    $scope.fName = '';\n    $scope.lName = '';\n    } else {\n    $scope.edit = false;\n    $scope.fName = $scope.users[id-1].fName;\n    $scope.lName = $scope.users[id-1].lName; \n  }\n};\n\n$scope.$watch('passw1',function() {$scope.test();});\n$scope.$watch('passw2',function() {$scope.test();});\n$scope.$watch('fName',function() {$scope.test();});\n$scope.$watch('lName',function() {$scope.test();});\n\n$scope.test = function() {\n  if ($scope.passw1 !== $scope.passw2) {\n    $scope.error = true;\n    } else {\n    $scope.error = false;\n  }\n  $scope.incomplete = false;\n  if ($scope.edit && (!$scope.fName.length ||\n    !$scope.lName.length ||\n    !$scope.passw1.length || !$scope.passw2.length)) {\n    $scope.incomplete = true;\n  }\n};\n})\n\n```\n","slug":"angular/angular-controller","published":1,"updated":"2017-02-06T03:06:48.000Z","_id":"ciytfmmt1002as10o5gff7ovi","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>是module的方法<br>controller(name, constructor);<br>前者是名字,后者是构造函数<br>不同的controller中变量相同引用不同</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body style=&quot;padding:10px;&quot; ng-app=&quot;app&quot;&gt;</div><div class=\"line\">&lt;div ng-controller=&quot;FirstCtrl&quot;&gt;</div><div class=\"line\">&lt;input type=&quot;text&quot;ng-model=&quot;msg&quot;&gt;</div><div class=\"line\">&lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</div><div class=\"line\">&lt;br&gt;</div><div class=\"line\">&lt;h1 ng-bind=&quot;msg&quot;&gt;&lt;/h1&gt;</div><div class=\"line\">&lt;!--可以使用ng-bind进行绑定，这样就不需要输入&#123;&#123;&#125;&#125;--&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;div ng-controller=&quot;SecondCtrl&quot;&gt;</div><div class=\"line\">&lt;input type=&quot;text&quot; ng-model=&quot;msg&quot;&gt;</div><div class=\"line\">&lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</div><div class=\"line\">&lt;!--同样是msg，但是显示的不同这就是控制器作用域的问题，这个msg绑定的是SecondCtrl--&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;/body&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(&apos;app&apos;,[])</div><div class=\"line\">.controller(&apos;FirstCtrl&apos;,function($scope)&#123;</div><div class=\"line\">    $scope.msg=&quot;hello angular&quot;;</div><div class=\"line\">&#125;)</div><div class=\"line\">.controller(&apos;SecondCtrl&apos;,function($scope)&#123;</div><div class=\"line\">    $scope.msg=&quot;hello angularjs&quot;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<blockquote>\n<p>比较正式的控制器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(&apos;myApp&apos;, []).controller(&apos;userCtrl&apos;, function($scope) &#123;</div><div class=\"line\">$scope.fName = &apos;&apos;;</div><div class=\"line\">$scope.lName = &apos;&apos;;</div><div class=\"line\">$scope.passw1 = &apos;&apos;;</div><div class=\"line\">$scope.passw2 = &apos;&apos;;</div><div class=\"line\">$scope.users = [</div><div class=\"line\">&#123;id:1, fName:&apos;Hege&apos;,lName:&quot;Pege&quot; &#125;,</div><div class=\"line\">&#123;id:2, fName:&apos;Kim&apos;,lName:&quot;Pim&quot; &#125;,</div><div class=\"line\">&#123;id:3, fName:&apos;Sal&apos;,lName:&quot;Smith&quot; &#125;,</div><div class=\"line\">&#123;id:4, fName:&apos;Jack&apos;,lName:&quot;Jones&quot; &#125;,</div><div class=\"line\">&#123;id:5, fName:&apos;John&apos;,lName:&quot;Doe&quot; &#125;,</div><div class=\"line\">&#123;id:6, fName:&apos;Peter&apos;,lName:&quot;Pan&quot; &#125;</div><div class=\"line\">];</div><div class=\"line\">$scope.edit = true;</div><div class=\"line\">$scope.error = false;</div><div class=\"line\">$scope.incomplete = false; </div><div class=\"line\">$scope.editUser = function(id) &#123;</div><div class=\"line\">  if (id == &apos;new&apos;) &#123;</div><div class=\"line\">    $scope.edit = true;</div><div class=\"line\">    $scope.incomplete = true;</div><div class=\"line\">    $scope.fName = &apos;&apos;;</div><div class=\"line\">    $scope.lName = &apos;&apos;;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">    $scope.edit = false;</div><div class=\"line\">    $scope.fName = $scope.users[id-1].fName;</div><div class=\"line\">    $scope.lName = $scope.users[id-1].lName; </div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">$scope.$watch(&apos;passw1&apos;,function() &#123;$scope.test();&#125;);</div><div class=\"line\">$scope.$watch(&apos;passw2&apos;,function() &#123;$scope.test();&#125;);</div><div class=\"line\">$scope.$watch(&apos;fName&apos;,function() &#123;$scope.test();&#125;);</div><div class=\"line\">$scope.$watch(&apos;lName&apos;,function() &#123;$scope.test();&#125;);</div><div class=\"line\"></div><div class=\"line\">$scope.test = function() &#123;</div><div class=\"line\">  if ($scope.passw1 !== $scope.passw2) &#123;</div><div class=\"line\">    $scope.error = true;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">    $scope.error = false;</div><div class=\"line\">  &#125;</div><div class=\"line\">  $scope.incomplete = false;</div><div class=\"line\">  if ($scope.edit &amp;&amp; (!$scope.fName.length ||</div><div class=\"line\">    !$scope.lName.length ||</div><div class=\"line\">    !$scope.passw1.length || !$scope.passw2.length)) &#123;</div><div class=\"line\">    $scope.incomplete = true;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n</blockquote>\n","excerpt":"","more":"<blockquote>\n<p>是module的方法<br>controller(name, constructor);<br>前者是名字,后者是构造函数<br>不同的controller中变量相同引用不同</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body style=&quot;padding:10px;&quot; ng-app=&quot;app&quot;&gt;</div><div class=\"line\">&lt;div ng-controller=&quot;FirstCtrl&quot;&gt;</div><div class=\"line\">&lt;input type=&quot;text&quot;ng-model=&quot;msg&quot;&gt;</div><div class=\"line\">&lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</div><div class=\"line\">&lt;br&gt;</div><div class=\"line\">&lt;h1 ng-bind=&quot;msg&quot;&gt;&lt;/h1&gt;</div><div class=\"line\">&lt;!--可以使用ng-bind进行绑定，这样就不需要输入&#123;&#123;&#125;&#125;--&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;div ng-controller=&quot;SecondCtrl&quot;&gt;</div><div class=\"line\">&lt;input type=&quot;text&quot; ng-model=&quot;msg&quot;&gt;</div><div class=\"line\">&lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</div><div class=\"line\">&lt;!--同样是msg，但是显示的不同这就是控制器作用域的问题，这个msg绑定的是SecondCtrl--&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;/body&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(&apos;app&apos;,[])</div><div class=\"line\">.controller(&apos;FirstCtrl&apos;,function($scope)&#123;</div><div class=\"line\">    $scope.msg=&quot;hello angular&quot;;</div><div class=\"line\">&#125;)</div><div class=\"line\">.controller(&apos;SecondCtrl&apos;,function($scope)&#123;</div><div class=\"line\">    $scope.msg=&quot;hello angularjs&quot;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<blockquote>\n<p>比较正式的控制器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(&apos;myApp&apos;, []).controller(&apos;userCtrl&apos;, function($scope) &#123;</div><div class=\"line\">$scope.fName = &apos;&apos;;</div><div class=\"line\">$scope.lName = &apos;&apos;;</div><div class=\"line\">$scope.passw1 = &apos;&apos;;</div><div class=\"line\">$scope.passw2 = &apos;&apos;;</div><div class=\"line\">$scope.users = [</div><div class=\"line\">&#123;id:1, fName:&apos;Hege&apos;,lName:&quot;Pege&quot; &#125;,</div><div class=\"line\">&#123;id:2, fName:&apos;Kim&apos;,lName:&quot;Pim&quot; &#125;,</div><div class=\"line\">&#123;id:3, fName:&apos;Sal&apos;,lName:&quot;Smith&quot; &#125;,</div><div class=\"line\">&#123;id:4, fName:&apos;Jack&apos;,lName:&quot;Jones&quot; &#125;,</div><div class=\"line\">&#123;id:5, fName:&apos;John&apos;,lName:&quot;Doe&quot; &#125;,</div><div class=\"line\">&#123;id:6, fName:&apos;Peter&apos;,lName:&quot;Pan&quot; &#125;</div><div class=\"line\">];</div><div class=\"line\">$scope.edit = true;</div><div class=\"line\">$scope.error = false;</div><div class=\"line\">$scope.incomplete = false; </div><div class=\"line\">$scope.editUser = function(id) &#123;</div><div class=\"line\">  if (id == &apos;new&apos;) &#123;</div><div class=\"line\">    $scope.edit = true;</div><div class=\"line\">    $scope.incomplete = true;</div><div class=\"line\">    $scope.fName = &apos;&apos;;</div><div class=\"line\">    $scope.lName = &apos;&apos;;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">    $scope.edit = false;</div><div class=\"line\">    $scope.fName = $scope.users[id-1].fName;</div><div class=\"line\">    $scope.lName = $scope.users[id-1].lName; </div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">$scope.$watch(&apos;passw1&apos;,function() &#123;$scope.test();&#125;);</div><div class=\"line\">$scope.$watch(&apos;passw2&apos;,function() &#123;$scope.test();&#125;);</div><div class=\"line\">$scope.$watch(&apos;fName&apos;,function() &#123;$scope.test();&#125;);</div><div class=\"line\">$scope.$watch(&apos;lName&apos;,function() &#123;$scope.test();&#125;);</div><div class=\"line\"></div><div class=\"line\">$scope.test = function() &#123;</div><div class=\"line\">  if ($scope.passw1 !== $scope.passw2) &#123;</div><div class=\"line\">    $scope.error = true;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">    $scope.error = false;</div><div class=\"line\">  &#125;</div><div class=\"line\">  $scope.incomplete = false;</div><div class=\"line\">  if ($scope.edit &amp;&amp; (!$scope.fName.length ||</div><div class=\"line\">    !$scope.lName.length ||</div><div class=\"line\">    !$scope.passw1.length || !$scope.passw2.length)) &#123;</div><div class=\"line\">    $scope.incomplete = true;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n</blockquote>\n"},{"title":"angular-css类和样式","date":"2016-09-10T16:00:00.000Z","_content":"\n\n```\n<div ng-controller=\"MenuController\">\n    <ul>\n        <li class=\"menu-disabled-{{isDisabled}}\" ng-click=\"DisabledIt()\">Click</li>\n        ...\n    </ul>\n</div>\n```\n\n```\n.menu-disabled-true {\n    color: gray;\n}\n```\n```\nfunction MenuController($scope) {\n    $scope.isDisabled = false;\n\n    $scope.disabledIt = function() {\n        $scope.isDisabled = true;\n    }\n}\n```\n","source":"_posts/angular/angular-css类和样式.md","raw":"---\ntitle: angular-css类和样式\ndate: 2016-09-11\ncategories: \n- angular\n---\n\n\n```\n<div ng-controller=\"MenuController\">\n    <ul>\n        <li class=\"menu-disabled-{{isDisabled}}\" ng-click=\"DisabledIt()\">Click</li>\n        ...\n    </ul>\n</div>\n```\n\n```\n.menu-disabled-true {\n    color: gray;\n}\n```\n```\nfunction MenuController($scope) {\n    $scope.isDisabled = false;\n\n    $scope.disabledIt = function() {\n        $scope.isDisabled = true;\n    }\n}\n```\n","slug":"angular/angular-css类和样式","published":1,"updated":"2017-02-06T01:36:09.000Z","_id":"ciytfmmt5002cs10okt2mc6bb","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-controller=&quot;MenuController&quot;&gt;</div><div class=\"line\">    &lt;ul&gt;</div><div class=\"line\">        &lt;li class=&quot;menu-disabled-&#123;&#123;isDisabled&#125;&#125;&quot; ng-click=&quot;DisabledIt()&quot;&gt;Click&lt;/li&gt;</div><div class=\"line\">        ...</div><div class=\"line\">    &lt;/ul&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.menu-disabled-true &#123;</div><div class=\"line\">    color: gray;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">function MenuController($scope) &#123;</div><div class=\"line\">    $scope.isDisabled = false;</div><div class=\"line\"></div><div class=\"line\">    $scope.disabledIt = function() &#123;</div><div class=\"line\">        $scope.isDisabled = true;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-controller=&quot;MenuController&quot;&gt;</div><div class=\"line\">    &lt;ul&gt;</div><div class=\"line\">        &lt;li class=&quot;menu-disabled-&#123;&#123;isDisabled&#125;&#125;&quot; ng-click=&quot;DisabledIt()&quot;&gt;Click&lt;/li&gt;</div><div class=\"line\">        ...</div><div class=\"line\">    &lt;/ul&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.menu-disabled-true &#123;</div><div class=\"line\">    color: gray;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">function MenuController($scope) &#123;</div><div class=\"line\">    $scope.isDisabled = false;</div><div class=\"line\"></div><div class=\"line\">    $scope.disabledIt = function() &#123;</div><div class=\"line\">        $scope.isDisabled = true;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"angular-factory","date":"2016-09-10T16:00:00.000Z","_content":"\n\n> 是module的方法\n> factory(name, providerFunction);\n> 存储方法\n\n\n```\n<body ng-app='myapp' ng-controller='mytest'>\n  <input ng-model='test'>{{test}}\n  <br>{{output}}</body>\n\n```\n\n\n```\nvar app = angular.module('myapp', []).value('testvalue', 'widuu').factory('testfactory',\nfunction(testvalue) {\n    return {\n        lable: function() {\n            return \"this can output : hello \" + testvalue;\n        }\n    }\n});\napp.controller('mytest',\nfunction($scope, testvalue, testfactory) {\n    $scope.test = \"hello \" + testvalue;\n    $scope.output = testfactory.lable();\n});\n\n```\n","source":"_posts/angular/angular-factory.md","raw":"---\ntitle: angular-factory\ndate: 2016-09-11\ncategories: \n- angular\n---\n\n\n> 是module的方法\n> factory(name, providerFunction);\n> 存储方法\n\n\n```\n<body ng-app='myapp' ng-controller='mytest'>\n  <input ng-model='test'>{{test}}\n  <br>{{output}}</body>\n\n```\n\n\n```\nvar app = angular.module('myapp', []).value('testvalue', 'widuu').factory('testfactory',\nfunction(testvalue) {\n    return {\n        lable: function() {\n            return \"this can output : hello \" + testvalue;\n        }\n    }\n});\napp.controller('mytest',\nfunction($scope, testvalue, testfactory) {\n    $scope.test = \"hello \" + testvalue;\n    $scope.output = testfactory.lable();\n});\n\n```\n","slug":"angular/angular-factory","published":1,"updated":"2017-02-06T03:07:04.000Z","_id":"ciytfmmtb002es10oc8335wt1","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>是module的方法<br>factory(name, providerFunction);<br>存储方法</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body ng-app=&apos;myapp&apos; ng-controller=&apos;mytest&apos;&gt;</div><div class=\"line\">  &lt;input ng-model=&apos;test&apos;&gt;&#123;&#123;test&#125;&#125;</div><div class=\"line\">  &lt;br&gt;&#123;&#123;output&#125;&#125;&lt;/body&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">var app = angular.module(&apos;myapp&apos;, []).value(&apos;testvalue&apos;, &apos;widuu&apos;).factory(&apos;testfactory&apos;,</div><div class=\"line\">function(testvalue) &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">        lable: function() &#123;</div><div class=\"line\">            return &quot;this can output : hello &quot; + testvalue;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">app.controller(&apos;mytest&apos;,</div><div class=\"line\">function($scope, testvalue, testfactory) &#123;</div><div class=\"line\">    $scope.test = &quot;hello &quot; + testvalue;</div><div class=\"line\">    $scope.output = testfactory.lable();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>是module的方法<br>factory(name, providerFunction);<br>存储方法</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body ng-app=&apos;myapp&apos; ng-controller=&apos;mytest&apos;&gt;</div><div class=\"line\">  &lt;input ng-model=&apos;test&apos;&gt;&#123;&#123;test&#125;&#125;</div><div class=\"line\">  &lt;br&gt;&#123;&#123;output&#125;&#125;&lt;/body&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">var app = angular.module(&apos;myapp&apos;, []).value(&apos;testvalue&apos;, &apos;widuu&apos;).factory(&apos;testfactory&apos;,</div><div class=\"line\">function(testvalue) &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">        lable: function() &#123;</div><div class=\"line\">            return &quot;this can output : hello &quot; + testvalue;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">app.controller(&apos;mytest&apos;,</div><div class=\"line\">function($scope, testvalue, testfactory) &#123;</div><div class=\"line\">    $scope.test = &quot;hello &quot; + testvalue;</div><div class=\"line\">    $scope.output = testfactory.lable();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n"},{"title":"angular-provider","date":"2016-09-10T16:00:00.000Z","_content":"\n\n> 归属module (name, providerType)\n> 类似 factory\n> 用于提供一个方法\n\n```\n\nvar app = angular.module('myapp', []).value('testvalue', 'widuu').provider('testprovider',\nfunction() {\n    this.lable = \"this will output : hello widuu\";\n    this.$get = function() {\n        return this;\n    }\n});\napp.controller('mytest',\nfunction($scope, testvalue, testprovider) {\n    $scope.test = \"hello \" + testvalue;\n    $scope.output = testprovider.lable;\n});\n\n```\n","source":"_posts/angular/angular-provider.md","raw":"---\ntitle: angular-provider\ndate: 2016-09-11\ncategories: \n- angular\n---\n\n\n> 归属module (name, providerType)\n> 类似 factory\n> 用于提供一个方法\n\n```\n\nvar app = angular.module('myapp', []).value('testvalue', 'widuu').provider('testprovider',\nfunction() {\n    this.lable = \"this will output : hello widuu\";\n    this.$get = function() {\n        return this;\n    }\n});\napp.controller('mytest',\nfunction($scope, testvalue, testprovider) {\n    $scope.test = \"hello \" + testvalue;\n    $scope.output = testprovider.lable;\n});\n\n```\n","slug":"angular/angular-provider","published":1,"updated":"2017-02-06T03:07:20.000Z","_id":"ciytfmmu4002is10oc8573nbo","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>归属module (name, providerType)<br>类似 factory<br>用于提供一个方法</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">var app = angular.module(&apos;myapp&apos;, []).value(&apos;testvalue&apos;, &apos;widuu&apos;).provider(&apos;testprovider&apos;,</div><div class=\"line\">function() &#123;</div><div class=\"line\">    this.lable = &quot;this will output : hello widuu&quot;;</div><div class=\"line\">    this.$get = function() &#123;</div><div class=\"line\">        return this;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">app.controller(&apos;mytest&apos;,</div><div class=\"line\">function($scope, testvalue, testprovider) &#123;</div><div class=\"line\">    $scope.test = &quot;hello &quot; + testvalue;</div><div class=\"line\">    $scope.output = testprovider.lable;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>归属module (name, providerType)<br>类似 factory<br>用于提供一个方法</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">var app = angular.module(&apos;myapp&apos;, []).value(&apos;testvalue&apos;, &apos;widuu&apos;).provider(&apos;testprovider&apos;,</div><div class=\"line\">function() &#123;</div><div class=\"line\">    this.lable = &quot;this will output : hello widuu&quot;;</div><div class=\"line\">    this.$get = function() &#123;</div><div class=\"line\">        return this;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">app.controller(&apos;mytest&apos;,</div><div class=\"line\">function($scope, testvalue, testprovider) &#123;</div><div class=\"line\">    $scope.test = &quot;hello &quot; + testvalue;</div><div class=\"line\">    $scope.output = testprovider.lable;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n"},{"title":"angular-restrict作用","date":"2016-09-10T16:00:00.000Z","_content":"\n\n 'A' 仅匹配属性名字 - 'E' 仅匹配元素名字 - 'AE' 可以匹配到属性名字或者元素名\n \n \n 什么时候使用属性名或元素名呢？ 当创建一个含有自己模板的组件的时候，需要使用元素名，如果仅仅是为已有的元素添加功能的话，使用属性名。\n\n使用元素名做为myCustomer指令是非常正确的决定，因为你不是用一些'customer'行为来点缀元素，而是定义一个具有自己行为的元素作为customer组件。\n","source":"_posts/angular/angular-restrict作用.md","raw":"---\ntitle: angular-restrict作用\ndate: 2016-09-11\ncategories: \n- angular\n---\n\n\n 'A' 仅匹配属性名字 - 'E' 仅匹配元素名字 - 'AE' 可以匹配到属性名字或者元素名\n \n \n 什么时候使用属性名或元素名呢？ 当创建一个含有自己模板的组件的时候，需要使用元素名，如果仅仅是为已有的元素添加功能的话，使用属性名。\n\n使用元素名做为myCustomer指令是非常正确的决定，因为你不是用一些'customer'行为来点缀元素，而是定义一个具有自己行为的元素作为customer组件。\n","slug":"angular/angular-restrict作用","published":1,"updated":"2017-02-06T01:35:35.000Z","_id":"ciytfmmu6002js10o16fw7ci4","comments":1,"layout":"post","photos":[],"link":"","content":"<p> ‘A’ 仅匹配属性名字 - ‘E’ 仅匹配元素名字 - ‘AE’ 可以匹配到属性名字或者元素名</p>\n<p> 什么时候使用属性名或元素名呢？ 当创建一个含有自己模板的组件的时候，需要使用元素名，如果仅仅是为已有的元素添加功能的话，使用属性名。</p>\n<p>使用元素名做为myCustomer指令是非常正确的决定，因为你不是用一些’customer’行为来点缀元素，而是定义一个具有自己行为的元素作为customer组件。</p>\n","excerpt":"","more":"<p> ‘A’ 仅匹配属性名字 - ‘E’ 仅匹配元素名字 - ‘AE’ 可以匹配到属性名字或者元素名</p>\n<p> 什么时候使用属性名或元素名呢？ 当创建一个含有自己模板的组件的时候，需要使用元素名，如果仅仅是为已有的元素添加功能的话，使用属性名。</p>\n<p>使用元素名做为myCustomer指令是非常正确的决定，因为你不是用一些’customer’行为来点缀元素，而是定义一个具有自己行为的元素作为customer组件。</p>\n"},{"title":"angular-service","date":"2016-09-10T16:00:00.000Z","_content":"\n\n> 归属module (name, constructor)\n> 提供一个服务\n> 与factory 相似\n\n```\nvar app = angular.module('myapp', []).value('testvalue', 'widuu').service('testservice',\nfunction(testvalue) {\n    this.lable = function() {\n        return \"this will output:hello \" + testvalue;\n    }\n});\napp.controller('mytest',\nfunction($scope, testvalue, testservice) {\n    $scope.test = \"hello \" + testvalue;\n    $scope.output = testservice.lable();\n});\n\n```\n","source":"_posts/angular/angular-service.md","raw":"---\ntitle: angular-service\ndate: 2016-09-11\ncategories: \n- angular\n---\n\n\n> 归属module (name, constructor)\n> 提供一个服务\n> 与factory 相似\n\n```\nvar app = angular.module('myapp', []).value('testvalue', 'widuu').service('testservice',\nfunction(testvalue) {\n    this.lable = function() {\n        return \"this will output:hello \" + testvalue;\n    }\n});\napp.controller('mytest',\nfunction($scope, testvalue, testservice) {\n    $scope.test = \"hello \" + testvalue;\n    $scope.output = testservice.lable();\n});\n\n```\n","slug":"angular/angular-service","published":1,"updated":"2017-02-06T03:07:41.000Z","_id":"ciytfmmu7002ks10oq4438cm2","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>归属module (name, constructor)<br>提供一个服务<br>与factory 相似</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var app = angular.module(&apos;myapp&apos;, []).value(&apos;testvalue&apos;, &apos;widuu&apos;).service(&apos;testservice&apos;,</div><div class=\"line\">function(testvalue) &#123;</div><div class=\"line\">    this.lable = function() &#123;</div><div class=\"line\">        return &quot;this will output:hello &quot; + testvalue;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">app.controller(&apos;mytest&apos;,</div><div class=\"line\">function($scope, testvalue, testservice) &#123;</div><div class=\"line\">    $scope.test = &quot;hello &quot; + testvalue;</div><div class=\"line\">    $scope.output = testservice.lable();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>归属module (name, constructor)<br>提供一个服务<br>与factory 相似</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var app = angular.module(&apos;myapp&apos;, []).value(&apos;testvalue&apos;, &apos;widuu&apos;).service(&apos;testservice&apos;,</div><div class=\"line\">function(testvalue) &#123;</div><div class=\"line\">    this.lable = function() &#123;</div><div class=\"line\">        return &quot;this will output:hello &quot; + testvalue;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">app.controller(&apos;mytest&apos;,</div><div class=\"line\">function($scope, testvalue, testservice) &#123;</div><div class=\"line\">    $scope.test = &quot;hello &quot; + testvalue;</div><div class=\"line\">    $scope.output = testservice.lable();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n"},{"title":"angular-value","date":"2016-09-10T16:00:00.000Z","_content":"\n\n> 是module的方法\n> 类似键值对的感觉\n> 存储值\n\n\n```\n<body ng-app='myapp' ng-controller='mytest'>\n  <input ng-model='test'>{{test}}</body>\n\n```\n\n\n```\nvar app = angular.module('myapp', []).value('testvalue', 'word');\napp.controller('mytest',\nfunction($scope, testvalue) {\n    $scope.test = \"hello \" + testvalue;\n});\n\n```\n","source":"_posts/angular/angular-value.md","raw":"---\ntitle: angular-value\ndate: 2016-09-11\ncategories: \n- angular\n---\n\n\n> 是module的方法\n> 类似键值对的感觉\n> 存储值\n\n\n```\n<body ng-app='myapp' ng-controller='mytest'>\n  <input ng-model='test'>{{test}}</body>\n\n```\n\n\n```\nvar app = angular.module('myapp', []).value('testvalue', 'word');\napp.controller('mytest',\nfunction($scope, testvalue) {\n    $scope.test = \"hello \" + testvalue;\n});\n\n```\n","slug":"angular/angular-value","published":1,"updated":"2017-02-06T03:09:05.000Z","_id":"ciytfmmu8002ms10o42zut5mx","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>是module的方法<br>类似键值对的感觉<br>存储值</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body ng-app=&apos;myapp&apos; ng-controller=&apos;mytest&apos;&gt;</div><div class=\"line\">  &lt;input ng-model=&apos;test&apos;&gt;&#123;&#123;test&#125;&#125;&lt;/body&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var app = angular.module(&apos;myapp&apos;, []).value(&apos;testvalue&apos;, &apos;word&apos;);</div><div class=\"line\">app.controller(&apos;mytest&apos;,</div><div class=\"line\">function($scope, testvalue) &#123;</div><div class=\"line\">    $scope.test = &quot;hello &quot; + testvalue;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>是module的方法<br>类似键值对的感觉<br>存储值</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body ng-app=&apos;myapp&apos; ng-controller=&apos;mytest&apos;&gt;</div><div class=\"line\">  &lt;input ng-model=&apos;test&apos;&gt;&#123;&#123;test&#125;&#125;&lt;/body&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var app = angular.module(&apos;myapp&apos;, []).value(&apos;testvalue&apos;, &apos;word&apos;);</div><div class=\"line\">app.controller(&apos;mytest&apos;,</div><div class=\"line\">function($scope, testvalue) &#123;</div><div class=\"line\">    $scope.test = &quot;hello &quot; + testvalue;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n"},{"title":"angular-事件绑定","date":"2016-09-10T16:00:00.000Z","_content":"\n\n```\nng-change\nng-click\nng-dblclick\nng-mousedown\nng-mouseenter\nng-mouseleave\nng-mousemove\nng-mouseover\nng-mouseup\nng-submit\n```\n\n对于事件对象本身，在函数调用时可以直接使用 $event 进行传递：\n```\n<p ng-click=\"click($event)\">点击</p>\n<p ng-click=\"click($event.target)\">点击</p>\n```\n","source":"_posts/angular/angular-事件绑定.md","raw":"---\ntitle: angular-事件绑定\ndate: 2016-09-11\ncategories: \n- angular\n---\n\n\n```\nng-change\nng-click\nng-dblclick\nng-mousedown\nng-mouseenter\nng-mouseleave\nng-mousemove\nng-mouseover\nng-mouseup\nng-submit\n```\n\n对于事件对象本身，在函数调用时可以直接使用 $event 进行传递：\n```\n<p ng-click=\"click($event)\">点击</p>\n<p ng-click=\"click($event.target)\">点击</p>\n```\n","slug":"angular/angular-事件绑定","published":1,"updated":"2017-02-06T01:35:16.000Z","_id":"ciytfmmu9002os10of98dxovk","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng-change</div><div class=\"line\">ng-click</div><div class=\"line\">ng-dblclick</div><div class=\"line\">ng-mousedown</div><div class=\"line\">ng-mouseenter</div><div class=\"line\">ng-mouseleave</div><div class=\"line\">ng-mousemove</div><div class=\"line\">ng-mouseover</div><div class=\"line\">ng-mouseup</div><div class=\"line\">ng-submit</div></pre></td></tr></table></figure>\n<p>对于事件对象本身，在函数调用时可以直接使用 $event 进行传递：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;p ng-click=&quot;click($event)&quot;&gt;点击&lt;/p&gt;</div><div class=\"line\">&lt;p ng-click=&quot;click($event.target)&quot;&gt;点击&lt;/p&gt;</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng-change</div><div class=\"line\">ng-click</div><div class=\"line\">ng-dblclick</div><div class=\"line\">ng-mousedown</div><div class=\"line\">ng-mouseenter</div><div class=\"line\">ng-mouseleave</div><div class=\"line\">ng-mousemove</div><div class=\"line\">ng-mouseover</div><div class=\"line\">ng-mouseup</div><div class=\"line\">ng-submit</div></pre></td></tr></table></figure>\n<p>对于事件对象本身，在函数调用时可以直接使用 $event 进行传递：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;p ng-click=&quot;click($event)&quot;&gt;点击&lt;/p&gt;</div><div class=\"line\">&lt;p ng-click=&quot;click($event.target)&quot;&gt;点击&lt;/p&gt;</div></pre></td></tr></table></figure></p>\n"},{"title":"angular-入门","date":"2016-09-10T16:00:00.000Z","_content":"\n\n```\n<!doctype html>\n<html lang=\"zh\" ng-app>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>demo</title>\n</head>\n<body>\nYour name: <input type=\"text\" ng-model=\"yourname\" placeholder=\"World\">\n<hr>\nHello {{yourname || 'xudaolong'}}!\n<script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.5.6/angular.min.js\"></script>\n</body>\n</html>\n```\n","source":"_posts/angular/angular-入门.md","raw":"---\ntitle: angular-入门\ndate: 2016-09-11\ncategories: \n- angular\n---\n\n\n```\n<!doctype html>\n<html lang=\"zh\" ng-app>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>demo</title>\n</head>\n<body>\nYour name: <input type=\"text\" ng-model=\"yourname\" placeholder=\"World\">\n<hr>\nHello {{yourname || 'xudaolong'}}!\n<script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.5.6/angular.min.js\"></script>\n</body>\n</html>\n```\n","slug":"angular/angular-入门","published":1,"updated":"2017-02-06T01:35:11.000Z","_id":"ciytfmmua002qs10o6an0h4oo","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!doctype html&gt;</div><div class=\"line\">&lt;html lang=&quot;zh&quot; ng-app&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;demo&lt;/title&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">Your name: &lt;input type=&quot;text&quot; ng-model=&quot;yourname&quot; placeholder=&quot;World&quot;&gt;</div><div class=\"line\">&lt;hr&gt;</div><div class=\"line\">Hello &#123;&#123;yourname || &apos;xudaolong&apos;&#125;&#125;!</div><div class=\"line\">&lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.5.6/angular.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!doctype html&gt;</div><div class=\"line\">&lt;html lang=&quot;zh&quot; ng-app&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;demo&lt;/title&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">Your name: &lt;input type=&quot;text&quot; ng-model=&quot;yourname&quot; placeholder=&quot;World&quot;&gt;</div><div class=\"line\">&lt;hr&gt;</div><div class=\"line\">Hello &#123;&#123;yourname || &apos;xudaolong&apos;&#125;&#125;!</div><div class=\"line\">&lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.5.6/angular.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n"},{"title":"angular-创建自定义指令","date":"2016-09-10T16:00:00.000Z","_content":"\n\n> 检测是否内嵌表达式=>watches,在digest循环中更新\n$interpolate\n<a ng-href=\"img/{{username}}.jpg\">Hello {{username}}!</a>\n\n> 优先返回对象而不是函数\n\n> 优先保留你自己的指令作为前缀\n\n> 模板扩展的指令:但是标签名是无效的\n\n对应的html:\n```\n<div my-customer></div>\n\n.directive('myCustomer', function() {\n    return {\n      template: 'Name: {{customer.name}} Address: {{customer.address}}'\n    };\n });\n ```\n\n若是大量的模板的:\n```\n<div my-customer></div>\n\n.directive('myCustomer', function() {\n    return {\n      restrict: 'E',\n      templateUrl: 'my-customer.html'\n    };\n });\n ```\n\n// my-customer.html\nName: {{customer.name}} Address: {{customer.address}}\n","source":"_posts/angular/angular-创建自定义指令.md","raw":"---\ntitle: angular-创建自定义指令\ndate: 2016-09-11\ncategories: \n- angular\n---\n\n\n> 检测是否内嵌表达式=>watches,在digest循环中更新\n$interpolate\n<a ng-href=\"img/{{username}}.jpg\">Hello {{username}}!</a>\n\n> 优先返回对象而不是函数\n\n> 优先保留你自己的指令作为前缀\n\n> 模板扩展的指令:但是标签名是无效的\n\n对应的html:\n```\n<div my-customer></div>\n\n.directive('myCustomer', function() {\n    return {\n      template: 'Name: {{customer.name}} Address: {{customer.address}}'\n    };\n });\n ```\n\n若是大量的模板的:\n```\n<div my-customer></div>\n\n.directive('myCustomer', function() {\n    return {\n      restrict: 'E',\n      templateUrl: 'my-customer.html'\n    };\n });\n ```\n\n// my-customer.html\nName: {{customer.name}} Address: {{customer.address}}\n","slug":"angular/angular-创建自定义指令","published":1,"updated":"2017-02-06T03:09:05.000Z","_id":"ciytfmmub002ss10oxer3jyp1","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>检测是否内嵌表达式=&gt;watches,在digest循环中更新<br>$interpolate<br><a ng-href=\"img/.jpg\">Hello !</a></p>\n<p>优先返回对象而不是函数</p>\n<p>优先保留你自己的指令作为前缀</p>\n<p>模板扩展的指令:但是标签名是无效的</p>\n</blockquote>\n<p>对应的html:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div my-customer&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">.directive(&apos;myCustomer&apos;, function() &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">      template: &apos;Name: &#123;&#123;customer.name&#125;&#125; Address: &#123;&#123;customer.address&#125;&#125;&apos;</div><div class=\"line\">    &#125;;</div><div class=\"line\"> &#125;);</div></pre></td></tr></table></figure></p>\n<p>若是大量的模板的:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div my-customer&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">.directive(&apos;myCustomer&apos;, function() &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">      restrict: &apos;E&apos;,</div><div class=\"line\">      templateUrl: &apos;my-customer.html&apos;</div><div class=\"line\">    &#125;;</div><div class=\"line\"> &#125;);</div></pre></td></tr></table></figure></p>\n<p>// my-customer.html<br>Name:  Address: </p>\n","excerpt":"","more":"<blockquote>\n<p>检测是否内嵌表达式=&gt;watches,在digest循环中更新<br>$interpolate<br><a ng-href=\"img/.jpg\">Hello !</a></p>\n<p>优先返回对象而不是函数</p>\n<p>优先保留你自己的指令作为前缀</p>\n<p>模板扩展的指令:但是标签名是无效的</p>\n</blockquote>\n<p>对应的html:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div my-customer&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">.directive(&apos;myCustomer&apos;, function() &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">      template: &apos;Name: &#123;&#123;customer.name&#125;&#125; Address: &#123;&#123;customer.address&#125;&#125;&apos;</div><div class=\"line\">    &#125;;</div><div class=\"line\"> &#125;);</div></pre></td></tr></table></figure></p>\n<p>若是大量的模板的:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div my-customer&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">.directive(&apos;myCustomer&apos;, function() &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">      restrict: &apos;E&apos;,</div><div class=\"line\">      templateUrl: &apos;my-customer.html&apos;</div><div class=\"line\">    &#125;;</div><div class=\"line\"> &#125;);</div></pre></td></tr></table></figure></p>\n<p>// my-customer.html<br>Name:  Address: </p>\n"},{"title":"angular-包含","date":"2016-09-10T16:00:00.000Z","_content":"\n\n> 感觉有点类似自定义指定\n\n<div ng-include=\"'myUsers_List.htm'\"></div>\n<div ng-include=\"'myUsers_Form.htm'\"></div>\n","source":"_posts/angular/angular-包含.md","raw":"---\ntitle: angular-包含\ndate: 2016-09-11\ncategories: \n- angular\n---\n\n\n> 感觉有点类似自定义指定\n\n<div ng-include=\"'myUsers_List.htm'\"></div>\n<div ng-include=\"'myUsers_Form.htm'\"></div>\n","slug":"angular/angular-包含","published":1,"updated":"2017-02-06T03:09:05.000Z","_id":"ciytfmmuc002us10oz8w8ssy6","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>感觉有点类似自定义指定</p>\n</blockquote>\n<div ng-include=\"'myUsers_List.htm'\"></div><br><div ng-include=\"'myUsers_Form.htm'\"></div>\n","excerpt":"","more":"<blockquote>\n<p>感觉有点类似自定义指定</p>\n</blockquote>\n<div ng-include=\"'myUsers_List.htm'\"></div><br><div ng-include=\"'myUsers_Form.htm'\"></div>\n"},{"title":"angular-扩展html","date":"2016-09-10T16:00:00.000Z","_content":"\n\n1.先定义了模块,在选择选择器\n\n指令:\n\n> ng-app\nangular模块作用域\n\n> ng-model\n标签变量\n\n\n\n组合指令:\n\n> ng-init\n初始化变量\n\n> ng-bind\n{{name}}\n\n\n> ng-controller\nangular控制器\n","source":"_posts/angular/angular-扩展html.md","raw":"---\ntitle: angular-扩展html\ndate: 2016-09-11\ncategories: \n- angular\n---\n\n\n1.先定义了模块,在选择选择器\n\n指令:\n\n> ng-app\nangular模块作用域\n\n> ng-model\n标签变量\n\n\n\n组合指令:\n\n> ng-init\n初始化变量\n\n> ng-bind\n{{name}}\n\n\n> ng-controller\nangular控制器\n","slug":"angular/angular-扩展html","published":1,"updated":"2017-02-06T03:09:05.000Z","_id":"ciytfmmue002ws10oohxmgpav","comments":1,"layout":"post","photos":[],"link":"","content":"<p>1.先定义了模块,在选择选择器</p>\n<p>指令:</p>\n<blockquote>\n<p>ng-app<br>angular模块作用域</p>\n<p>ng-model<br>标签变量</p>\n</blockquote>\n<p>组合指令:</p>\n<blockquote>\n<p>ng-init<br>初始化变量</p>\n<p>ng-bind<br></p>\n<p>ng-controller<br>angular控制器</p>\n</blockquote>\n","excerpt":"","more":"<p>1.先定义了模块,在选择选择器</p>\n<p>指令:</p>\n<blockquote>\n<p>ng-app<br>angular模块作用域</p>\n<p>ng-model<br>标签变量</p>\n</blockquote>\n<p>组合指令:</p>\n<blockquote>\n<p>ng-init<br>初始化变量</p>\n<p>ng-bind<br></p>\n<p>ng-controller<br>angular控制器</p>\n</blockquote>\n"},{"title":"angular-控件间的传值","date":"2016-09-10T16:00:00.000Z","_content":"\n\n> 基于原型继承\n\n> 父类的更改会触发所有的子类,子类的修改只会自身\n\n```\n<div ng-controller=\"Sandcrawler\" ng-app>\n    <p>Location: {{location}}</p>\n    <button ng-click=\"move('Mos Eisley South')\">Move</button>\n    <div ng-controller=\"Droid\">\n        <p>Location: {{location}}</p>\n        <button ng-click=\"sell('Owen Farm')\">Sell</button>\n    </div>\n</div>\n```\n\n\n```\nfunction Sandcrawler($scope) {\n    $scope.location = \"Mos Eisley North\";\n    $scope.move = function(newLocation) {\n        $scope.location = newLocation;\n    }\n}\nfunction Droid($scope) {\n    $scope.sell = function(newLocation) {\n        $scope.location = newLocation;\n    }\n}\n```\n\n\n> 基于事件的方式\n\n> on 注册事件 并由 emit 触发\n\n向上\n\n```\n<div ng-controller=\"Sandcrawler\" ng-app>\n    <p>Sandcrawler Location: {{location}}</p>\n    <div ng-controller=\"Droid\">\n        <p>Droid Location: {{location}}</p>\n        <button ng-click=\"summon()\">Summon Sandcrawler</button>\n    </div>\n</div>\n```\n\n\n```\nfunction Sandcrawler($scope) {\n    $scope.location = \"Mos Eisley North\";\n    $scope.$on('summon', function(e, newLocation) {\n        $scope.location = newLocation;\n    });\n}\nfunction Droid($scope) {\n    $scope.location = \"Owen Farm\";\n    $scope.summon = function() {\n        $scope.$emit('summon', $scope.location);\n    }\n}\n```\n\n> 向下\n\n```\nfunction Sandcrawler($scope) {\n    $scope.location = \"Mos Eisley North\";\n    $scope.recall = function() {\n        $scope.$broadcast('recall', $scope.location);\n    }\n}\nfunction Droid($scope) {\n    $scope.location = \"Owen Farm\";\n    $scope.$on('recall', function(e, newLocation) {\n        $scope.location = newLocation;\n    });\n}\n```\n\n```\n//html\n<div ng-controller=\"Sandcrawler\">\n    <p>Sandcrawler Location: {{location}}</p>\n    <button ng-click=\"recall()\">Recall Droids</button>\n    <div ng-controller=\"Droid\">\n        <p>Droid Location: {{location}}</p>\n    </div>\n</div>\n```\n\n> 兄弟之间的传播\n\n```\nfunction Sandcrawler($scope) {\n    $scope.$on('requestDroidRecall', function(e) {\n        $scope.$broadcast('executeDroidRecall');\n    });\n}\nfunction Droid($scope) {\n    $scope.location = \"Owen Farm\";\n    $scope.recallAllDroids = function() {\n        $scope.$emit('requestDroidRecall');\n    }\n    $scope.$on('executeDroidRecall', function() { \n        $scope.location = \"Sandcrawler\"\n    });\n}\n```\n\n```\n// html\n<div ng-controller=\"Sandcrawler\">\n    <div ng-controller=\"Droid\">\n        <h2>R2-D2</h2>\n        <p>Droid Location: {{location}}</p>\n        <button ng-click=\"recallAddDroids()\">Recall All Droids</button>\n    </div>\n    <div ng-controller=\"Droid\">\n        <h2>C-3PO</h2>\n        <p>Droid Location: {{status}}</p>\n        <button ng-click=\"recallAddDroids()\">Recall All Droids</button>\n    </div>\n</div>\n```\n","source":"_posts/angular/angular-控件间的传值.md","raw":"---\ntitle: angular-控件间的传值\ndate: 2016-09-11\ncategories: \n- angular\n---\n\n\n> 基于原型继承\n\n> 父类的更改会触发所有的子类,子类的修改只会自身\n\n```\n<div ng-controller=\"Sandcrawler\" ng-app>\n    <p>Location: {{location}}</p>\n    <button ng-click=\"move('Mos Eisley South')\">Move</button>\n    <div ng-controller=\"Droid\">\n        <p>Location: {{location}}</p>\n        <button ng-click=\"sell('Owen Farm')\">Sell</button>\n    </div>\n</div>\n```\n\n\n```\nfunction Sandcrawler($scope) {\n    $scope.location = \"Mos Eisley North\";\n    $scope.move = function(newLocation) {\n        $scope.location = newLocation;\n    }\n}\nfunction Droid($scope) {\n    $scope.sell = function(newLocation) {\n        $scope.location = newLocation;\n    }\n}\n```\n\n\n> 基于事件的方式\n\n> on 注册事件 并由 emit 触发\n\n向上\n\n```\n<div ng-controller=\"Sandcrawler\" ng-app>\n    <p>Sandcrawler Location: {{location}}</p>\n    <div ng-controller=\"Droid\">\n        <p>Droid Location: {{location}}</p>\n        <button ng-click=\"summon()\">Summon Sandcrawler</button>\n    </div>\n</div>\n```\n\n\n```\nfunction Sandcrawler($scope) {\n    $scope.location = \"Mos Eisley North\";\n    $scope.$on('summon', function(e, newLocation) {\n        $scope.location = newLocation;\n    });\n}\nfunction Droid($scope) {\n    $scope.location = \"Owen Farm\";\n    $scope.summon = function() {\n        $scope.$emit('summon', $scope.location);\n    }\n}\n```\n\n> 向下\n\n```\nfunction Sandcrawler($scope) {\n    $scope.location = \"Mos Eisley North\";\n    $scope.recall = function() {\n        $scope.$broadcast('recall', $scope.location);\n    }\n}\nfunction Droid($scope) {\n    $scope.location = \"Owen Farm\";\n    $scope.$on('recall', function(e, newLocation) {\n        $scope.location = newLocation;\n    });\n}\n```\n\n```\n//html\n<div ng-controller=\"Sandcrawler\">\n    <p>Sandcrawler Location: {{location}}</p>\n    <button ng-click=\"recall()\">Recall Droids</button>\n    <div ng-controller=\"Droid\">\n        <p>Droid Location: {{location}}</p>\n    </div>\n</div>\n```\n\n> 兄弟之间的传播\n\n```\nfunction Sandcrawler($scope) {\n    $scope.$on('requestDroidRecall', function(e) {\n        $scope.$broadcast('executeDroidRecall');\n    });\n}\nfunction Droid($scope) {\n    $scope.location = \"Owen Farm\";\n    $scope.recallAllDroids = function() {\n        $scope.$emit('requestDroidRecall');\n    }\n    $scope.$on('executeDroidRecall', function() { \n        $scope.location = \"Sandcrawler\"\n    });\n}\n```\n\n```\n// html\n<div ng-controller=\"Sandcrawler\">\n    <div ng-controller=\"Droid\">\n        <h2>R2-D2</h2>\n        <p>Droid Location: {{location}}</p>\n        <button ng-click=\"recallAddDroids()\">Recall All Droids</button>\n    </div>\n    <div ng-controller=\"Droid\">\n        <h2>C-3PO</h2>\n        <p>Droid Location: {{status}}</p>\n        <button ng-click=\"recallAddDroids()\">Recall All Droids</button>\n    </div>\n</div>\n```\n","slug":"angular/angular-控件间的传值","published":1,"updated":"2017-02-06T03:09:05.000Z","_id":"ciytfmmuf002ys10or92733ug","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>基于原型继承</p>\n<p>父类的更改会触发所有的子类,子类的修改只会自身</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-controller=&quot;Sandcrawler&quot; ng-app&gt;</div><div class=\"line\">    &lt;p&gt;Location: &#123;&#123;location&#125;&#125;&lt;/p&gt;</div><div class=\"line\">    &lt;button ng-click=&quot;move(&apos;Mos Eisley South&apos;)&quot;&gt;Move&lt;/button&gt;</div><div class=\"line\">    &lt;div ng-controller=&quot;Droid&quot;&gt;</div><div class=\"line\">        &lt;p&gt;Location: &#123;&#123;location&#125;&#125;&lt;/p&gt;</div><div class=\"line\">        &lt;button ng-click=&quot;sell(&apos;Owen Farm&apos;)&quot;&gt;Sell&lt;/button&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Sandcrawler($scope) &#123;</div><div class=\"line\">    $scope.location = &quot;Mos Eisley North&quot;;</div><div class=\"line\">    $scope.move = function(newLocation) &#123;</div><div class=\"line\">        $scope.location = newLocation;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">function Droid($scope) &#123;</div><div class=\"line\">    $scope.sell = function(newLocation) &#123;</div><div class=\"line\">        $scope.location = newLocation;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>基于事件的方式</p>\n<p>on 注册事件 并由 emit 触发</p>\n</blockquote>\n<p>向上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-controller=&quot;Sandcrawler&quot; ng-app&gt;</div><div class=\"line\">    &lt;p&gt;Sandcrawler Location: &#123;&#123;location&#125;&#125;&lt;/p&gt;</div><div class=\"line\">    &lt;div ng-controller=&quot;Droid&quot;&gt;</div><div class=\"line\">        &lt;p&gt;Droid Location: &#123;&#123;location&#125;&#125;&lt;/p&gt;</div><div class=\"line\">        &lt;button ng-click=&quot;summon()&quot;&gt;Summon Sandcrawler&lt;/button&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Sandcrawler($scope) &#123;</div><div class=\"line\">    $scope.location = &quot;Mos Eisley North&quot;;</div><div class=\"line\">    $scope.$on(&apos;summon&apos;, function(e, newLocation) &#123;</div><div class=\"line\">        $scope.location = newLocation;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\">function Droid($scope) &#123;</div><div class=\"line\">    $scope.location = &quot;Owen Farm&quot;;</div><div class=\"line\">    $scope.summon = function() &#123;</div><div class=\"line\">        $scope.$emit(&apos;summon&apos;, $scope.location);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>向下</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Sandcrawler($scope) &#123;</div><div class=\"line\">    $scope.location = &quot;Mos Eisley North&quot;;</div><div class=\"line\">    $scope.recall = function() &#123;</div><div class=\"line\">        $scope.$broadcast(&apos;recall&apos;, $scope.location);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">function Droid($scope) &#123;</div><div class=\"line\">    $scope.location = &quot;Owen Farm&quot;;</div><div class=\"line\">    $scope.$on(&apos;recall&apos;, function(e, newLocation) &#123;</div><div class=\"line\">        $scope.location = newLocation;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">//html</div><div class=\"line\">&lt;div ng-controller=&quot;Sandcrawler&quot;&gt;</div><div class=\"line\">    &lt;p&gt;Sandcrawler Location: &#123;&#123;location&#125;&#125;&lt;/p&gt;</div><div class=\"line\">    &lt;button ng-click=&quot;recall()&quot;&gt;Recall Droids&lt;/button&gt;</div><div class=\"line\">    &lt;div ng-controller=&quot;Droid&quot;&gt;</div><div class=\"line\">        &lt;p&gt;Droid Location: &#123;&#123;location&#125;&#125;&lt;/p&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>兄弟之间的传播</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Sandcrawler($scope) &#123;</div><div class=\"line\">    $scope.$on(&apos;requestDroidRecall&apos;, function(e) &#123;</div><div class=\"line\">        $scope.$broadcast(&apos;executeDroidRecall&apos;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\">function Droid($scope) &#123;</div><div class=\"line\">    $scope.location = &quot;Owen Farm&quot;;</div><div class=\"line\">    $scope.recallAllDroids = function() &#123;</div><div class=\"line\">        $scope.$emit(&apos;requestDroidRecall&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    $scope.$on(&apos;executeDroidRecall&apos;, function() &#123; </div><div class=\"line\">        $scope.location = &quot;Sandcrawler&quot;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html</div><div class=\"line\">&lt;div ng-controller=&quot;Sandcrawler&quot;&gt;</div><div class=\"line\">    &lt;div ng-controller=&quot;Droid&quot;&gt;</div><div class=\"line\">        &lt;h2&gt;R2-D2&lt;/h2&gt;</div><div class=\"line\">        &lt;p&gt;Droid Location: &#123;&#123;location&#125;&#125;&lt;/p&gt;</div><div class=\"line\">        &lt;button ng-click=&quot;recallAddDroids()&quot;&gt;Recall All Droids&lt;/button&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">    &lt;div ng-controller=&quot;Droid&quot;&gt;</div><div class=\"line\">        &lt;h2&gt;C-3PO&lt;/h2&gt;</div><div class=\"line\">        &lt;p&gt;Droid Location: &#123;&#123;status&#125;&#125;&lt;/p&gt;</div><div class=\"line\">        &lt;button ng-click=&quot;recallAddDroids()&quot;&gt;Recall All Droids&lt;/button&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>基于原型继承</p>\n<p>父类的更改会触发所有的子类,子类的修改只会自身</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-controller=&quot;Sandcrawler&quot; ng-app&gt;</div><div class=\"line\">    &lt;p&gt;Location: &#123;&#123;location&#125;&#125;&lt;/p&gt;</div><div class=\"line\">    &lt;button ng-click=&quot;move(&apos;Mos Eisley South&apos;)&quot;&gt;Move&lt;/button&gt;</div><div class=\"line\">    &lt;div ng-controller=&quot;Droid&quot;&gt;</div><div class=\"line\">        &lt;p&gt;Location: &#123;&#123;location&#125;&#125;&lt;/p&gt;</div><div class=\"line\">        &lt;button ng-click=&quot;sell(&apos;Owen Farm&apos;)&quot;&gt;Sell&lt;/button&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Sandcrawler($scope) &#123;</div><div class=\"line\">    $scope.location = &quot;Mos Eisley North&quot;;</div><div class=\"line\">    $scope.move = function(newLocation) &#123;</div><div class=\"line\">        $scope.location = newLocation;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">function Droid($scope) &#123;</div><div class=\"line\">    $scope.sell = function(newLocation) &#123;</div><div class=\"line\">        $scope.location = newLocation;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>基于事件的方式</p>\n<p>on 注册事件 并由 emit 触发</p>\n</blockquote>\n<p>向上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-controller=&quot;Sandcrawler&quot; ng-app&gt;</div><div class=\"line\">    &lt;p&gt;Sandcrawler Location: &#123;&#123;location&#125;&#125;&lt;/p&gt;</div><div class=\"line\">    &lt;div ng-controller=&quot;Droid&quot;&gt;</div><div class=\"line\">        &lt;p&gt;Droid Location: &#123;&#123;location&#125;&#125;&lt;/p&gt;</div><div class=\"line\">        &lt;button ng-click=&quot;summon()&quot;&gt;Summon Sandcrawler&lt;/button&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Sandcrawler($scope) &#123;</div><div class=\"line\">    $scope.location = &quot;Mos Eisley North&quot;;</div><div class=\"line\">    $scope.$on(&apos;summon&apos;, function(e, newLocation) &#123;</div><div class=\"line\">        $scope.location = newLocation;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\">function Droid($scope) &#123;</div><div class=\"line\">    $scope.location = &quot;Owen Farm&quot;;</div><div class=\"line\">    $scope.summon = function() &#123;</div><div class=\"line\">        $scope.$emit(&apos;summon&apos;, $scope.location);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>向下</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Sandcrawler($scope) &#123;</div><div class=\"line\">    $scope.location = &quot;Mos Eisley North&quot;;</div><div class=\"line\">    $scope.recall = function() &#123;</div><div class=\"line\">        $scope.$broadcast(&apos;recall&apos;, $scope.location);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">function Droid($scope) &#123;</div><div class=\"line\">    $scope.location = &quot;Owen Farm&quot;;</div><div class=\"line\">    $scope.$on(&apos;recall&apos;, function(e, newLocation) &#123;</div><div class=\"line\">        $scope.location = newLocation;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">//html</div><div class=\"line\">&lt;div ng-controller=&quot;Sandcrawler&quot;&gt;</div><div class=\"line\">    &lt;p&gt;Sandcrawler Location: &#123;&#123;location&#125;&#125;&lt;/p&gt;</div><div class=\"line\">    &lt;button ng-click=&quot;recall()&quot;&gt;Recall Droids&lt;/button&gt;</div><div class=\"line\">    &lt;div ng-controller=&quot;Droid&quot;&gt;</div><div class=\"line\">        &lt;p&gt;Droid Location: &#123;&#123;location&#125;&#125;&lt;/p&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>兄弟之间的传播</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Sandcrawler($scope) &#123;</div><div class=\"line\">    $scope.$on(&apos;requestDroidRecall&apos;, function(e) &#123;</div><div class=\"line\">        $scope.$broadcast(&apos;executeDroidRecall&apos;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\">function Droid($scope) &#123;</div><div class=\"line\">    $scope.location = &quot;Owen Farm&quot;;</div><div class=\"line\">    $scope.recallAllDroids = function() &#123;</div><div class=\"line\">        $scope.$emit(&apos;requestDroidRecall&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    $scope.$on(&apos;executeDroidRecall&apos;, function() &#123; </div><div class=\"line\">        $scope.location = &quot;Sandcrawler&quot;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html</div><div class=\"line\">&lt;div ng-controller=&quot;Sandcrawler&quot;&gt;</div><div class=\"line\">    &lt;div ng-controller=&quot;Droid&quot;&gt;</div><div class=\"line\">        &lt;h2&gt;R2-D2&lt;/h2&gt;</div><div class=\"line\">        &lt;p&gt;Droid Location: &#123;&#123;location&#125;&#125;&lt;/p&gt;</div><div class=\"line\">        &lt;button ng-click=&quot;recallAddDroids()&quot;&gt;Recall All Droids&lt;/button&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">    &lt;div ng-controller=&quot;Droid&quot;&gt;</div><div class=\"line\">        &lt;h2&gt;C-3PO&lt;/h2&gt;</div><div class=\"line\">        &lt;p&gt;Droid Location: &#123;&#123;status&#125;&#125;&lt;/p&gt;</div><div class=\"line\">        &lt;button ng-click=&quot;recallAddDroids()&quot;&gt;Recall All Droids&lt;/button&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n"},{"title":"angular-模板内容、方式","date":"2016-09-10T16:00:00.000Z","_content":"\n\n> 模板内容、方式\n\n在需要的地方直接写字符串\n\n外部文件\n\n```\n<div ng-include src=\"'tpl.html'\">\n</div>\n\n<div ng-include=\"'tpl.html'\">\n</div>\n```\n\n使用 script 标签定义的“内部文件”\n\n```\n<script type=\"text/ng-template\" id=\"tpl\">\nhere, {{ 1 + 1 }}\n</script>\n\n<div ng-include src=\"'tpl'\"></div>\n```\n\n配合变量使用\n```\n<script type=\"text/ng-template\" id=\"tpl\">\nhere, {{ 1 + 1 }}\n</script>\n\n<a ng-click=\"v='tpl'\">Load</a>\n<div ng-include src=\"v\"></div>\n```\n","source":"_posts/angular/angular-模板内容、方式.md","raw":"---\ntitle: angular-模板内容、方式\ndate: 2016-09-11\ncategories: \n- angular\n---\n\n\n> 模板内容、方式\n\n在需要的地方直接写字符串\n\n外部文件\n\n```\n<div ng-include src=\"'tpl.html'\">\n</div>\n\n<div ng-include=\"'tpl.html'\">\n</div>\n```\n\n使用 script 标签定义的“内部文件”\n\n```\n<script type=\"text/ng-template\" id=\"tpl\">\nhere, {{ 1 + 1 }}\n</script>\n\n<div ng-include src=\"'tpl'\"></div>\n```\n\n配合变量使用\n```\n<script type=\"text/ng-template\" id=\"tpl\">\nhere, {{ 1 + 1 }}\n</script>\n\n<a ng-click=\"v='tpl'\">Load</a>\n<div ng-include src=\"v\"></div>\n```\n","slug":"angular/angular-模板内容、方式","published":1,"updated":"2017-02-06T03:09:05.000Z","_id":"ciytfmmug0030s10ola4f7rgr","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>模板内容、方式</p>\n</blockquote>\n<p>在需要的地方直接写字符串</p>\n<p>外部文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-include src=&quot;&apos;tpl.html&apos;&quot;&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;div ng-include=&quot;&apos;tpl.html&apos;&quot;&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>使用 script 标签定义的“内部文件”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=&quot;text/ng-template&quot; id=&quot;tpl&quot;&gt;</div><div class=\"line\">here, &#123;&#123; 1 + 1 &#125;&#125;</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;div ng-include src=&quot;&apos;tpl&apos;&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>配合变量使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=&quot;text/ng-template&quot; id=&quot;tpl&quot;&gt;</div><div class=\"line\">here, &#123;&#123; 1 + 1 &#125;&#125;</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;a ng-click=&quot;v=&apos;tpl&apos;&quot;&gt;Load&lt;/a&gt;</div><div class=\"line\">&lt;div ng-include src=&quot;v&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<blockquote>\n<p>模板内容、方式</p>\n</blockquote>\n<p>在需要的地方直接写字符串</p>\n<p>外部文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-include src=&quot;&apos;tpl.html&apos;&quot;&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;div ng-include=&quot;&apos;tpl.html&apos;&quot;&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>使用 script 标签定义的“内部文件”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=&quot;text/ng-template&quot; id=&quot;tpl&quot;&gt;</div><div class=\"line\">here, &#123;&#123; 1 + 1 &#125;&#125;</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;div ng-include src=&quot;&apos;tpl&apos;&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>配合变量使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=&quot;text/ng-template&quot; id=&quot;tpl&quot;&gt;</div><div class=\"line\">here, &#123;&#123; 1 + 1 &#125;&#125;</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;a ng-click=&quot;v=&apos;tpl&apos;&quot;&gt;Load&lt;/a&gt;</div><div class=\"line\">&lt;div ng-include src=&quot;v&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n"},{"title":"angular-模板节点控制","date":"2016-09-10T16:00:00.000Z","_content":"\n\n> 样式\n```\n<div ng-style=\"{width: 100 + 'px', height: 100 + 'px', backgroundColor: 'red'}\">\n</div>\n```\n\n> 类\n\n```\n<div ng-controller=\"TestCtrl\" ng-class=\"cls\">\n</div>\n```\n\n> 显示和隐藏\n```ng-show ng-hide ng-switch```\n\n前两个是控制 display 的指令：\n\n```\n<div ng-show=\"true\">1</div>\n<div ng-show=\"false\">2</div>\n<div ng-hide=\"true\">3</div>\n<div ng-hide=\"false\">4</div>\n```\n\n后一个 ng-switch 是根据一个值来决定哪个节点显示，其它节点移除：\n\n```\n<div ng-init=\"a=2\">\n  <ul ng-switch on=\"a\">\n    <li ng-switch-when=\"1\">1</li>\n    <li ng-switch-when=\"2\">2</li>\n    <li ng-switch-default>other</li>\n  </ul>\n</div>\n```\n\n# 其他属性 \n\nng-src 控制 src 属性：\n\n```\n<img ng-src=\"{{ 'h' + 'ead.png' }}\" />\n```\n\nng-href 控制 href 属性：\n\n```\n<a ng-href=\"{{ '#' + '123' }}\">here</a>\n```\n\nng-src src属性\nng-href href属性\nng-checked 选中状态\nng-selected 被选择状态\nng-disabled 禁用状态\nng-multiple 多选状态\nng-readonly 只读状态\n\n","source":"_posts/angular/angular-模板节点控制.md","raw":"---\ntitle: angular-模板节点控制\ndate: 2016-09-11\ncategories: \n- angular\n---\n\n\n> 样式\n```\n<div ng-style=\"{width: 100 + 'px', height: 100 + 'px', backgroundColor: 'red'}\">\n</div>\n```\n\n> 类\n\n```\n<div ng-controller=\"TestCtrl\" ng-class=\"cls\">\n</div>\n```\n\n> 显示和隐藏\n```ng-show ng-hide ng-switch```\n\n前两个是控制 display 的指令：\n\n```\n<div ng-show=\"true\">1</div>\n<div ng-show=\"false\">2</div>\n<div ng-hide=\"true\">3</div>\n<div ng-hide=\"false\">4</div>\n```\n\n后一个 ng-switch 是根据一个值来决定哪个节点显示，其它节点移除：\n\n```\n<div ng-init=\"a=2\">\n  <ul ng-switch on=\"a\">\n    <li ng-switch-when=\"1\">1</li>\n    <li ng-switch-when=\"2\">2</li>\n    <li ng-switch-default>other</li>\n  </ul>\n</div>\n```\n\n# 其他属性 \n\nng-src 控制 src 属性：\n\n```\n<img ng-src=\"{{ 'h' + 'ead.png' }}\" />\n```\n\nng-href 控制 href 属性：\n\n```\n<a ng-href=\"{{ '#' + '123' }}\">here</a>\n```\n\nng-src src属性\nng-href href属性\nng-checked 选中状态\nng-selected 被选择状态\nng-disabled 禁用状态\nng-multiple 多选状态\nng-readonly 只读状态\n\n","slug":"angular/angular-模板节点控制","published":1,"updated":"2017-02-06T03:09:05.000Z","_id":"ciytfmmuh0032s10ok3lhi2m0","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>样式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-style=&quot;&#123;width: 100 + &apos;px&apos;, height: 100 + &apos;px&apos;, backgroundColor: &apos;red&apos;&#125;&quot;&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>类</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-controller=&quot;TestCtrl&quot; ng-class=&quot;cls&quot;&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>显示和隐藏<br><figure class=\"highlight plain\"><figcaption><span>ng-hide ng-switch```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">前两个是控制 display 的指令：</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p><div ng-show=\"true\">1</div></p>\n<p><div ng-show=\"false\">2</div></p>\n<p><div ng-hide=\"true\">3</div></p>\n<p><div ng-hide=\"false\">4</div><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">后一个 ng-switch 是根据一个值来决定哪个节点显示，其它节点移除：</div></pre></td></tr></table></figure></p>\n<p><div ng-init=\"a=2\"><br>  <ul ng-switch=\"\" on=\"a\"><br>    <li ng-switch-when=\"1\">1</li><br>    <li ng-switch-when=\"2\">2</li><br>    <li ng-switch-default=\"\">other</li><br>  </ul><br></div><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"># 其他属性 </div><div class=\"line\"></div><div class=\"line\">ng-src 控制 src 属性：</div></pre></td></tr></table></figure></p>\n<p><img ng-src=\"head.png\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">ng-href 控制 href 属性：</div></pre></td></tr></table></figure></p>\n<p><a ng-href=\"#123\">here</a><br>```</p>\n<p>ng-src src属性<br>ng-href href属性<br>ng-checked 选中状态<br>ng-selected 被选择状态<br>ng-disabled 禁用状态<br>ng-multiple 多选状态<br>ng-readonly 只读状态</p>\n","excerpt":"","more":"<blockquote>\n<p>样式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-style=&quot;&#123;width: 100 + &apos;px&apos;, height: 100 + &apos;px&apos;, backgroundColor: &apos;red&apos;&#125;&quot;&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>类</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-controller=&quot;TestCtrl&quot; ng-class=&quot;cls&quot;&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>显示和隐藏<br><figure class=\"highlight plain\"><figcaption><span>ng-hide ng-switch```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">前两个是控制 display 的指令：</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p><div ng-show=\"true\">1</div></p>\n<p><div ng-show=\"false\">2</div></p>\n<p><div ng-hide=\"true\">3</div></p>\n<p><div ng-hide=\"false\">4</div><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">后一个 ng-switch 是根据一个值来决定哪个节点显示，其它节点移除：</div></pre></td></tr></table></figure></p>\n<p><div ng-init=\"a=2\"><br>  <ul ng-switch on=\"a\"><br>    <li ng-switch-when=\"1\">1</li><br>    <li ng-switch-when=\"2\">2</li><br>    <li ng-switch-default>other</li><br>  </ul><br></div><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"># 其他属性 </div><div class=\"line\"></div><div class=\"line\">ng-src 控制 src 属性：</div></pre></td></tr></table></figure></p>\n<p><img ng-src=\"head.png\" /><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">ng-href 控制 href 属性：</div></pre></td></tr></table></figure></p>\n<p><a ng-href=\"#123\">here</a><br>```</p>\n<p>ng-src src属性<br>ng-href href属性<br>ng-checked 选中状态<br>ng-selected 被选择状态<br>ng-disabled 禁用状态<br>ng-multiple 多选状态<br>ng-readonly 只读状态</p>\n"},{"title":"angular-获取列表中的值","date":"2016-09-10T16:00:00.000Z","_content":"\n\n```\n<li ng-repeat=\"tag in tags\">\n        <span ng-click=\"onSelect(tag)\">{{tag.name}}</span>\n</li>\n\n\n\n        $scope.onSelect=function(tag){\n            $scope.selectedTag=tag.name;//将单击的值赋给$scope.selectedTag\n            console.log(tag.name);\n            console.log($scope.selectedTag)\n        }\n```\n","source":"_posts/angular/angular-获取列表中的值.md","raw":"---\ntitle: angular-获取列表中的值\ndate: 2016-09-11\ncategories: \n- angular\n---\n\n\n```\n<li ng-repeat=\"tag in tags\">\n        <span ng-click=\"onSelect(tag)\">{{tag.name}}</span>\n</li>\n\n\n\n        $scope.onSelect=function(tag){\n            $scope.selectedTag=tag.name;//将单击的值赋给$scope.selectedTag\n            console.log(tag.name);\n            console.log($scope.selectedTag)\n        }\n```\n","slug":"angular/angular-获取列表中的值","published":1,"updated":"2017-02-06T01:34:08.000Z","_id":"ciytfmmui0034s10oab30wzpx","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;li ng-repeat=&quot;tag in tags&quot;&gt;</div><div class=\"line\">        &lt;span ng-click=&quot;onSelect(tag)&quot;&gt;&#123;&#123;tag.name&#125;&#125;&lt;/span&gt;</div><div class=\"line\">&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        $scope.onSelect=function(tag)&#123;</div><div class=\"line\">            $scope.selectedTag=tag.name;//将单击的值赋给$scope.selectedTag</div><div class=\"line\">            console.log(tag.name);</div><div class=\"line\">            console.log($scope.selectedTag)</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;li ng-repeat=&quot;tag in tags&quot;&gt;</div><div class=\"line\">        &lt;span ng-click=&quot;onSelect(tag)&quot;&gt;&#123;&#123;tag.name&#125;&#125;&lt;/span&gt;</div><div class=\"line\">&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        $scope.onSelect=function(tag)&#123;</div><div class=\"line\">            $scope.selectedTag=tag.name;//将单击的值赋给$scope.selectedTag</div><div class=\"line\">            console.log(tag.name);</div><div class=\"line\">            console.log($scope.selectedTag)</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n"},{"title":"angular-模板内容渲染","date":"2016-09-10T16:00:00.000Z","_content":"\n\n> 重复\n\n```\n$index 当前索引\n$first 是否为头元素\n$middle 是否为非头非尾元素\n$last 是否为尾元素\n```\n\n例子一:\n```\n<div ng-controller=\"TestCtrl\">\n  <ul ng-repeat=\"member in obj_list\">\n    <li>{{ member }}</li>\n  </ul>\n</div>\n```\n\n```\nangular.module('app', [], angular.noop)\n.controller('TestCtrl', function($scope){\n    $scope.obj_list = [1,2,3,4];\n});\nangular.bootstrap(document.documentElement, ['app']);\n```\n\n例子二:\n```\n<div ng-controller=\"TestCtrl\">\n  <ul ng-repeat=\"member in obj_list\">\n    <li>{{ $index }}, {{ member.name }}</li>\n  </ul>\n</div>\n```\n\n```\nangular.module('app', [], angular.noop)\n.controller('TestCtrl', function($scope){\n    $scope.obj_list = [{name: 'A'}, {name: 'B'}, {name: 'C'}];\n});\nangular.bootstrap(document.documentElement, ['app']);\n```\n\n> 奇偶\nng-class-even 和 ng-class-odd 是和 ng-repeat 配合使用的：\n\n```\n<ul ng-init=\"l=[1,2,3,4]\">\n  <li ng-class-odd=\"'odd'\" ng-class-even=\"'even'\" ng-repeat=\"m in l\">{{ m }}</li>\n</ul>\n```\n\n> 赋值\n\n```\n<div ng-controller=\"TestCtrl\" ng-init=\"a=[1,2,3,4];\">\n  <ul ng-repeat=\"member in a\">\n    <li>{{ member }}</li>\n  </ul>\n</div>\n```\n\n","source":"_posts/angular/angular-模板内容渲染.md","raw":"---\ntitle: angular-模板内容渲染\ndate: 2016-09-11\ncategories: \n- angular\n---\n\n\n> 重复\n\n```\n$index 当前索引\n$first 是否为头元素\n$middle 是否为非头非尾元素\n$last 是否为尾元素\n```\n\n例子一:\n```\n<div ng-controller=\"TestCtrl\">\n  <ul ng-repeat=\"member in obj_list\">\n    <li>{{ member }}</li>\n  </ul>\n</div>\n```\n\n```\nangular.module('app', [], angular.noop)\n.controller('TestCtrl', function($scope){\n    $scope.obj_list = [1,2,3,4];\n});\nangular.bootstrap(document.documentElement, ['app']);\n```\n\n例子二:\n```\n<div ng-controller=\"TestCtrl\">\n  <ul ng-repeat=\"member in obj_list\">\n    <li>{{ $index }}, {{ member.name }}</li>\n  </ul>\n</div>\n```\n\n```\nangular.module('app', [], angular.noop)\n.controller('TestCtrl', function($scope){\n    $scope.obj_list = [{name: 'A'}, {name: 'B'}, {name: 'C'}];\n});\nangular.bootstrap(document.documentElement, ['app']);\n```\n\n> 奇偶\nng-class-even 和 ng-class-odd 是和 ng-repeat 配合使用的：\n\n```\n<ul ng-init=\"l=[1,2,3,4]\">\n  <li ng-class-odd=\"'odd'\" ng-class-even=\"'even'\" ng-repeat=\"m in l\">{{ m }}</li>\n</ul>\n```\n\n> 赋值\n\n```\n<div ng-controller=\"TestCtrl\" ng-init=\"a=[1,2,3,4];\">\n  <ul ng-repeat=\"member in a\">\n    <li>{{ member }}</li>\n  </ul>\n</div>\n```\n\n","slug":"angular/angular-模板内容渲染","published":1,"updated":"2017-02-06T03:09:05.000Z","_id":"ciytfmmui0036s10ov041s42s","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>重复</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$index 当前索引</div><div class=\"line\">$first 是否为头元素</div><div class=\"line\">$middle 是否为非头非尾元素</div><div class=\"line\">$last 是否为尾元素</div></pre></td></tr></table></figure>\n<p>例子一:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-controller=&quot;TestCtrl&quot;&gt;</div><div class=\"line\">  &lt;ul ng-repeat=&quot;member in obj_list&quot;&gt;</div><div class=\"line\">    &lt;li&gt;&#123;&#123; member &#125;&#125;&lt;/li&gt;</div><div class=\"line\">  &lt;/ul&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(&apos;app&apos;, [], angular.noop)</div><div class=\"line\">.controller(&apos;TestCtrl&apos;, function($scope)&#123;</div><div class=\"line\">    $scope.obj_list = [1,2,3,4];</div><div class=\"line\">&#125;);</div><div class=\"line\">angular.bootstrap(document.documentElement, [&apos;app&apos;]);</div></pre></td></tr></table></figure>\n<p>例子二:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-controller=&quot;TestCtrl&quot;&gt;</div><div class=\"line\">  &lt;ul ng-repeat=&quot;member in obj_list&quot;&gt;</div><div class=\"line\">    &lt;li&gt;&#123;&#123; $index &#125;&#125;, &#123;&#123; member.name &#125;&#125;&lt;/li&gt;</div><div class=\"line\">  &lt;/ul&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(&apos;app&apos;, [], angular.noop)</div><div class=\"line\">.controller(&apos;TestCtrl&apos;, function($scope)&#123;</div><div class=\"line\">    $scope.obj_list = [&#123;name: &apos;A&apos;&#125;, &#123;name: &apos;B&apos;&#125;, &#123;name: &apos;C&apos;&#125;];</div><div class=\"line\">&#125;);</div><div class=\"line\">angular.bootstrap(document.documentElement, [&apos;app&apos;]);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>奇偶<br>ng-class-even 和 ng-class-odd 是和 ng-repeat 配合使用的：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ul ng-init=&quot;l=[1,2,3,4]&quot;&gt;</div><div class=\"line\">  &lt;li ng-class-odd=&quot;&apos;odd&apos;&quot; ng-class-even=&quot;&apos;even&apos;&quot; ng-repeat=&quot;m in l&quot;&gt;&#123;&#123; m &#125;&#125;&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>赋值</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-controller=&quot;TestCtrl&quot; ng-init=&quot;a=[1,2,3,4];&quot;&gt;</div><div class=\"line\">  &lt;ul ng-repeat=&quot;member in a&quot;&gt;</div><div class=\"line\">    &lt;li&gt;&#123;&#123; member &#125;&#125;&lt;/li&gt;</div><div class=\"line\">  &lt;/ul&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>重复</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$index 当前索引</div><div class=\"line\">$first 是否为头元素</div><div class=\"line\">$middle 是否为非头非尾元素</div><div class=\"line\">$last 是否为尾元素</div></pre></td></tr></table></figure>\n<p>例子一:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-controller=&quot;TestCtrl&quot;&gt;</div><div class=\"line\">  &lt;ul ng-repeat=&quot;member in obj_list&quot;&gt;</div><div class=\"line\">    &lt;li&gt;&#123;&#123; member &#125;&#125;&lt;/li&gt;</div><div class=\"line\">  &lt;/ul&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(&apos;app&apos;, [], angular.noop)</div><div class=\"line\">.controller(&apos;TestCtrl&apos;, function($scope)&#123;</div><div class=\"line\">    $scope.obj_list = [1,2,3,4];</div><div class=\"line\">&#125;);</div><div class=\"line\">angular.bootstrap(document.documentElement, [&apos;app&apos;]);</div></pre></td></tr></table></figure>\n<p>例子二:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-controller=&quot;TestCtrl&quot;&gt;</div><div class=\"line\">  &lt;ul ng-repeat=&quot;member in obj_list&quot;&gt;</div><div class=\"line\">    &lt;li&gt;&#123;&#123; $index &#125;&#125;, &#123;&#123; member.name &#125;&#125;&lt;/li&gt;</div><div class=\"line\">  &lt;/ul&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(&apos;app&apos;, [], angular.noop)</div><div class=\"line\">.controller(&apos;TestCtrl&apos;, function($scope)&#123;</div><div class=\"line\">    $scope.obj_list = [&#123;name: &apos;A&apos;&#125;, &#123;name: &apos;B&apos;&#125;, &#123;name: &apos;C&apos;&#125;];</div><div class=\"line\">&#125;);</div><div class=\"line\">angular.bootstrap(document.documentElement, [&apos;app&apos;]);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>奇偶<br>ng-class-even 和 ng-class-odd 是和 ng-repeat 配合使用的：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ul ng-init=&quot;l=[1,2,3,4]&quot;&gt;</div><div class=\"line\">  &lt;li ng-class-odd=&quot;&apos;odd&apos;&quot; ng-class-even=&quot;&apos;even&apos;&quot; ng-repeat=&quot;m in l&quot;&gt;&#123;&#123; m &#125;&#125;&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>赋值</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-controller=&quot;TestCtrl&quot; ng-init=&quot;a=[1,2,3,4];&quot;&gt;</div><div class=\"line\">  &lt;ul ng-repeat=&quot;member in a&quot;&gt;</div><div class=\"line\">    &lt;li&gt;&#123;&#123; member &#125;&#125;&lt;/li&gt;</div><div class=\"line\">  &lt;/ul&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n"},{"title":"angular-自定义指令","date":"2016-09-10T16:00:00.000Z","_content":"\n\n> 指令使用如下,由restrict控制\n \n```\nE 元素方式 <my-directive></my-directive>\nA 属性方式 <div my-directive=\"exp\"> </div>\nC 类方式 <div class=\"my-directive: exp;\"></div>\nM 注释方式 <!-- directive: my-directive exp -->\n```\n\n> 指令执行过程: 解析DOM结构-->$compile-->执行link函数\n\n$compile 涉及: 变量占位符-指令-compile函数\n\n> 指令的构造应该返回对象,若是函数则是作为compile的返回值\n\n```\nname:controller的名字\npriority:权重,决定兄弟节点的执行compile的顺序\nterminal:若为true,则权重小于但不等于的该节点的节点不会被执行.\nscope:false 节点的 scope ， true 继承创建一个新的 scope ， {} 不继承创建一个新的隔离 scope 。 {@attr: '引用节点属性', =attr: '把节点属性值引用成scope属性值', &attr: '把节点属性值包装成函数'}\ncontroller:为指令自定义一个controller,function controller($scope, $element, $attrs, $transclude) { ... }\nrequire:?name 忽略不存在的错误， ^name 在父级查找\nrestrict\ntemplate:模板内容\ntemplateUrl:模板地址\nreplace:true 替换整个节点， false 替换节点内容\ntransclude:'element' 或 true 两种值 \ncompile\nlink\n```\n\n> 关于动态渲染修改变量\n\n```\napp.directive('color', function(){\n  var link = function($scope, $element, $attrs){\n    $scope.$watch($attrs.color, function(new_v){\n      $element.css('color', new_v);\n    });\n  }\n  return link;\n});\n```\n\n> attributes对象\n\n```\n$element 属性所在的节点。\n$attr 所有的属性值（类型是对象）。\n$normalize 一个名字标准化的工具函数，可以把 ng-click 变成 ngClick 。\n$observe 为属性注册侦听器的函数。\n$set 设置对象属性，及节点属性的工具。\n```\n\n\n","source":"_posts/angular/angular-自定义指令.md","raw":"---\ntitle: angular-自定义指令\ndate: 2016-09-11\ncategories: \n- angular\n---\n\n\n> 指令使用如下,由restrict控制\n \n```\nE 元素方式 <my-directive></my-directive>\nA 属性方式 <div my-directive=\"exp\"> </div>\nC 类方式 <div class=\"my-directive: exp;\"></div>\nM 注释方式 <!-- directive: my-directive exp -->\n```\n\n> 指令执行过程: 解析DOM结构-->$compile-->执行link函数\n\n$compile 涉及: 变量占位符-指令-compile函数\n\n> 指令的构造应该返回对象,若是函数则是作为compile的返回值\n\n```\nname:controller的名字\npriority:权重,决定兄弟节点的执行compile的顺序\nterminal:若为true,则权重小于但不等于的该节点的节点不会被执行.\nscope:false 节点的 scope ， true 继承创建一个新的 scope ， {} 不继承创建一个新的隔离 scope 。 {@attr: '引用节点属性', =attr: '把节点属性值引用成scope属性值', &attr: '把节点属性值包装成函数'}\ncontroller:为指令自定义一个controller,function controller($scope, $element, $attrs, $transclude) { ... }\nrequire:?name 忽略不存在的错误， ^name 在父级查找\nrestrict\ntemplate:模板内容\ntemplateUrl:模板地址\nreplace:true 替换整个节点， false 替换节点内容\ntransclude:'element' 或 true 两种值 \ncompile\nlink\n```\n\n> 关于动态渲染修改变量\n\n```\napp.directive('color', function(){\n  var link = function($scope, $element, $attrs){\n    $scope.$watch($attrs.color, function(new_v){\n      $element.css('color', new_v);\n    });\n  }\n  return link;\n});\n```\n\n> attributes对象\n\n```\n$element 属性所在的节点。\n$attr 所有的属性值（类型是对象）。\n$normalize 一个名字标准化的工具函数，可以把 ng-click 变成 ngClick 。\n$observe 为属性注册侦听器的函数。\n$set 设置对象属性，及节点属性的工具。\n```\n\n\n","slug":"angular/angular-自定义指令","published":1,"updated":"2017-02-06T03:09:05.000Z","_id":"ciytfmmuj0038s10oooygw0h1","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>指令使用如下,由restrict控制</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">E 元素方式 &lt;my-directive&gt;&lt;/my-directive&gt;</div><div class=\"line\">A 属性方式 &lt;div my-directive=&quot;exp&quot;&gt; &lt;/div&gt;</div><div class=\"line\">C 类方式 &lt;div class=&quot;my-directive: exp;&quot;&gt;&lt;/div&gt;</div><div class=\"line\">M 注释方式 &lt;!-- directive: my-directive exp --&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>指令执行过程: 解析DOM结构–&gt;$compile–&gt;执行link函数</p>\n</blockquote>\n<p>$compile 涉及: 变量占位符-指令-compile函数</p>\n<blockquote>\n<p>指令的构造应该返回对象,若是函数则是作为compile的返回值</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">name:controller的名字</div><div class=\"line\">priority:权重,决定兄弟节点的执行compile的顺序</div><div class=\"line\">terminal:若为true,则权重小于但不等于的该节点的节点不会被执行.</div><div class=\"line\">scope:false 节点的 scope ， true 继承创建一个新的 scope ， &#123;&#125; 不继承创建一个新的隔离 scope 。 &#123;@attr: &apos;引用节点属性&apos;, =attr: &apos;把节点属性值引用成scope属性值&apos;, &amp;attr: &apos;把节点属性值包装成函数&apos;&#125;</div><div class=\"line\">controller:为指令自定义一个controller,function controller($scope, $element, $attrs, $transclude) &#123; ... &#125;</div><div class=\"line\">require:?name 忽略不存在的错误， ^name 在父级查找</div><div class=\"line\">restrict</div><div class=\"line\">template:模板内容</div><div class=\"line\">templateUrl:模板地址</div><div class=\"line\">replace:true 替换整个节点， false 替换节点内容</div><div class=\"line\">transclude:&apos;element&apos; 或 true 两种值 </div><div class=\"line\">compile</div><div class=\"line\">link</div></pre></td></tr></table></figure>\n<blockquote>\n<p>关于动态渲染修改变量</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.directive(&apos;color&apos;, function()&#123;</div><div class=\"line\">  var link = function($scope, $element, $attrs)&#123;</div><div class=\"line\">    $scope.$watch($attrs.color, function(new_v)&#123;</div><div class=\"line\">      $element.css(&apos;color&apos;, new_v);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">  return link;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>attributes对象</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$element 属性所在的节点。</div><div class=\"line\">$attr 所有的属性值（类型是对象）。</div><div class=\"line\">$normalize 一个名字标准化的工具函数，可以把 ng-click 变成 ngClick 。</div><div class=\"line\">$observe 为属性注册侦听器的函数。</div><div class=\"line\">$set 设置对象属性，及节点属性的工具。</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>指令使用如下,由restrict控制</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">E 元素方式 &lt;my-directive&gt;&lt;/my-directive&gt;</div><div class=\"line\">A 属性方式 &lt;div my-directive=&quot;exp&quot;&gt; &lt;/div&gt;</div><div class=\"line\">C 类方式 &lt;div class=&quot;my-directive: exp;&quot;&gt;&lt;/div&gt;</div><div class=\"line\">M 注释方式 &lt;!-- directive: my-directive exp --&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>指令执行过程: 解析DOM结构–&gt;$compile–&gt;执行link函数</p>\n</blockquote>\n<p>$compile 涉及: 变量占位符-指令-compile函数</p>\n<blockquote>\n<p>指令的构造应该返回对象,若是函数则是作为compile的返回值</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">name:controller的名字</div><div class=\"line\">priority:权重,决定兄弟节点的执行compile的顺序</div><div class=\"line\">terminal:若为true,则权重小于但不等于的该节点的节点不会被执行.</div><div class=\"line\">scope:false 节点的 scope ， true 继承创建一个新的 scope ， &#123;&#125; 不继承创建一个新的隔离 scope 。 &#123;@attr: &apos;引用节点属性&apos;, =attr: &apos;把节点属性值引用成scope属性值&apos;, &amp;attr: &apos;把节点属性值包装成函数&apos;&#125;</div><div class=\"line\">controller:为指令自定义一个controller,function controller($scope, $element, $attrs, $transclude) &#123; ... &#125;</div><div class=\"line\">require:?name 忽略不存在的错误， ^name 在父级查找</div><div class=\"line\">restrict</div><div class=\"line\">template:模板内容</div><div class=\"line\">templateUrl:模板地址</div><div class=\"line\">replace:true 替换整个节点， false 替换节点内容</div><div class=\"line\">transclude:&apos;element&apos; 或 true 两种值 </div><div class=\"line\">compile</div><div class=\"line\">link</div></pre></td></tr></table></figure>\n<blockquote>\n<p>关于动态渲染修改变量</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.directive(&apos;color&apos;, function()&#123;</div><div class=\"line\">  var link = function($scope, $element, $attrs)&#123;</div><div class=\"line\">    $scope.$watch($attrs.color, function(new_v)&#123;</div><div class=\"line\">      $element.css(&apos;color&apos;, new_v);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">  return link;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>attributes对象</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$element 属性所在的节点。</div><div class=\"line\">$attr 所有的属性值（类型是对象）。</div><div class=\"line\">$normalize 一个名字标准化的工具函数，可以把 ng-click 变成 ngClick 。</div><div class=\"line\">$observe 为属性注册侦听器的函数。</div><div class=\"line\">$set 设置对象属性，及节点属性的工具。</div></pre></td></tr></table></figure>\n"},{"title":"angular-隔离指令的作用域","date":"2016-09-10T16:00:00.000Z","_content":"\n\n> 避免重复使用controller\n\n> solate scope \n\n```\nvar app = angular.module('myApp', []);\n\napp.controller('Ctrl', function($scope) {\n    $scope.naomi = {\n      name: 'Naomi',\n      address: '1600 Amphitheatre'\n    };\n    $scope.igor = {\n      name: 'Igor',\n      address: '123 Somewhere'\n    };\n  })\n  .directive('myCustomer', function() {\n    return {\n      restrict: 'E',\n      scope: {\n        customer: '=customer'\n      },\n      template: 'Name: {{customer.name}} Address: {{customer.address}}'\n    };\n  });\n\n\n\n<body ng-app=\"myApp\">\n  <div ng-controller=\"Ctrl\">\n    <my-customer customer=\"naomi\"></my-customer>\n    <hr>\n    <my-customer customer=\"igor\"></my-customer>\n  </div>\n</body>\n```\n\n关键在于:\n\n```\nscope: {\n  customer: '=customer'\n},\n```\n\n简化:\n\n```\nscope: {\n  // same as '=customer'\n  customer: '='\n},\n```\n","source":"_posts/angular/angular-隔离指令的作用域.md","raw":"---\ntitle: angular-隔离指令的作用域\ndate: 2016-09-11\ncategories: \n- angular\n---\n\n\n> 避免重复使用controller\n\n> solate scope \n\n```\nvar app = angular.module('myApp', []);\n\napp.controller('Ctrl', function($scope) {\n    $scope.naomi = {\n      name: 'Naomi',\n      address: '1600 Amphitheatre'\n    };\n    $scope.igor = {\n      name: 'Igor',\n      address: '123 Somewhere'\n    };\n  })\n  .directive('myCustomer', function() {\n    return {\n      restrict: 'E',\n      scope: {\n        customer: '=customer'\n      },\n      template: 'Name: {{customer.name}} Address: {{customer.address}}'\n    };\n  });\n\n\n\n<body ng-app=\"myApp\">\n  <div ng-controller=\"Ctrl\">\n    <my-customer customer=\"naomi\"></my-customer>\n    <hr>\n    <my-customer customer=\"igor\"></my-customer>\n  </div>\n</body>\n```\n\n关键在于:\n\n```\nscope: {\n  customer: '=customer'\n},\n```\n\n简化:\n\n```\nscope: {\n  // same as '=customer'\n  customer: '='\n},\n```\n","slug":"angular/angular-隔离指令的作用域","published":1,"updated":"2017-02-06T03:09:05.000Z","_id":"ciytfmmuk003as10o9bhho38i","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>避免重复使用controller</p>\n<p>solate scope </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">var app = angular.module(&apos;myApp&apos;, []);</div><div class=\"line\"></div><div class=\"line\">app.controller(&apos;Ctrl&apos;, function($scope) &#123;</div><div class=\"line\">    $scope.naomi = &#123;</div><div class=\"line\">      name: &apos;Naomi&apos;,</div><div class=\"line\">      address: &apos;1600 Amphitheatre&apos;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    $scope.igor = &#123;</div><div class=\"line\">      name: &apos;Igor&apos;,</div><div class=\"line\">      address: &apos;123 Somewhere&apos;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;)</div><div class=\"line\">  .directive(&apos;myCustomer&apos;, function() &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">      restrict: &apos;E&apos;,</div><div class=\"line\">      scope: &#123;</div><div class=\"line\">        customer: &apos;=customer&apos;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      template: &apos;Name: &#123;&#123;customer.name&#125;&#125; Address: &#123;&#123;customer.address&#125;&#125;&apos;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&lt;body ng-app=&quot;myApp&quot;&gt;</div><div class=\"line\">  &lt;div ng-controller=&quot;Ctrl&quot;&gt;</div><div class=\"line\">    &lt;my-customer customer=&quot;naomi&quot;&gt;&lt;/my-customer&gt;</div><div class=\"line\">    &lt;hr&gt;</div><div class=\"line\">    &lt;my-customer customer=&quot;igor&quot;&gt;&lt;/my-customer&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/body&gt;</div></pre></td></tr></table></figure>\n<p>关键在于:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">scope: &#123;</div><div class=\"line\">  customer: &apos;=customer&apos;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<p>简化:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">scope: &#123;</div><div class=\"line\">  // same as &apos;=customer&apos;</div><div class=\"line\">  customer: &apos;=&apos;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>避免重复使用controller</p>\n<p>solate scope </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">var app = angular.module(&apos;myApp&apos;, []);</div><div class=\"line\"></div><div class=\"line\">app.controller(&apos;Ctrl&apos;, function($scope) &#123;</div><div class=\"line\">    $scope.naomi = &#123;</div><div class=\"line\">      name: &apos;Naomi&apos;,</div><div class=\"line\">      address: &apos;1600 Amphitheatre&apos;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    $scope.igor = &#123;</div><div class=\"line\">      name: &apos;Igor&apos;,</div><div class=\"line\">      address: &apos;123 Somewhere&apos;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;)</div><div class=\"line\">  .directive(&apos;myCustomer&apos;, function() &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">      restrict: &apos;E&apos;,</div><div class=\"line\">      scope: &#123;</div><div class=\"line\">        customer: &apos;=customer&apos;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      template: &apos;Name: &#123;&#123;customer.name&#125;&#125; Address: &#123;&#123;customer.address&#125;&#125;&apos;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&lt;body ng-app=&quot;myApp&quot;&gt;</div><div class=\"line\">  &lt;div ng-controller=&quot;Ctrl&quot;&gt;</div><div class=\"line\">    &lt;my-customer customer=&quot;naomi&quot;&gt;&lt;/my-customer&gt;</div><div class=\"line\">    &lt;hr&gt;</div><div class=\"line\">    &lt;my-customer customer=&quot;igor&quot;&gt;&lt;/my-customer&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/body&gt;</div></pre></td></tr></table></figure>\n<p>关键在于:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">scope: &#123;</div><div class=\"line\">  customer: &apos;=customer&apos;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<p>简化:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">scope: &#123;</div><div class=\"line\">  // same as &apos;=customer&apos;</div><div class=\"line\">  customer: &apos;=&apos;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n"},{"title":"angular-表单输入","date":"2016-09-10T16:00:00.000Z","_content":"\n\n> input 的监听事件 ng-change\n\n<form ng-controller=\"StartUpController\">\n     Starting : <input ng-change=\"computeNeeded()\" ng-model=\"funding.startingEstimate\">\n     Recommendation: {{funding.needed}}\n</form>\n\n\n```\nfunction StartUpController($scope) {\n        $scope.funding = { startingEstimate : 0};\n\n        $scope.computeNeeded = function () {\n            $scope.funding.needed = $scope.funding.startingEstimate * 10;\n        }\n    }\n\n```\n\n\n> 检测数据是否变化\n\n```\n$scope.$watch('funding.startingEstimate', computeNeeded);\n```\n","source":"_posts/angular/angular-表单输入.md","raw":"---\ntitle: angular-表单输入\ndate: 2016-09-11\ncategories: \n- angular\n---\n\n\n> input 的监听事件 ng-change\n\n<form ng-controller=\"StartUpController\">\n     Starting : <input ng-change=\"computeNeeded()\" ng-model=\"funding.startingEstimate\">\n     Recommendation: {{funding.needed}}\n</form>\n\n\n```\nfunction StartUpController($scope) {\n        $scope.funding = { startingEstimate : 0};\n\n        $scope.computeNeeded = function () {\n            $scope.funding.needed = $scope.funding.startingEstimate * 10;\n        }\n    }\n\n```\n\n\n> 检测数据是否变化\n\n```\n$scope.$watch('funding.startingEstimate', computeNeeded);\n```\n","slug":"angular/angular-表单输入","published":1,"updated":"2017-02-06T03:09:05.000Z","_id":"ciytfmmun003es10o7pfafma8","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>input 的监听事件 ng-change</p>\n</blockquote>\n<form ng-controller=\"StartUpController\"><br>     Starting : <input ng-change=\"computeNeeded()\" ng-model=\"funding.startingEstimate\"><br>     Recommendation: <br></form>\n\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">function StartUpController($scope) &#123;</div><div class=\"line\">        $scope.funding = &#123; startingEstimate : 0&#125;;</div><div class=\"line\"></div><div class=\"line\">        $scope.computeNeeded = function () &#123;</div><div class=\"line\">            $scope.funding.needed = $scope.funding.startingEstimate * 10;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>检测数据是否变化</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$scope.$watch(&apos;funding.startingEstimate&apos;, computeNeeded);</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>input 的监听事件 ng-change</p>\n</blockquote>\n<form ng-controller=\"StartUpController\"><br>     Starting : <input ng-change=\"computeNeeded()\" ng-model=\"funding.startingEstimate\"><br>     Recommendation: <br></form>\n\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">function StartUpController($scope) &#123;</div><div class=\"line\">        $scope.funding = &#123; startingEstimate : 0&#125;;</div><div class=\"line\"></div><div class=\"line\">        $scope.computeNeeded = function () &#123;</div><div class=\"line\">            $scope.funding.needed = $scope.funding.startingEstimate * 10;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>检测数据是否变化</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$scope.$watch(&apos;funding.startingEstimate&apos;, computeNeeded);</div></pre></td></tr></table></figure>\n"},{"title":"angular-表单","date":"2016-09-10T16:00:00.000Z","_content":"\n\n> 必须 name 和 ng-controller \n> 另外模板中的name便是$scope的层叠组件\n\n例子一:\n\n```\n<form name=\"test_form\" ng-controller=\"TestCtrl\">\n  <input type=\"text\" name=\"a\" required ng-model=\"a\"  />\n  <span ng-click=\"see()\">{{ test_form.$valid }}</span>\n</form>\n\n\nangular.module('app', [], angular.noop)\n.controller('TestCtrl', function($scope){\n  $scope.see = function(){\n    console.log($scope.test_form);\n    console.log($scope.test_form.a);\n  }\n});\n```\n\nform 这个标签本身有一些动态类可以使用：\n\n```\nng-valid 当表单验证通过时的设置\nng-invalid 当表单验证失败时的设置\nng-pristine 表单的未被动之前拥有\nng-dirty 表单被动过之后拥有\n```\n\nform 对象的属性有：\n\n```\n$pristine 表单是否未被动过\n$dirty 表单是否被动过\n$valid 表单是否验证通过\n$invalid 表单是否验证失败\n$error 表单的验证错误\n```\n\n```\n<form name=\"test_form\" ng-controller=\"TestCtrl\">\n  <input type=\"text\" name=\"a\" required ng-model=\"a\"  />\n  <input type=\"text\" name=\"b\" required ng-model=\"b\" ng-minlength=\"2\" />\n  <span ng-click=\"see()\">{{ test_form.$error }}</span>\n</form>\n\n\nangular.module('app', [], angular.noop)\n.controller('TestCtrl', function($scope){\n  $scope.see = function(){\n    console.log($scope.test_form.$error);\n  }\n});\n```\n\ninput 控件的相关可用属性为：\n\n```\nname 名字\nng-model 绑定的数据\nrequired 是否必填\nng-required 是否必填\nng-minlength 最小长度\nng-maxlength 最大长度\nng-pattern 匹配模式\nng-change 值变化时的回调\n```\n\nselect \n\n```\n<form name=\"test_form\" ng-controller=\"TestCtrl\">\n  <input type=\"checkbox\" name=\"a\" ng-model=\"a\" ng-true-value=\"AA\" ng-false-value=\"BB\" />\n  <span>{{ a }}</span>\n</form>\n\nvar TestCtrl = function($scope){\n  $scope.a = 'AA';\n}\n```\n\nradio\n\n```\n<form name=\"test_form\" ng-controller=\"TestCtrl\">\n  <input type=\"radio\" name=\"a\" ng-model=\"a\" value=\"AA\" />\n  <input type=\"radio\" name=\"a\" ng-model=\"a\" value=\"BB\" />\n  <span>{{ a }}</span>\n</form>\n```\n","source":"_posts/angular/angular-表单.md","raw":"---\ntitle: angular-表单\ndate: 2016-09-11\ncategories: \n- angular\n---\n\n\n> 必须 name 和 ng-controller \n> 另外模板中的name便是$scope的层叠组件\n\n例子一:\n\n```\n<form name=\"test_form\" ng-controller=\"TestCtrl\">\n  <input type=\"text\" name=\"a\" required ng-model=\"a\"  />\n  <span ng-click=\"see()\">{{ test_form.$valid }}</span>\n</form>\n\n\nangular.module('app', [], angular.noop)\n.controller('TestCtrl', function($scope){\n  $scope.see = function(){\n    console.log($scope.test_form);\n    console.log($scope.test_form.a);\n  }\n});\n```\n\nform 这个标签本身有一些动态类可以使用：\n\n```\nng-valid 当表单验证通过时的设置\nng-invalid 当表单验证失败时的设置\nng-pristine 表单的未被动之前拥有\nng-dirty 表单被动过之后拥有\n```\n\nform 对象的属性有：\n\n```\n$pristine 表单是否未被动过\n$dirty 表单是否被动过\n$valid 表单是否验证通过\n$invalid 表单是否验证失败\n$error 表单的验证错误\n```\n\n```\n<form name=\"test_form\" ng-controller=\"TestCtrl\">\n  <input type=\"text\" name=\"a\" required ng-model=\"a\"  />\n  <input type=\"text\" name=\"b\" required ng-model=\"b\" ng-minlength=\"2\" />\n  <span ng-click=\"see()\">{{ test_form.$error }}</span>\n</form>\n\n\nangular.module('app', [], angular.noop)\n.controller('TestCtrl', function($scope){\n  $scope.see = function(){\n    console.log($scope.test_form.$error);\n  }\n});\n```\n\ninput 控件的相关可用属性为：\n\n```\nname 名字\nng-model 绑定的数据\nrequired 是否必填\nng-required 是否必填\nng-minlength 最小长度\nng-maxlength 最大长度\nng-pattern 匹配模式\nng-change 值变化时的回调\n```\n\nselect \n\n```\n<form name=\"test_form\" ng-controller=\"TestCtrl\">\n  <input type=\"checkbox\" name=\"a\" ng-model=\"a\" ng-true-value=\"AA\" ng-false-value=\"BB\" />\n  <span>{{ a }}</span>\n</form>\n\nvar TestCtrl = function($scope){\n  $scope.a = 'AA';\n}\n```\n\nradio\n\n```\n<form name=\"test_form\" ng-controller=\"TestCtrl\">\n  <input type=\"radio\" name=\"a\" ng-model=\"a\" value=\"AA\" />\n  <input type=\"radio\" name=\"a\" ng-model=\"a\" value=\"BB\" />\n  <span>{{ a }}</span>\n</form>\n```\n","slug":"angular/angular-表单","published":1,"updated":"2017-02-06T03:09:05.000Z","_id":"ciytfmmun003fs10oj7kjo2re","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>必须 name 和 ng-controller<br>另外模板中的name便是$scope的层叠组件</p>\n</blockquote>\n<p>例子一:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form name=&quot;test_form&quot; ng-controller=&quot;TestCtrl&quot;&gt;</div><div class=\"line\">  &lt;input type=&quot;text&quot; name=&quot;a&quot; required ng-model=&quot;a&quot;  /&gt;</div><div class=\"line\">  &lt;span ng-click=&quot;see()&quot;&gt;&#123;&#123; test_form.$valid &#125;&#125;&lt;/span&gt;</div><div class=\"line\">&lt;/form&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">angular.module(&apos;app&apos;, [], angular.noop)</div><div class=\"line\">.controller(&apos;TestCtrl&apos;, function($scope)&#123;</div><div class=\"line\">  $scope.see = function()&#123;</div><div class=\"line\">    console.log($scope.test_form);</div><div class=\"line\">    console.log($scope.test_form.a);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>form 这个标签本身有一些动态类可以使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng-valid 当表单验证通过时的设置</div><div class=\"line\">ng-invalid 当表单验证失败时的设置</div><div class=\"line\">ng-pristine 表单的未被动之前拥有</div><div class=\"line\">ng-dirty 表单被动过之后拥有</div></pre></td></tr></table></figure>\n<p>form 对象的属性有：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$pristine 表单是否未被动过</div><div class=\"line\">$dirty 表单是否被动过</div><div class=\"line\">$valid 表单是否验证通过</div><div class=\"line\">$invalid 表单是否验证失败</div><div class=\"line\">$error 表单的验证错误</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form name=&quot;test_form&quot; ng-controller=&quot;TestCtrl&quot;&gt;</div><div class=\"line\">  &lt;input type=&quot;text&quot; name=&quot;a&quot; required ng-model=&quot;a&quot;  /&gt;</div><div class=\"line\">  &lt;input type=&quot;text&quot; name=&quot;b&quot; required ng-model=&quot;b&quot; ng-minlength=&quot;2&quot; /&gt;</div><div class=\"line\">  &lt;span ng-click=&quot;see()&quot;&gt;&#123;&#123; test_form.$error &#125;&#125;&lt;/span&gt;</div><div class=\"line\">&lt;/form&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">angular.module(&apos;app&apos;, [], angular.noop)</div><div class=\"line\">.controller(&apos;TestCtrl&apos;, function($scope)&#123;</div><div class=\"line\">  $scope.see = function()&#123;</div><div class=\"line\">    console.log($scope.test_form.$error);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>input 控件的相关可用属性为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">name 名字</div><div class=\"line\">ng-model 绑定的数据</div><div class=\"line\">required 是否必填</div><div class=\"line\">ng-required 是否必填</div><div class=\"line\">ng-minlength 最小长度</div><div class=\"line\">ng-maxlength 最大长度</div><div class=\"line\">ng-pattern 匹配模式</div><div class=\"line\">ng-change 值变化时的回调</div></pre></td></tr></table></figure>\n<p>select </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form name=&quot;test_form&quot; ng-controller=&quot;TestCtrl&quot;&gt;</div><div class=\"line\">  &lt;input type=&quot;checkbox&quot; name=&quot;a&quot; ng-model=&quot;a&quot; ng-true-value=&quot;AA&quot; ng-false-value=&quot;BB&quot; /&gt;</div><div class=\"line\">  &lt;span&gt;&#123;&#123; a &#125;&#125;&lt;/span&gt;</div><div class=\"line\">&lt;/form&gt;</div><div class=\"line\"></div><div class=\"line\">var TestCtrl = function($scope)&#123;</div><div class=\"line\">  $scope.a = &apos;AA&apos;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>radio</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form name=&quot;test_form&quot; ng-controller=&quot;TestCtrl&quot;&gt;</div><div class=\"line\">  &lt;input type=&quot;radio&quot; name=&quot;a&quot; ng-model=&quot;a&quot; value=&quot;AA&quot; /&gt;</div><div class=\"line\">  &lt;input type=&quot;radio&quot; name=&quot;a&quot; ng-model=&quot;a&quot; value=&quot;BB&quot; /&gt;</div><div class=\"line\">  &lt;span&gt;&#123;&#123; a &#125;&#125;&lt;/span&gt;</div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>必须 name 和 ng-controller<br>另外模板中的name便是$scope的层叠组件</p>\n</blockquote>\n<p>例子一:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form name=&quot;test_form&quot; ng-controller=&quot;TestCtrl&quot;&gt;</div><div class=\"line\">  &lt;input type=&quot;text&quot; name=&quot;a&quot; required ng-model=&quot;a&quot;  /&gt;</div><div class=\"line\">  &lt;span ng-click=&quot;see()&quot;&gt;&#123;&#123; test_form.$valid &#125;&#125;&lt;/span&gt;</div><div class=\"line\">&lt;/form&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">angular.module(&apos;app&apos;, [], angular.noop)</div><div class=\"line\">.controller(&apos;TestCtrl&apos;, function($scope)&#123;</div><div class=\"line\">  $scope.see = function()&#123;</div><div class=\"line\">    console.log($scope.test_form);</div><div class=\"line\">    console.log($scope.test_form.a);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>form 这个标签本身有一些动态类可以使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng-valid 当表单验证通过时的设置</div><div class=\"line\">ng-invalid 当表单验证失败时的设置</div><div class=\"line\">ng-pristine 表单的未被动之前拥有</div><div class=\"line\">ng-dirty 表单被动过之后拥有</div></pre></td></tr></table></figure>\n<p>form 对象的属性有：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$pristine 表单是否未被动过</div><div class=\"line\">$dirty 表单是否被动过</div><div class=\"line\">$valid 表单是否验证通过</div><div class=\"line\">$invalid 表单是否验证失败</div><div class=\"line\">$error 表单的验证错误</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form name=&quot;test_form&quot; ng-controller=&quot;TestCtrl&quot;&gt;</div><div class=\"line\">  &lt;input type=&quot;text&quot; name=&quot;a&quot; required ng-model=&quot;a&quot;  /&gt;</div><div class=\"line\">  &lt;input type=&quot;text&quot; name=&quot;b&quot; required ng-model=&quot;b&quot; ng-minlength=&quot;2&quot; /&gt;</div><div class=\"line\">  &lt;span ng-click=&quot;see()&quot;&gt;&#123;&#123; test_form.$error &#125;&#125;&lt;/span&gt;</div><div class=\"line\">&lt;/form&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">angular.module(&apos;app&apos;, [], angular.noop)</div><div class=\"line\">.controller(&apos;TestCtrl&apos;, function($scope)&#123;</div><div class=\"line\">  $scope.see = function()&#123;</div><div class=\"line\">    console.log($scope.test_form.$error);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>input 控件的相关可用属性为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">name 名字</div><div class=\"line\">ng-model 绑定的数据</div><div class=\"line\">required 是否必填</div><div class=\"line\">ng-required 是否必填</div><div class=\"line\">ng-minlength 最小长度</div><div class=\"line\">ng-maxlength 最大长度</div><div class=\"line\">ng-pattern 匹配模式</div><div class=\"line\">ng-change 值变化时的回调</div></pre></td></tr></table></figure>\n<p>select </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form name=&quot;test_form&quot; ng-controller=&quot;TestCtrl&quot;&gt;</div><div class=\"line\">  &lt;input type=&quot;checkbox&quot; name=&quot;a&quot; ng-model=&quot;a&quot; ng-true-value=&quot;AA&quot; ng-false-value=&quot;BB&quot; /&gt;</div><div class=\"line\">  &lt;span&gt;&#123;&#123; a &#125;&#125;&lt;/span&gt;</div><div class=\"line\">&lt;/form&gt;</div><div class=\"line\"></div><div class=\"line\">var TestCtrl = function($scope)&#123;</div><div class=\"line\">  $scope.a = &apos;AA&apos;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>radio</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form name=&quot;test_form&quot; ng-controller=&quot;TestCtrl&quot;&gt;</div><div class=\"line\">  &lt;input type=&quot;radio&quot; name=&quot;a&quot; ng-model=&quot;a&quot; value=&quot;AA&quot; /&gt;</div><div class=\"line\">  &lt;input type=&quot;radio&quot; name=&quot;a&quot; ng-model=&quot;a&quot; value=&quot;BB&quot; /&gt;</div><div class=\"line\">  &lt;span&gt;&#123;&#123; a &#125;&#125;&lt;/span&gt;</div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure>\n"},{"title":"intellj-idea-maven-Web项目-+-tomcat-的搭建","date":"2016-09-10T16:00:00.000Z","_content":"\n> 新入职公司,对公司内部的系统进行搭建,在此进行记录\n\n> 思路如下\n\n``  导入 maven 项目 相关的jar 包-->关联相关的框架 --> 配置tomcat 的处理 ``\n\n> 导入项目,选择maven框架,一直点next\n\n> 进入之后更新jar包,和导入必要的包\n\n\n![下载maven包](http://upload-images.jianshu.io/upload_images/80378-a522c56b975d7f0b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n> 然后添加相关联的框架,如Spring\n\n\n![Spring.png](http://upload-images.jianshu.io/upload_images/80378-914a950a58d6a196.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n> 配置tomcat \n\n![tomcat.png](http://upload-images.jianshu.io/upload_images/80378-e97aa9047f65208f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 点开项目结构,依次步骤\n\n\n![指定classes路径](http://upload-images.jianshu.io/upload_images/80378-fecec8e1a9a14166.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![编译输出class路径](http://upload-images.jianshu.io/upload_images/80378-b57965a47e5cbf08.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![添加TOMCAT以及必要的jar包](http://upload-images.jianshu.io/upload_images/80378-925ff6a2239606c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![设置Artifacts](http://upload-images.jianshu.io/upload_images/80378-95271924955f9926.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/intellj-idea/intellj-idea-maven-Web项目-+-tomcat-的搭建.md","raw":"---\ntitle: intellj-idea-maven-Web项目-+-tomcat-的搭建\ndate: 2016-09-11\ncategories: \n- intellj-idea\n---\n\n> 新入职公司,对公司内部的系统进行搭建,在此进行记录\n\n> 思路如下\n\n``  导入 maven 项目 相关的jar 包-->关联相关的框架 --> 配置tomcat 的处理 ``\n\n> 导入项目,选择maven框架,一直点next\n\n> 进入之后更新jar包,和导入必要的包\n\n\n![下载maven包](http://upload-images.jianshu.io/upload_images/80378-a522c56b975d7f0b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n> 然后添加相关联的框架,如Spring\n\n\n![Spring.png](http://upload-images.jianshu.io/upload_images/80378-914a950a58d6a196.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n> 配置tomcat \n\n![tomcat.png](http://upload-images.jianshu.io/upload_images/80378-e97aa9047f65208f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 点开项目结构,依次步骤\n\n\n![指定classes路径](http://upload-images.jianshu.io/upload_images/80378-fecec8e1a9a14166.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![编译输出class路径](http://upload-images.jianshu.io/upload_images/80378-b57965a47e5cbf08.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![添加TOMCAT以及必要的jar包](http://upload-images.jianshu.io/upload_images/80378-925ff6a2239606c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![设置Artifacts](http://upload-images.jianshu.io/upload_images/80378-95271924955f9926.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"intellj-idea/intellj-idea-maven-Web项目-+-tomcat-的搭建","published":1,"updated":"2017-02-06T02:03:57.000Z","_id":"ciytg3xb4003ks10ow6ffrzb0","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>新入职公司,对公司内部的系统进行搭建,在此进行记录</p>\n<p>思路如下</p>\n</blockquote>\n<p><code>导入 maven 项目 相关的jar 包--&gt;关联相关的框架 --&gt; 配置tomcat 的处理</code></p>\n<blockquote>\n<p>导入项目,选择maven框架,一直点next</p>\n<p>进入之后更新jar包,和导入必要的包</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-a522c56b975d7f0b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"下载maven包\"></p>\n<blockquote>\n<p>然后添加相关联的框架,如Spring</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-914a950a58d6a196.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Spring.png\"></p>\n<blockquote>\n<p>配置tomcat </p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-e97aa9047f65208f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"tomcat.png\"></p>\n<blockquote>\n<p>点开项目结构,依次步骤</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-fecec8e1a9a14166.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"指定classes路径\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-b57965a47e5cbf08.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"编译输出class路径\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-925ff6a2239606c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"添加TOMCAT以及必要的jar包\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-95271924955f9926.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"设置Artifacts\"></p>\n","excerpt":"","more":"<blockquote>\n<p>新入职公司,对公司内部的系统进行搭建,在此进行记录</p>\n<p>思路如下</p>\n</blockquote>\n<p><code>导入 maven 项目 相关的jar 包--&gt;关联相关的框架 --&gt; 配置tomcat 的处理</code></p>\n<blockquote>\n<p>导入项目,选择maven框架,一直点next</p>\n<p>进入之后更新jar包,和导入必要的包</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-a522c56b975d7f0b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"下载maven包\"></p>\n<blockquote>\n<p>然后添加相关联的框架,如Spring</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-914a950a58d6a196.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Spring.png\"></p>\n<blockquote>\n<p>配置tomcat </p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-e97aa9047f65208f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"tomcat.png\"></p>\n<blockquote>\n<p>点开项目结构,依次步骤</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-fecec8e1a9a14166.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"指定classes路径\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-b57965a47e5cbf08.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"编译输出class路径\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-925ff6a2239606c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"添加TOMCAT以及必要的jar包\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-95271924955f9926.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"设置Artifacts\"></p>\n"},{"title":"intellj-idea-开发环境配置","date":"2016-09-10T16:00:00.000Z","_content":"\n> 忽略大小写\n\n![设置为None](http://upload-images.jianshu.io/upload_images/80378-21a2fcac6f732f8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 显示行号\n\n![打勾](http://upload-images.jianshu.io/upload_images/80378-0d8965b03020352e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 版权控制\n\n\n![打勾](http://upload-images.jianshu.io/upload_images/80378-91abba5aabe3929f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n\n","source":"_posts/intellj-idea/intellj-idea-开发环境配置.md","raw":"---\ntitle: intellj-idea-开发环境配置\ndate: 2016-09-11\ncategories: \n- intellj-idea\n---\n\n> 忽略大小写\n\n![设置为None](http://upload-images.jianshu.io/upload_images/80378-21a2fcac6f732f8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 显示行号\n\n![打勾](http://upload-images.jianshu.io/upload_images/80378-0d8965b03020352e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 版权控制\n\n\n![打勾](http://upload-images.jianshu.io/upload_images/80378-91abba5aabe3929f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n\n","slug":"intellj-idea/intellj-idea-开发环境配置","published":1,"updated":"2017-02-06T02:04:13.000Z","_id":"ciytg3xb7003ls10o0bfzrz1d","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>忽略大小写</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-21a2fcac6f732f8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"设置为None\"></p>\n<blockquote>\n<p>显示行号</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-0d8965b03020352e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"打勾\"></p>\n<blockquote>\n<p>版权控制</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-91abba5aabe3929f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"打勾\"></p>\n","excerpt":"","more":"<blockquote>\n<p>忽略大小写</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-21a2fcac6f732f8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"设置为None\"></p>\n<blockquote>\n<p>显示行号</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-0d8965b03020352e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"打勾\"></p>\n<blockquote>\n<p>版权控制</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-91abba5aabe3929f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"打勾\"></p>\n"},{"title":"ios-核心开发手册读书笔记","date":"2016-09-10T16:00:00.000Z","_content":"\n> 手势与触摸\n\n触摸的信息:\n\n![](http://upload-images.jianshu.io/upload_images/80378-abb2776d090e0ac6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![](http://upload-images.jianshu.io/upload_images/80378-c7897d178f1dd3df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n触摸事件:\n\n![](http://upload-images.jianshu.io/upload_images/80378-d00100e43f3a9fbd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n触摸事件生死:\n\n![](http://upload-images.jianshu.io/upload_images/80378-3412f713735811f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![](http://upload-images.jianshu.io/upload_images/80378-9d78ed16bf30b1e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![](http://upload-images.jianshu.io/upload_images/80378-fe868a6d673ea8f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![](http://upload-images.jianshu.io/upload_images/80378-6cfae5aa3bbf50bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/ios/ios-核心开发手册读书笔记.md","raw":"---\ntitle: ios-核心开发手册读书笔记\ndate: 2016-09-11\ncategories: \n- ios\n---\n\n> 手势与触摸\n\n触摸的信息:\n\n![](http://upload-images.jianshu.io/upload_images/80378-abb2776d090e0ac6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![](http://upload-images.jianshu.io/upload_images/80378-c7897d178f1dd3df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n触摸事件:\n\n![](http://upload-images.jianshu.io/upload_images/80378-d00100e43f3a9fbd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n触摸事件生死:\n\n![](http://upload-images.jianshu.io/upload_images/80378-3412f713735811f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![](http://upload-images.jianshu.io/upload_images/80378-9d78ed16bf30b1e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![](http://upload-images.jianshu.io/upload_images/80378-fe868a6d673ea8f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![](http://upload-images.jianshu.io/upload_images/80378-6cfae5aa3bbf50bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"ios/ios-核心开发手册读书笔记","published":1,"updated":"2017-02-06T02:04:48.000Z","_id":"ciytg3zp5003os10olgli0l03","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>手势与触摸</p>\n</blockquote>\n<p>触摸的信息:</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-abb2776d090e0ac6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-c7897d178f1dd3df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>触摸事件:</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-d00100e43f3a9fbd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>触摸事件生死:</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-3412f713735811f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-9d78ed16bf30b1e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-fe868a6d673ea8f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-6cfae5aa3bbf50bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n","excerpt":"","more":"<blockquote>\n<p>手势与触摸</p>\n</blockquote>\n<p>触摸的信息:</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-abb2776d090e0ac6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-c7897d178f1dd3df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>触摸事件:</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-d00100e43f3a9fbd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>触摸事件生死:</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-3412f713735811f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-9d78ed16bf30b1e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-fe868a6d673ea8f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-6cfae5aa3bbf50bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n"},{"title":"js-array-Array-of-转换数组","date":"2016-09-10T16:00:00.000Z","_content":"\n```\nArray.of()\n// <- []\nArray.of(undefined)\n// <- [undefined]\nArray.of(1)\n// <- [1]\nArray.of(3)\n// <- [3]\nArray.of(1, 2)\n// <- [1, 2]\nArray.of(-1)\n// <- [-1]\n```\n","source":"_posts/Javascript-array/js-array-Array-of-转换数组.md","raw":"---\ntitle: js-array-Array-of-转换数组\ndate: 2016-09-11\ncategories: \n- javascript\n---\n\n```\nArray.of()\n// <- []\nArray.of(undefined)\n// <- [undefined]\nArray.of(1)\n// <- [1]\nArray.of(3)\n// <- [3]\nArray.of(1, 2)\n// <- [1, 2]\nArray.of(-1)\n// <- [-1]\n```\n","slug":"Javascript-array/js-array-Array-of-转换数组","published":1,"updated":"2017-02-06T02:47:06.000Z","_id":"ciytg454d003zs10oim2p7is1","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">Array.of()</div><div class=\"line\">// &lt;- []</div><div class=\"line\">Array.of(undefined)</div><div class=\"line\">// &lt;- [undefined]</div><div class=\"line\">Array.of(1)</div><div class=\"line\">// &lt;- [1]</div><div class=\"line\">Array.of(3)</div><div class=\"line\">// &lt;- [3]</div><div class=\"line\">Array.of(1, 2)</div><div class=\"line\">// &lt;- [1, 2]</div><div class=\"line\">Array.of(-1)</div><div class=\"line\">// &lt;- [-1]</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">Array.of()</div><div class=\"line\">// &lt;- []</div><div class=\"line\">Array.of(undefined)</div><div class=\"line\">// &lt;- [undefined]</div><div class=\"line\">Array.of(1)</div><div class=\"line\">// &lt;- [1]</div><div class=\"line\">Array.of(3)</div><div class=\"line\">// &lt;- [3]</div><div class=\"line\">Array.of(1, 2)</div><div class=\"line\">// &lt;- [1, 2]</div><div class=\"line\">Array.of(-1)</div><div class=\"line\">// &lt;- [-1]</div></pre></td></tr></table></figure>\n"},{"title":"js-array-api-常用","date":"2016-09-10T16:00:00.000Z","_content":"\nfunction:\n``Array.from`` 函数\n从类似数组的对象或可迭代的对象返回一个数组。\n```\nvar arr = Array.from([1, 2, 3], x => x * 10);\n// arr[0] == 10;\n// arr[1] == 20;\n// arr[2] == 30;\n```\n\n``Array.isArray`` 函数\n返回一个布尔值，该值指示对象是否为数组。\n\n``Array.of`` 函数\n从传入的参数返回一个数组。\n```\nvar arr = Array.of(1, 2, 3);\n// arr[0] == 1 \n```\n\n``concat`` 方法（数组）\n返回由两个数组组合而成的新数组。\n\n``entries`` 方法 keys values\n返回包含数组的键/值对的迭代器。\n\n```\nvar entries = [\"a\", \"b\", \"c\"].entries();\n// entries.next().value == [0, \"a\"]\n// entries.next().value == [1, \"b\"]\n// entries.next().value == [2, \"c\"] \n```\n\n``every`` 方法\n检查定义的回调函数是否为数组中的所有元素返回 true。\n\n```\n// Define the callback function.\nfunction CheckIfEven(value, index, ar) {\n    document.write(value + \" \");\n\n    if (value % 2 == 0)\n        return true;\n    else\n        return false;\n}\n\n// Create an array.\nvar numbers = [2, 4, 5, 6, 8];\n\n// Check whether the callback function returns true for all of the\n// array values.\nif (numbers.every(CheckIfEven))\n    document.write(\"All are even.\");\nelse\n    document.write(\"Some are not even.\");\n\n// Output:\n// 2 4 5 Some are not even.\n```\n\n``fill`` 方法\n使用指定值填充数组。\n\n``filter`` 方法\n对数组的每个元素调用定义的回调函数，并返回回调函数为其返回 true 的值的数组。\n\n``findIndex`` 方法\n返回满足回调函数中指定的测试条件的第一个数组元素的索引值。\n\n``forEach`` 方法\n为数组中的每个元素调用定义的回调函数。\n\n``hasOwnProperty`` 方法\n返回一个布尔值，该值指示某个对象是否具有指定名称的属性。\n\n``indexOf`` 方法（数组）\n返回某个值在数组中的第一个匹配项的索引。\n\n``isPrototypeOf ``方法\n返回一个布尔值，该值指示某个对象是否存在于另一个对象的原型链中。\n\n``join`` 方法\n返回由一个数组的所有元素串联而成的 String 对象。\n\n``keys`` 方法\n返回包含数组的索引值的迭代器。\n\n``lastIndexOf ``方法（数组）\n返回指定值在数组中的最后一个匹配项的索引。\n\n``map`` 方法\n对数组的每个元素调用定义的回调函数并返回包含结果的数组。\n\n``pop`` 方法\n从数组中移除最后一个元素并将该元素返回。\n\n``propertyIsEnumerable`` 方法\n返回一个布尔值，该值指示指定属性是否为对象的一部分且是否可枚举。\n\n``push`` 方法\n将新元素追加到一个数组中，并返回数组的新长度。\n\n``reduce`` 方法\n通过对数组中的所有元素调用定义的回调函数来累积单个结果。  回调函数的返回值是累积的结果，并且作为对回调函数的下一个调用中的参数提供。  \n\n``reduceRight`` 方法\n通过对数组中的所有元素调用定义的回调函数来按降序顺序累积单个结果。  回调函数的返回值是累积的结果，并且作为对回调函数的下一个调用中的参数提供。  \n\n``reverse`` 方法\n将元素顺序被反转的 Array 对象返回。\n\n``shift`` 方法\n从数组中移除第一个元素并将返回该元素。\n\n``slice`` 方法（数组）\n返回一个数组中的一部分。\n\n``some`` 方法\n检查定义的回调函数是否为数组的任何元素返回 true。\n\n``sort`` 方法\n返回一个元素已经进行了排序的 Array 对象。\n\n``splice`` 方法\n从一个数组中移除元素，如有必要，在所移除元素的位置上插入新元素，并返回所移除的元素。\n\n``toLocaleString`` 方法\n返回使用当前区域设置的字符串。\n\n``toString`` 方法\n返回数组的字符串表示形式。\n\n``unshift`` 方法\n在数组的开头插入新元素。\n\n``valueOf`` 方法\n获取对数组的引用。\n\n``values`` 方法\n返回包含数组的值的迭代器。\n","source":"_posts/Javascript-array/js-array-api-常用.md","raw":"---\ntitle: js-array-api-常用\ndate: 2016-09-11\ncategories: \n- javascript\n---\n\nfunction:\n``Array.from`` 函数\n从类似数组的对象或可迭代的对象返回一个数组。\n```\nvar arr = Array.from([1, 2, 3], x => x * 10);\n// arr[0] == 10;\n// arr[1] == 20;\n// arr[2] == 30;\n```\n\n``Array.isArray`` 函数\n返回一个布尔值，该值指示对象是否为数组。\n\n``Array.of`` 函数\n从传入的参数返回一个数组。\n```\nvar arr = Array.of(1, 2, 3);\n// arr[0] == 1 \n```\n\n``concat`` 方法（数组）\n返回由两个数组组合而成的新数组。\n\n``entries`` 方法 keys values\n返回包含数组的键/值对的迭代器。\n\n```\nvar entries = [\"a\", \"b\", \"c\"].entries();\n// entries.next().value == [0, \"a\"]\n// entries.next().value == [1, \"b\"]\n// entries.next().value == [2, \"c\"] \n```\n\n``every`` 方法\n检查定义的回调函数是否为数组中的所有元素返回 true。\n\n```\n// Define the callback function.\nfunction CheckIfEven(value, index, ar) {\n    document.write(value + \" \");\n\n    if (value % 2 == 0)\n        return true;\n    else\n        return false;\n}\n\n// Create an array.\nvar numbers = [2, 4, 5, 6, 8];\n\n// Check whether the callback function returns true for all of the\n// array values.\nif (numbers.every(CheckIfEven))\n    document.write(\"All are even.\");\nelse\n    document.write(\"Some are not even.\");\n\n// Output:\n// 2 4 5 Some are not even.\n```\n\n``fill`` 方法\n使用指定值填充数组。\n\n``filter`` 方法\n对数组的每个元素调用定义的回调函数，并返回回调函数为其返回 true 的值的数组。\n\n``findIndex`` 方法\n返回满足回调函数中指定的测试条件的第一个数组元素的索引值。\n\n``forEach`` 方法\n为数组中的每个元素调用定义的回调函数。\n\n``hasOwnProperty`` 方法\n返回一个布尔值，该值指示某个对象是否具有指定名称的属性。\n\n``indexOf`` 方法（数组）\n返回某个值在数组中的第一个匹配项的索引。\n\n``isPrototypeOf ``方法\n返回一个布尔值，该值指示某个对象是否存在于另一个对象的原型链中。\n\n``join`` 方法\n返回由一个数组的所有元素串联而成的 String 对象。\n\n``keys`` 方法\n返回包含数组的索引值的迭代器。\n\n``lastIndexOf ``方法（数组）\n返回指定值在数组中的最后一个匹配项的索引。\n\n``map`` 方法\n对数组的每个元素调用定义的回调函数并返回包含结果的数组。\n\n``pop`` 方法\n从数组中移除最后一个元素并将该元素返回。\n\n``propertyIsEnumerable`` 方法\n返回一个布尔值，该值指示指定属性是否为对象的一部分且是否可枚举。\n\n``push`` 方法\n将新元素追加到一个数组中，并返回数组的新长度。\n\n``reduce`` 方法\n通过对数组中的所有元素调用定义的回调函数来累积单个结果。  回调函数的返回值是累积的结果，并且作为对回调函数的下一个调用中的参数提供。  \n\n``reduceRight`` 方法\n通过对数组中的所有元素调用定义的回调函数来按降序顺序累积单个结果。  回调函数的返回值是累积的结果，并且作为对回调函数的下一个调用中的参数提供。  \n\n``reverse`` 方法\n将元素顺序被反转的 Array 对象返回。\n\n``shift`` 方法\n从数组中移除第一个元素并将返回该元素。\n\n``slice`` 方法（数组）\n返回一个数组中的一部分。\n\n``some`` 方法\n检查定义的回调函数是否为数组的任何元素返回 true。\n\n``sort`` 方法\n返回一个元素已经进行了排序的 Array 对象。\n\n``splice`` 方法\n从一个数组中移除元素，如有必要，在所移除元素的位置上插入新元素，并返回所移除的元素。\n\n``toLocaleString`` 方法\n返回使用当前区域设置的字符串。\n\n``toString`` 方法\n返回数组的字符串表示形式。\n\n``unshift`` 方法\n在数组的开头插入新元素。\n\n``valueOf`` 方法\n获取对数组的引用。\n\n``values`` 方法\n返回包含数组的值的迭代器。\n","slug":"Javascript-array/js-array-api-常用","published":1,"updated":"2017-02-06T02:47:11.000Z","_id":"ciytg454f0040s10onutp4b5q","comments":1,"layout":"post","photos":[],"link":"","content":"<p>function:<br><code>Array.from</code> 函数<br>从类似数组的对象或可迭代的对象返回一个数组。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr = Array.from([1, 2, 3], x =&gt; x * 10);</div><div class=\"line\">// arr[0] == 10;</div><div class=\"line\">// arr[1] == 20;</div><div class=\"line\">// arr[2] == 30;</div></pre></td></tr></table></figure></p>\n<p><code>Array.isArray</code> 函数<br>返回一个布尔值，该值指示对象是否为数组。</p>\n<p><code>Array.of</code> 函数<br>从传入的参数返回一个数组。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr = Array.of(1, 2, 3);</div><div class=\"line\">// arr[0] == 1</div></pre></td></tr></table></figure></p>\n<p><code>concat</code> 方法（数组）<br>返回由两个数组组合而成的新数组。</p>\n<p><code>entries</code> 方法 keys values<br>返回包含数组的键/值对的迭代器。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var entries = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;].entries();</div><div class=\"line\">// entries.next().value == [0, &quot;a&quot;]</div><div class=\"line\">// entries.next().value == [1, &quot;b&quot;]</div><div class=\"line\">// entries.next().value == [2, &quot;c&quot;]</div></pre></td></tr></table></figure>\n<p><code>every</code> 方法<br>检查定义的回调函数是否为数组中的所有元素返回 true。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Define the callback function.</div><div class=\"line\">function CheckIfEven(value, index, ar) &#123;</div><div class=\"line\">    document.write(value + &quot; &quot;);</div><div class=\"line\"></div><div class=\"line\">    if (value % 2 == 0)</div><div class=\"line\">        return true;</div><div class=\"line\">    else</div><div class=\"line\">        return false;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// Create an array.</div><div class=\"line\">var numbers = [2, 4, 5, 6, 8];</div><div class=\"line\"></div><div class=\"line\">// Check whether the callback function returns true for all of the</div><div class=\"line\">// array values.</div><div class=\"line\">if (numbers.every(CheckIfEven))</div><div class=\"line\">    document.write(&quot;All are even.&quot;);</div><div class=\"line\">else</div><div class=\"line\">    document.write(&quot;Some are not even.&quot;);</div><div class=\"line\"></div><div class=\"line\">// Output:</div><div class=\"line\">// 2 4 5 Some are not even.</div></pre></td></tr></table></figure>\n<p><code>fill</code> 方法<br>使用指定值填充数组。</p>\n<p><code>filter</code> 方法<br>对数组的每个元素调用定义的回调函数，并返回回调函数为其返回 true 的值的数组。</p>\n<p><code>findIndex</code> 方法<br>返回满足回调函数中指定的测试条件的第一个数组元素的索引值。</p>\n<p><code>forEach</code> 方法<br>为数组中的每个元素调用定义的回调函数。</p>\n<p><code>hasOwnProperty</code> 方法<br>返回一个布尔值，该值指示某个对象是否具有指定名称的属性。</p>\n<p><code>indexOf</code> 方法（数组）<br>返回某个值在数组中的第一个匹配项的索引。</p>\n<p><code>isPrototypeOf</code>方法<br>返回一个布尔值，该值指示某个对象是否存在于另一个对象的原型链中。</p>\n<p><code>join</code> 方法<br>返回由一个数组的所有元素串联而成的 String 对象。</p>\n<p><code>keys</code> 方法<br>返回包含数组的索引值的迭代器。</p>\n<p><code>lastIndexOf</code>方法（数组）<br>返回指定值在数组中的最后一个匹配项的索引。</p>\n<p><code>map</code> 方法<br>对数组的每个元素调用定义的回调函数并返回包含结果的数组。</p>\n<p><code>pop</code> 方法<br>从数组中移除最后一个元素并将该元素返回。</p>\n<p><code>propertyIsEnumerable</code> 方法<br>返回一个布尔值，该值指示指定属性是否为对象的一部分且是否可枚举。</p>\n<p><code>push</code> 方法<br>将新元素追加到一个数组中，并返回数组的新长度。</p>\n<p><code>reduce</code> 方法<br>通过对数组中的所有元素调用定义的回调函数来累积单个结果。  回调函数的返回值是累积的结果，并且作为对回调函数的下一个调用中的参数提供。  </p>\n<p><code>reduceRight</code> 方法<br>通过对数组中的所有元素调用定义的回调函数来按降序顺序累积单个结果。  回调函数的返回值是累积的结果，并且作为对回调函数的下一个调用中的参数提供。  </p>\n<p><code>reverse</code> 方法<br>将元素顺序被反转的 Array 对象返回。</p>\n<p><code>shift</code> 方法<br>从数组中移除第一个元素并将返回该元素。</p>\n<p><code>slice</code> 方法（数组）<br>返回一个数组中的一部分。</p>\n<p><code>some</code> 方法<br>检查定义的回调函数是否为数组的任何元素返回 true。</p>\n<p><code>sort</code> 方法<br>返回一个元素已经进行了排序的 Array 对象。</p>\n<p><code>splice</code> 方法<br>从一个数组中移除元素，如有必要，在所移除元素的位置上插入新元素，并返回所移除的元素。</p>\n<p><code>toLocaleString</code> 方法<br>返回使用当前区域设置的字符串。</p>\n<p><code>toString</code> 方法<br>返回数组的字符串表示形式。</p>\n<p><code>unshift</code> 方法<br>在数组的开头插入新元素。</p>\n<p><code>valueOf</code> 方法<br>获取对数组的引用。</p>\n<p><code>values</code> 方法<br>返回包含数组的值的迭代器。</p>\n","excerpt":"","more":"<p>function:<br><code>Array.from</code> 函数<br>从类似数组的对象或可迭代的对象返回一个数组。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr = Array.from([1, 2, 3], x =&gt; x * 10);</div><div class=\"line\">// arr[0] == 10;</div><div class=\"line\">// arr[1] == 20;</div><div class=\"line\">// arr[2] == 30;</div></pre></td></tr></table></figure></p>\n<p><code>Array.isArray</code> 函数<br>返回一个布尔值，该值指示对象是否为数组。</p>\n<p><code>Array.of</code> 函数<br>从传入的参数返回一个数组。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr = Array.of(1, 2, 3);</div><div class=\"line\">// arr[0] == 1</div></pre></td></tr></table></figure></p>\n<p><code>concat</code> 方法（数组）<br>返回由两个数组组合而成的新数组。</p>\n<p><code>entries</code> 方法 keys values<br>返回包含数组的键/值对的迭代器。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var entries = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;].entries();</div><div class=\"line\">// entries.next().value == [0, &quot;a&quot;]</div><div class=\"line\">// entries.next().value == [1, &quot;b&quot;]</div><div class=\"line\">// entries.next().value == [2, &quot;c&quot;]</div></pre></td></tr></table></figure>\n<p><code>every</code> 方法<br>检查定义的回调函数是否为数组中的所有元素返回 true。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Define the callback function.</div><div class=\"line\">function CheckIfEven(value, index, ar) &#123;</div><div class=\"line\">    document.write(value + &quot; &quot;);</div><div class=\"line\"></div><div class=\"line\">    if (value % 2 == 0)</div><div class=\"line\">        return true;</div><div class=\"line\">    else</div><div class=\"line\">        return false;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// Create an array.</div><div class=\"line\">var numbers = [2, 4, 5, 6, 8];</div><div class=\"line\"></div><div class=\"line\">// Check whether the callback function returns true for all of the</div><div class=\"line\">// array values.</div><div class=\"line\">if (numbers.every(CheckIfEven))</div><div class=\"line\">    document.write(&quot;All are even.&quot;);</div><div class=\"line\">else</div><div class=\"line\">    document.write(&quot;Some are not even.&quot;);</div><div class=\"line\"></div><div class=\"line\">// Output:</div><div class=\"line\">// 2 4 5 Some are not even.</div></pre></td></tr></table></figure>\n<p><code>fill</code> 方法<br>使用指定值填充数组。</p>\n<p><code>filter</code> 方法<br>对数组的每个元素调用定义的回调函数，并返回回调函数为其返回 true 的值的数组。</p>\n<p><code>findIndex</code> 方法<br>返回满足回调函数中指定的测试条件的第一个数组元素的索引值。</p>\n<p><code>forEach</code> 方法<br>为数组中的每个元素调用定义的回调函数。</p>\n<p><code>hasOwnProperty</code> 方法<br>返回一个布尔值，该值指示某个对象是否具有指定名称的属性。</p>\n<p><code>indexOf</code> 方法（数组）<br>返回某个值在数组中的第一个匹配项的索引。</p>\n<p><code>isPrototypeOf</code>方法<br>返回一个布尔值，该值指示某个对象是否存在于另一个对象的原型链中。</p>\n<p><code>join</code> 方法<br>返回由一个数组的所有元素串联而成的 String 对象。</p>\n<p><code>keys</code> 方法<br>返回包含数组的索引值的迭代器。</p>\n<p><code>lastIndexOf</code>方法（数组）<br>返回指定值在数组中的最后一个匹配项的索引。</p>\n<p><code>map</code> 方法<br>对数组的每个元素调用定义的回调函数并返回包含结果的数组。</p>\n<p><code>pop</code> 方法<br>从数组中移除最后一个元素并将该元素返回。</p>\n<p><code>propertyIsEnumerable</code> 方法<br>返回一个布尔值，该值指示指定属性是否为对象的一部分且是否可枚举。</p>\n<p><code>push</code> 方法<br>将新元素追加到一个数组中，并返回数组的新长度。</p>\n<p><code>reduce</code> 方法<br>通过对数组中的所有元素调用定义的回调函数来累积单个结果。  回调函数的返回值是累积的结果，并且作为对回调函数的下一个调用中的参数提供。  </p>\n<p><code>reduceRight</code> 方法<br>通过对数组中的所有元素调用定义的回调函数来按降序顺序累积单个结果。  回调函数的返回值是累积的结果，并且作为对回调函数的下一个调用中的参数提供。  </p>\n<p><code>reverse</code> 方法<br>将元素顺序被反转的 Array 对象返回。</p>\n<p><code>shift</code> 方法<br>从数组中移除第一个元素并将返回该元素。</p>\n<p><code>slice</code> 方法（数组）<br>返回一个数组中的一部分。</p>\n<p><code>some</code> 方法<br>检查定义的回调函数是否为数组的任何元素返回 true。</p>\n<p><code>sort</code> 方法<br>返回一个元素已经进行了排序的 Array 对象。</p>\n<p><code>splice</code> 方法<br>从一个数组中移除元素，如有必要，在所移除元素的位置上插入新元素，并返回所移除的元素。</p>\n<p><code>toLocaleString</code> 方法<br>返回使用当前区域设置的字符串。</p>\n<p><code>toString</code> 方法<br>返回数组的字符串表示形式。</p>\n<p><code>unshift</code> 方法<br>在数组的开头插入新元素。</p>\n<p><code>valueOf</code> 方法<br>获取对数组的引用。</p>\n<p><code>values</code> 方法<br>返回包含数组的值的迭代器。</p>\n"},{"title":"js-array-reduce","date":"2016-09-10T16:00:00.000Z","_content":"\n# 返回值是积累的结果\n\n```\n  // good\n  let sum = 0;\n  numbers.forEach((num) => sum += num);\n  sum === 15;\n\n  // best (use the functional force)\n  const sum = numbers.reduce((total, num) => total + num, 0);\n  sum === 15;\n\n// Define the callback function.\nfunction appendCurrent (previousValue, currentValue) {\n    return previousValue + \"::\" + currentValue;\n    }\n\n// Create an array.\nvar elements = [\"abc\", \"def\", 123, 456];\n\n// Call the reduce method, which calls the callback function\n// for each array element.\nvar result = elements.reduce(appendCurrent);\n\ndocument.write(result);\n\n// Output:\n//  abc::def::123::456\n```\n","source":"_posts/Javascript-array/js-array-reduce.md","raw":"---\ntitle: js-array-reduce\ndate: 2016-09-11\ncategories: \n- javascript\n---\n\n# 返回值是积累的结果\n\n```\n  // good\n  let sum = 0;\n  numbers.forEach((num) => sum += num);\n  sum === 15;\n\n  // best (use the functional force)\n  const sum = numbers.reduce((total, num) => total + num, 0);\n  sum === 15;\n\n// Define the callback function.\nfunction appendCurrent (previousValue, currentValue) {\n    return previousValue + \"::\" + currentValue;\n    }\n\n// Create an array.\nvar elements = [\"abc\", \"def\", 123, 456];\n\n// Call the reduce method, which calls the callback function\n// for each array element.\nvar result = elements.reduce(appendCurrent);\n\ndocument.write(result);\n\n// Output:\n//  abc::def::123::456\n```\n","slug":"Javascript-array/js-array-reduce","published":1,"updated":"2017-02-06T02:47:02.000Z","_id":"ciytg454g0041s10oaer5a9an","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"返回值是积累的结果\"><a href=\"#返回值是积累的结果\" class=\"headerlink\" title=\"返回值是积累的结果\"></a>返回值是积累的结果</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">  // good</div><div class=\"line\">  let sum = 0;</div><div class=\"line\">  numbers.forEach((num) =&gt; sum += num);</div><div class=\"line\">  sum === 15;</div><div class=\"line\"></div><div class=\"line\">  // best (use the functional force)</div><div class=\"line\">  const sum = numbers.reduce((total, num) =&gt; total + num, 0);</div><div class=\"line\">  sum === 15;</div><div class=\"line\"></div><div class=\"line\">// Define the callback function.</div><div class=\"line\">function appendCurrent (previousValue, currentValue) &#123;</div><div class=\"line\">    return previousValue + &quot;::&quot; + currentValue;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">// Create an array.</div><div class=\"line\">var elements = [&quot;abc&quot;, &quot;def&quot;, 123, 456];</div><div class=\"line\"></div><div class=\"line\">// Call the reduce method, which calls the callback function</div><div class=\"line\">// for each array element.</div><div class=\"line\">var result = elements.reduce(appendCurrent);</div><div class=\"line\"></div><div class=\"line\">document.write(result);</div><div class=\"line\"></div><div class=\"line\">// Output:</div><div class=\"line\">//  abc::def::123::456</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"返回值是积累的结果\"><a href=\"#返回值是积累的结果\" class=\"headerlink\" title=\"返回值是积累的结果\"></a>返回值是积累的结果</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">  // good</div><div class=\"line\">  let sum = 0;</div><div class=\"line\">  numbers.forEach((num) =&gt; sum += num);</div><div class=\"line\">  sum === 15;</div><div class=\"line\"></div><div class=\"line\">  // best (use the functional force)</div><div class=\"line\">  const sum = numbers.reduce((total, num) =&gt; total + num, 0);</div><div class=\"line\">  sum === 15;</div><div class=\"line\"></div><div class=\"line\">// Define the callback function.</div><div class=\"line\">function appendCurrent (previousValue, currentValue) &#123;</div><div class=\"line\">    return previousValue + &quot;::&quot; + currentValue;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">// Create an array.</div><div class=\"line\">var elements = [&quot;abc&quot;, &quot;def&quot;, 123, 456];</div><div class=\"line\"></div><div class=\"line\">// Call the reduce method, which calls the callback function</div><div class=\"line\">// for each array element.</div><div class=\"line\">var result = elements.reduce(appendCurrent);</div><div class=\"line\"></div><div class=\"line\">document.write(result);</div><div class=\"line\"></div><div class=\"line\">// Output:</div><div class=\"line\">//  abc::def::123::456</div></pre></td></tr></table></figure>\n"},{"title":"js-array-填充数组","date":"2016-09-10T16:00:00.000Z","_content":"\n> 一次填充\n\n```\n['a', 'b', 'c',,,].fill(0, 2)\n// <- ['a', 'b', 0, 0, 0]\nnew Array(5).fill(0, 0, 3)\n// <- [0, 0, 0, undefined x 2]\nnew Array(3).fill({})\n// <- [{}, {}, {}]\nnew Array(3).fill(function foo () {})\n// <- [function foo () {}, function foo () {}, function foo () {}]\n```\n\n> 指定填充位置\n\n```\n// 将3号位复制到0号位\n[1, 2, 3, 4, 5].copyWithin(0, 3, 4)\n// [4, 2, 3, 4, 5]\n\n// -2相当于3号位，-1相当于4号位\n[1, 2, 3, 4, 5].copyWithin(0, -2, -1)\n// [4, 2, 3, 4, 5]\n\n// 将3号位复制到0号位\n[].copyWithin.call({length: 5, 3: 1}, 0, 3)\n// {0: 1, 3: 1, length: 5}\n\n// 将2号位到数组结束，复制到0号位\nvar i32a = new Int32Array([1, 2, 3, 4, 5]);\ni32a.copyWithin(0, 2);\n// Int32Array [3, 4, 5, 4, 5]\n\n// 对于没有部署TypedArray的copyWithin方法的平台\n// 需要采用下面的写法\n[].copyWithin.call(new Int32Array([1, 2, 3, 4, 5]), 0, 3, 4);\n// Int32Array [4, 2, 3, 4, 5]\n\n```\n","source":"_posts/Javascript-array/js-array-填充数组.md","raw":"---\ntitle: js-array-填充数组\ndate: 2016-09-11\ncategories: \n- javascript\n---\n\n> 一次填充\n\n```\n['a', 'b', 'c',,,].fill(0, 2)\n// <- ['a', 'b', 0, 0, 0]\nnew Array(5).fill(0, 0, 3)\n// <- [0, 0, 0, undefined x 2]\nnew Array(3).fill({})\n// <- [{}, {}, {}]\nnew Array(3).fill(function foo () {})\n// <- [function foo () {}, function foo () {}, function foo () {}]\n```\n\n> 指定填充位置\n\n```\n// 将3号位复制到0号位\n[1, 2, 3, 4, 5].copyWithin(0, 3, 4)\n// [4, 2, 3, 4, 5]\n\n// -2相当于3号位，-1相当于4号位\n[1, 2, 3, 4, 5].copyWithin(0, -2, -1)\n// [4, 2, 3, 4, 5]\n\n// 将3号位复制到0号位\n[].copyWithin.call({length: 5, 3: 1}, 0, 3)\n// {0: 1, 3: 1, length: 5}\n\n// 将2号位到数组结束，复制到0号位\nvar i32a = new Int32Array([1, 2, 3, 4, 5]);\ni32a.copyWithin(0, 2);\n// Int32Array [3, 4, 5, 4, 5]\n\n// 对于没有部署TypedArray的copyWithin方法的平台\n// 需要采用下面的写法\n[].copyWithin.call(new Int32Array([1, 2, 3, 4, 5]), 0, 3, 4);\n// Int32Array [4, 2, 3, 4, 5]\n\n```\n","slug":"Javascript-array/js-array-填充数组","published":1,"updated":"2017-02-06T03:10:21.000Z","_id":"ciytg454g0042s10o9qyu1lt5","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>一次填充</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;,,,].fill(0, 2)</div><div class=\"line\">// &lt;- [&apos;a&apos;, &apos;b&apos;, 0, 0, 0]</div><div class=\"line\">new Array(5).fill(0, 0, 3)</div><div class=\"line\">// &lt;- [0, 0, 0, undefined x 2]</div><div class=\"line\">new Array(3).fill(&#123;&#125;)</div><div class=\"line\">// &lt;- [&#123;&#125;, &#123;&#125;, &#123;&#125;]</div><div class=\"line\">new Array(3).fill(function foo () &#123;&#125;)</div><div class=\"line\">// &lt;- [function foo () &#123;&#125;, function foo () &#123;&#125;, function foo () &#123;&#125;]</div></pre></td></tr></table></figure>\n<blockquote>\n<p>指定填充位置</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 将3号位复制到0号位</div><div class=\"line\">[1, 2, 3, 4, 5].copyWithin(0, 3, 4)</div><div class=\"line\">// [4, 2, 3, 4, 5]</div><div class=\"line\"></div><div class=\"line\">// -2相当于3号位，-1相当于4号位</div><div class=\"line\">[1, 2, 3, 4, 5].copyWithin(0, -2, -1)</div><div class=\"line\">// [4, 2, 3, 4, 5]</div><div class=\"line\"></div><div class=\"line\">// 将3号位复制到0号位</div><div class=\"line\">[].copyWithin.call(&#123;length: 5, 3: 1&#125;, 0, 3)</div><div class=\"line\">// &#123;0: 1, 3: 1, length: 5&#125;</div><div class=\"line\"></div><div class=\"line\">// 将2号位到数组结束，复制到0号位</div><div class=\"line\">var i32a = new Int32Array([1, 2, 3, 4, 5]);</div><div class=\"line\">i32a.copyWithin(0, 2);</div><div class=\"line\">// Int32Array [3, 4, 5, 4, 5]</div><div class=\"line\"></div><div class=\"line\">// 对于没有部署TypedArray的copyWithin方法的平台</div><div class=\"line\">// 需要采用下面的写法</div><div class=\"line\">[].copyWithin.call(new Int32Array([1, 2, 3, 4, 5]), 0, 3, 4);</div><div class=\"line\">// Int32Array [4, 2, 3, 4, 5]</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>一次填充</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;,,,].fill(0, 2)</div><div class=\"line\">// &lt;- [&apos;a&apos;, &apos;b&apos;, 0, 0, 0]</div><div class=\"line\">new Array(5).fill(0, 0, 3)</div><div class=\"line\">// &lt;- [0, 0, 0, undefined x 2]</div><div class=\"line\">new Array(3).fill(&#123;&#125;)</div><div class=\"line\">// &lt;- [&#123;&#125;, &#123;&#125;, &#123;&#125;]</div><div class=\"line\">new Array(3).fill(function foo () &#123;&#125;)</div><div class=\"line\">// &lt;- [function foo () &#123;&#125;, function foo () &#123;&#125;, function foo () &#123;&#125;]</div></pre></td></tr></table></figure>\n<blockquote>\n<p>指定填充位置</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 将3号位复制到0号位</div><div class=\"line\">[1, 2, 3, 4, 5].copyWithin(0, 3, 4)</div><div class=\"line\">// [4, 2, 3, 4, 5]</div><div class=\"line\"></div><div class=\"line\">// -2相当于3号位，-1相当于4号位</div><div class=\"line\">[1, 2, 3, 4, 5].copyWithin(0, -2, -1)</div><div class=\"line\">// [4, 2, 3, 4, 5]</div><div class=\"line\"></div><div class=\"line\">// 将3号位复制到0号位</div><div class=\"line\">[].copyWithin.call(&#123;length: 5, 3: 1&#125;, 0, 3)</div><div class=\"line\">// &#123;0: 1, 3: 1, length: 5&#125;</div><div class=\"line\"></div><div class=\"line\">// 将2号位到数组结束，复制到0号位</div><div class=\"line\">var i32a = new Int32Array([1, 2, 3, 4, 5]);</div><div class=\"line\">i32a.copyWithin(0, 2);</div><div class=\"line\">// Int32Array [3, 4, 5, 4, 5]</div><div class=\"line\"></div><div class=\"line\">// 对于没有部署TypedArray的copyWithin方法的平台</div><div class=\"line\">// 需要采用下面的写法</div><div class=\"line\">[].copyWithin.call(new Int32Array([1, 2, 3, 4, 5]), 0, 3, 4);</div><div class=\"line\">// Int32Array [4, 2, 3, 4, 5]</div></pre></td></tr></table></figure>\n"},{"title":"js-array-生成数组","date":"2016-09-10T16:00:00.000Z","_content":"\n> 第一种\n```\nfunction cast () {\n    return [].slice.call(arguments);\n}\n\ncast('a','b','c','d'); // [\"a\", \"b\", \"c\", \"d\"]\n```\n\n> 第二种\n```\nlet arrayLike = {\n    '0': 'a',\n    '1': 'b',\n    '2': 'c',\n    length: 3\n}\n\nconsole.log(Array.from(arrayLike)); // [\"a\",\"b\",\"c\"]\n```\n\n字符串和Set结构都具有 iterator 接口;\n```\nArray.from(arrayLike, x => x * x);\n// 等同于\nArray.from(arrayLike).map(x => x * x);\n\nArray.from([1, 2, 3], (x) => x * x)\n// [1, 4, 9]\n\nArray.from({ length: 2 }, () => 'jack')\n```\n\n> 第三种\n```\nfunction cast (){\n  return [...arguments]\n}\n\ncast('a','b','c'); // [\"a\",\"b\",\"c\"]\n```\n","source":"_posts/Javascript-array/js-array-生成数组.md","raw":"---\ntitle: js-array-生成数组\ndate: 2016-09-11\ncategories: \n- javascript\n---\n\n> 第一种\n```\nfunction cast () {\n    return [].slice.call(arguments);\n}\n\ncast('a','b','c','d'); // [\"a\", \"b\", \"c\", \"d\"]\n```\n\n> 第二种\n```\nlet arrayLike = {\n    '0': 'a',\n    '1': 'b',\n    '2': 'c',\n    length: 3\n}\n\nconsole.log(Array.from(arrayLike)); // [\"a\",\"b\",\"c\"]\n```\n\n字符串和Set结构都具有 iterator 接口;\n```\nArray.from(arrayLike, x => x * x);\n// 等同于\nArray.from(arrayLike).map(x => x * x);\n\nArray.from([1, 2, 3], (x) => x * x)\n// [1, 4, 9]\n\nArray.from({ length: 2 }, () => 'jack')\n```\n\n> 第三种\n```\nfunction cast (){\n  return [...arguments]\n}\n\ncast('a','b','c'); // [\"a\",\"b\",\"c\"]\n```\n","slug":"Javascript-array/js-array-生成数组","published":1,"updated":"2017-02-06T03:10:21.000Z","_id":"ciytg454h0043s10o2in0non7","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>第一种<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">function cast () &#123;</div><div class=\"line\">    return [].slice.call(arguments);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">cast(&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;); // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</div></pre></td></tr></table></figure></p>\n<p>第二种<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">let arrayLike = &#123;</div><div class=\"line\">    &apos;0&apos;: &apos;a&apos;,</div><div class=\"line\">    &apos;1&apos;: &apos;b&apos;,</div><div class=\"line\">    &apos;2&apos;: &apos;c&apos;,</div><div class=\"line\">    length: 3</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">console.log(Array.from(arrayLike)); // [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>字符串和Set结构都具有 iterator 接口;<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Array.from(arrayLike, x =&gt; x * x);</div><div class=\"line\">// 等同于</div><div class=\"line\">Array.from(arrayLike).map(x =&gt; x * x);</div><div class=\"line\"></div><div class=\"line\">Array.from([1, 2, 3], (x) =&gt; x * x)</div><div class=\"line\">// [1, 4, 9]</div><div class=\"line\"></div><div class=\"line\">Array.from(&#123; length: 2 &#125;, () =&gt; &apos;jack&apos;)</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>第三种<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">function cast ()&#123;</div><div class=\"line\">  return [...arguments]</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">cast(&apos;a&apos;,&apos;b&apos;,&apos;c&apos;); // [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</div></pre></td></tr></table></figure></p>\n</blockquote>\n","excerpt":"","more":"<blockquote>\n<p>第一种<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">function cast () &#123;</div><div class=\"line\">    return [].slice.call(arguments);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">cast(&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;); // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</div></pre></td></tr></table></figure></p>\n<p>第二种<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">let arrayLike = &#123;</div><div class=\"line\">    &apos;0&apos;: &apos;a&apos;,</div><div class=\"line\">    &apos;1&apos;: &apos;b&apos;,</div><div class=\"line\">    &apos;2&apos;: &apos;c&apos;,</div><div class=\"line\">    length: 3</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">console.log(Array.from(arrayLike)); // [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>字符串和Set结构都具有 iterator 接口;<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Array.from(arrayLike, x =&gt; x * x);</div><div class=\"line\">// 等同于</div><div class=\"line\">Array.from(arrayLike).map(x =&gt; x * x);</div><div class=\"line\"></div><div class=\"line\">Array.from([1, 2, 3], (x) =&gt; x * x)</div><div class=\"line\">// [1, 4, 9]</div><div class=\"line\"></div><div class=\"line\">Array.from(&#123; length: 2 &#125;, () =&gt; &apos;jack&apos;)</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>第三种<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">function cast ()&#123;</div><div class=\"line\">  return [...arguments]</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">cast(&apos;a&apos;,&apos;b&apos;,&apos;c&apos;); // [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</div></pre></td></tr></table></figure></p>\n</blockquote>\n"},{"title":"js-array-复制数组","date":"2016-09-10T16:00:00.000Z","_content":"\n> 避免用遍历,类似map等能生成新的数组的就是了...\n\n```\n// good\nconst itemsCopy = [...items];\n```\n\n\n> 类数组的转换成数组\n\n```\nconst nodes =  Array.from();\n```\n","source":"_posts/Javascript-array/js-array-复制数组.md","raw":"---\ntitle: js-array-复制数组\ndate: 2016-09-11\ncategories: \n- javascript\n---\n\n> 避免用遍历,类似map等能生成新的数组的就是了...\n\n```\n// good\nconst itemsCopy = [...items];\n```\n\n\n> 类数组的转换成数组\n\n```\nconst nodes =  Array.from();\n```\n","slug":"Javascript-array/js-array-复制数组","published":1,"updated":"2017-02-06T03:10:21.000Z","_id":"ciytg454h0044s10oub5wndg6","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>避免用遍历,类似map等能生成新的数组的就是了…</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// good</div><div class=\"line\">const itemsCopy = [...items];</div></pre></td></tr></table></figure>\n<blockquote>\n<p>类数组的转换成数组</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">const nodes =  Array.from();</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>避免用遍历,类似map等能生成新的数组的就是了…</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// good</div><div class=\"line\">const itemsCopy = [...items];</div></pre></td></tr></table></figure>\n<blockquote>\n<p>类数组的转换成数组</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">const nodes =  Array.from();</div></pre></td></tr></table></figure>\n"},{"title":"js-json-转换","date":"2016-09-10T16:00:00.000Z","_content":"\n> json-->string\n```\nstatic stringToJson(data){\n    return JSON.parse(data);\n}\n```\n\n> string-->json\n```\nstatic jsonToString(data){\n    return JSON.stringify(data);\n}\n```\n\n> map-->json\n```\n/**\n *map转化为对象（map所有键都是字符串，可以将其转换为对象）\n */\n static strMapToObj(strMap){\n    let obj= Object.create(null);\n    for (let[k,v] of strMap) {\n      obj[k] = v;\n    }\n    return obj;\n  }\n  /**\n  *map转换为json\n  */\n  static mapToJson(map) {\n  return JSON.stringify(JsonUitl.strMapToObj(map));\n  }\n  ```\n\n> json-->map\n```\n/**\n *map转化为对象（map所有键都是字符串，可以将其转换为对象）\n */\n static strMapToObj(strMap){\n    let obj= Object.create(null);\n    for (let[k,v] of strMap) {\n      obj[k] = v;\n    }\n    return obj;\n  }\n  /**\n  *map转换为json\n  */\n  static mapToJson(map) {\n  return JSON.stringify(JsonUitl.strMapToObj(map));\n  }\n  ```\n\n> map-->array\n```\nlet myMap = new Map().set(true, 7).set({foo: 3}, ['abc']);\n> [...myMap]\n```\n\n> array-->map\n```\nnew Map([[true, 7], [{foo: 3}, ['abc']]])\nMap {true => 7, Object {foo: 3} => ['abc']}\n```\n","source":"_posts/Javascript-array/js-json-转换.md","raw":"---\ntitle: js-json-转换\ndate: 2016-09-11\ncategories: \n- javascript\n---\n\n> json-->string\n```\nstatic stringToJson(data){\n    return JSON.parse(data);\n}\n```\n\n> string-->json\n```\nstatic jsonToString(data){\n    return JSON.stringify(data);\n}\n```\n\n> map-->json\n```\n/**\n *map转化为对象（map所有键都是字符串，可以将其转换为对象）\n */\n static strMapToObj(strMap){\n    let obj= Object.create(null);\n    for (let[k,v] of strMap) {\n      obj[k] = v;\n    }\n    return obj;\n  }\n  /**\n  *map转换为json\n  */\n  static mapToJson(map) {\n  return JSON.stringify(JsonUitl.strMapToObj(map));\n  }\n  ```\n\n> json-->map\n```\n/**\n *map转化为对象（map所有键都是字符串，可以将其转换为对象）\n */\n static strMapToObj(strMap){\n    let obj= Object.create(null);\n    for (let[k,v] of strMap) {\n      obj[k] = v;\n    }\n    return obj;\n  }\n  /**\n  *map转换为json\n  */\n  static mapToJson(map) {\n  return JSON.stringify(JsonUitl.strMapToObj(map));\n  }\n  ```\n\n> map-->array\n```\nlet myMap = new Map().set(true, 7).set({foo: 3}, ['abc']);\n> [...myMap]\n```\n\n> array-->map\n```\nnew Map([[true, 7], [{foo: 3}, ['abc']]])\nMap {true => 7, Object {foo: 3} => ['abc']}\n```\n","slug":"Javascript-array/js-json-转换","published":1,"updated":"2017-02-06T03:10:21.000Z","_id":"ciytg454i0045s10o7lq2u33g","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>json–&gt;string<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">static stringToJson(data)&#123;</div><div class=\"line\">    return JSON.parse(data);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>string–&gt;json<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">static jsonToString(data)&#123;</div><div class=\"line\">    return JSON.stringify(data);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>map–&gt;json<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> *map转化为对象（map所有键都是字符串，可以将其转换为对象）</div><div class=\"line\"> */</div><div class=\"line\"> static strMapToObj(strMap)&#123;</div><div class=\"line\">    let obj= Object.create(null);</div><div class=\"line\">    for (let[k,v] of strMap) &#123;</div><div class=\"line\">      obj[k] = v;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return obj;</div><div class=\"line\">  &#125;</div><div class=\"line\">  /**</div><div class=\"line\">  *map转换为json</div><div class=\"line\">  */</div><div class=\"line\">  static mapToJson(map) &#123;</div><div class=\"line\">  return JSON.stringify(JsonUitl.strMapToObj(map));</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>json–&gt;map<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> *map转化为对象（map所有键都是字符串，可以将其转换为对象）</div><div class=\"line\"> */</div><div class=\"line\"> static strMapToObj(strMap)&#123;</div><div class=\"line\">    let obj= Object.create(null);</div><div class=\"line\">    for (let[k,v] of strMap) &#123;</div><div class=\"line\">      obj[k] = v;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return obj;</div><div class=\"line\">  &#125;</div><div class=\"line\">  /**</div><div class=\"line\">  *map转换为json</div><div class=\"line\">  */</div><div class=\"line\">  static mapToJson(map) &#123;</div><div class=\"line\">  return JSON.stringify(JsonUitl.strMapToObj(map));</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>map–&gt;array<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">let myMap = new Map().set(true, 7).set(&#123;foo: 3&#125;, [&apos;abc&apos;]);</div><div class=\"line\">&gt; [...myMap]</div></pre></td></tr></table></figure></p>\n<p>array–&gt;map<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">new Map([[true, 7], [&#123;foo: 3&#125;, [&apos;abc&apos;]]])</div><div class=\"line\">Map &#123;true =&gt; 7, Object &#123;foo: 3&#125; =&gt; [&apos;abc&apos;]&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n","excerpt":"","more":"<blockquote>\n<p>json–&gt;string<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">static stringToJson(data)&#123;</div><div class=\"line\">    return JSON.parse(data);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>string–&gt;json<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">static jsonToString(data)&#123;</div><div class=\"line\">    return JSON.stringify(data);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>map–&gt;json<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> *map转化为对象（map所有键都是字符串，可以将其转换为对象）</div><div class=\"line\"> */</div><div class=\"line\"> static strMapToObj(strMap)&#123;</div><div class=\"line\">    let obj= Object.create(null);</div><div class=\"line\">    for (let[k,v] of strMap) &#123;</div><div class=\"line\">      obj[k] = v;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return obj;</div><div class=\"line\">  &#125;</div><div class=\"line\">  /**</div><div class=\"line\">  *map转换为json</div><div class=\"line\">  */</div><div class=\"line\">  static mapToJson(map) &#123;</div><div class=\"line\">  return JSON.stringify(JsonUitl.strMapToObj(map));</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>json–&gt;map<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> *map转化为对象（map所有键都是字符串，可以将其转换为对象）</div><div class=\"line\"> */</div><div class=\"line\"> static strMapToObj(strMap)&#123;</div><div class=\"line\">    let obj= Object.create(null);</div><div class=\"line\">    for (let[k,v] of strMap) &#123;</div><div class=\"line\">      obj[k] = v;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return obj;</div><div class=\"line\">  &#125;</div><div class=\"line\">  /**</div><div class=\"line\">  *map转换为json</div><div class=\"line\">  */</div><div class=\"line\">  static mapToJson(map) &#123;</div><div class=\"line\">  return JSON.stringify(JsonUitl.strMapToObj(map));</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>map–&gt;array<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">let myMap = new Map().set(true, 7).set(&#123;foo: 3&#125;, [&apos;abc&apos;]);</div><div class=\"line\">&gt; [...myMap]</div></pre></td></tr></table></figure></p>\n<p>array–&gt;map<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">new Map([[true, 7], [&#123;foo: 3&#125;, [&apos;abc&apos;]]])</div><div class=\"line\">Map &#123;true =&gt; 7, Object &#123;foo: 3&#125; =&gt; [&apos;abc&apos;]&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n"},{"title":"js-array-遍历数组","date":"2016-09-10T16:00:00.000Z","_content":"\n```\nfor (let index of ['a', 'b'].keys()) {\n    console.log(index);\n}\n// 0\n// 1\n```\n\n```\nfor (let elem of ['a', 'b'].values()) {\n    console.log(elem);\n}\n// 'a'\n// 'b'\n```\n\n```\nfor (let [index, elem] of ['a', 'b'].entries()) {\n    console.log(index, elem);\n}\n// 0 \"a\"\n// 1 \"b\"\n```\n\n```\nlet letter = ['a', 'b', 'c'];\nlet entries = letter.entries();\nconsole.log(entries.next().value); // [0, 'a']\nconsole.log(entries.next().value); // [1, 'b']\nconsole.log(entries.next().value); // [2, 'c']\n```\n","source":"_posts/Javascript-array/js-array-遍历数组.md","raw":"---\ntitle: js-array-遍历数组\ndate: 2016-09-11\ncategories: \n- javascript\n---\n\n```\nfor (let index of ['a', 'b'].keys()) {\n    console.log(index);\n}\n// 0\n// 1\n```\n\n```\nfor (let elem of ['a', 'b'].values()) {\n    console.log(elem);\n}\n// 'a'\n// 'b'\n```\n\n```\nfor (let [index, elem] of ['a', 'b'].entries()) {\n    console.log(index, elem);\n}\n// 0 \"a\"\n// 1 \"b\"\n```\n\n```\nlet letter = ['a', 'b', 'c'];\nlet entries = letter.entries();\nconsole.log(entries.next().value); // [0, 'a']\nconsole.log(entries.next().value); // [1, 'b']\nconsole.log(entries.next().value); // [2, 'c']\n```\n","slug":"Javascript-array/js-array-遍历数组","published":1,"updated":"2017-02-06T02:46:40.000Z","_id":"ciytg454j0046s10okvlr3ua9","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">for (let index of [&apos;a&apos;, &apos;b&apos;].keys()) &#123;</div><div class=\"line\">    console.log(index);</div><div class=\"line\">&#125;</div><div class=\"line\">// 0</div><div class=\"line\">// 1</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">for (let elem of [&apos;a&apos;, &apos;b&apos;].values()) &#123;</div><div class=\"line\">    console.log(elem);</div><div class=\"line\">&#125;</div><div class=\"line\">// &apos;a&apos;</div><div class=\"line\">// &apos;b&apos;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">for (let [index, elem] of [&apos;a&apos;, &apos;b&apos;].entries()) &#123;</div><div class=\"line\">    console.log(index, elem);</div><div class=\"line\">&#125;</div><div class=\"line\">// 0 &quot;a&quot;</div><div class=\"line\">// 1 &quot;b&quot;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">let letter = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];</div><div class=\"line\">let entries = letter.entries();</div><div class=\"line\">console.log(entries.next().value); // [0, &apos;a&apos;]</div><div class=\"line\">console.log(entries.next().value); // [1, &apos;b&apos;]</div><div class=\"line\">console.log(entries.next().value); // [2, &apos;c&apos;]</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">for (let index of [&apos;a&apos;, &apos;b&apos;].keys()) &#123;</div><div class=\"line\">    console.log(index);</div><div class=\"line\">&#125;</div><div class=\"line\">// 0</div><div class=\"line\">// 1</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">for (let elem of [&apos;a&apos;, &apos;b&apos;].values()) &#123;</div><div class=\"line\">    console.log(elem);</div><div class=\"line\">&#125;</div><div class=\"line\">// &apos;a&apos;</div><div class=\"line\">// &apos;b&apos;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">for (let [index, elem] of [&apos;a&apos;, &apos;b&apos;].entries()) &#123;</div><div class=\"line\">    console.log(index, elem);</div><div class=\"line\">&#125;</div><div class=\"line\">// 0 &quot;a&quot;</div><div class=\"line\">// 1 &quot;b&quot;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">let letter = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];</div><div class=\"line\">let entries = letter.entries();</div><div class=\"line\">console.log(entries.next().value); // [0, &apos;a&apos;]</div><div class=\"line\">console.log(entries.next().value); // [1, &apos;b&apos;]</div><div class=\"line\">console.log(entries.next().value); // [2, &apos;c&apos;]</div></pre></td></tr></table></figure>\n"},{"title":"js-Promise-race","date":"2016-09-10T16:00:00.000Z","_content":"\n> Promise.race(iterable),iterable[]-->指多个Promise值\n\n>返回第一个被确认(谁快谁先上)\n\n```\n// `delay`毫秒后执行resolve\nfunction timerPromisefy(delay) {\n    return new Promise(function (resolve) {\n        setTimeout(function () {\n            resolve(delay);\n        }, delay);\n    });\n}\n// 任何一个promise变为resolve或reject 的话程序就停止运行\nPromise.race([\n    timerPromisefy(1000),\n    timerPromisefy(32),\n    timerPromisefy(64),\n    timerPromisefy(128)\n]).then(function (value) {\n    console.log(value);    // => 32\n});\n```\n\n> 其他的Promise会继续运行\n","source":"_posts/Javascript-Promise/js-Promise-race.md","raw":"---\ntitle: js-Promise-race\ndate: 2016-09-11\ncategories: \n- javascript\n---\n\n> Promise.race(iterable),iterable[]-->指多个Promise值\n\n>返回第一个被确认(谁快谁先上)\n\n```\n// `delay`毫秒后执行resolve\nfunction timerPromisefy(delay) {\n    return new Promise(function (resolve) {\n        setTimeout(function () {\n            resolve(delay);\n        }, delay);\n    });\n}\n// 任何一个promise变为resolve或reject 的话程序就停止运行\nPromise.race([\n    timerPromisefy(1000),\n    timerPromisefy(32),\n    timerPromisefy(64),\n    timerPromisefy(128)\n]).then(function (value) {\n    console.log(value);    // => 32\n});\n```\n\n> 其他的Promise会继续运行\n","slug":"Javascript-Promise/js-Promise-race","published":1,"updated":"2017-02-06T02:49:53.000Z","_id":"ciytg488u0047s10oqjb8p8sw","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>Promise.race(iterable),iterable[]–&gt;指多个Promise值</p>\n<p>返回第一个被确认(谁快谁先上)</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">// `delay`毫秒后执行resolve</div><div class=\"line\">function timerPromisefy(delay) &#123;</div><div class=\"line\">    return new Promise(function (resolve) &#123;</div><div class=\"line\">        setTimeout(function () &#123;</div><div class=\"line\">            resolve(delay);</div><div class=\"line\">        &#125;, delay);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\">// 任何一个promise变为resolve或reject 的话程序就停止运行</div><div class=\"line\">Promise.race([</div><div class=\"line\">    timerPromisefy(1000),</div><div class=\"line\">    timerPromisefy(32),</div><div class=\"line\">    timerPromisefy(64),</div><div class=\"line\">    timerPromisefy(128)</div><div class=\"line\">]).then(function (value) &#123;</div><div class=\"line\">    console.log(value);    // =&gt; 32</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>其他的Promise会继续运行</p>\n</blockquote>\n","excerpt":"","more":"<blockquote>\n<p>Promise.race(iterable),iterable[]–&gt;指多个Promise值</p>\n<p>返回第一个被确认(谁快谁先上)</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">// `delay`毫秒后执行resolve</div><div class=\"line\">function timerPromisefy(delay) &#123;</div><div class=\"line\">    return new Promise(function (resolve) &#123;</div><div class=\"line\">        setTimeout(function () &#123;</div><div class=\"line\">            resolve(delay);</div><div class=\"line\">        &#125;, delay);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\">// 任何一个promise变为resolve或reject 的话程序就停止运行</div><div class=\"line\">Promise.race([</div><div class=\"line\">    timerPromisefy(1000),</div><div class=\"line\">    timerPromisefy(32),</div><div class=\"line\">    timerPromisefy(64),</div><div class=\"line\">    timerPromisefy(128)</div><div class=\"line\">]).then(function (value) &#123;</div><div class=\"line\">    console.log(value);    // =&gt; 32</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>其他的Promise会继续运行</p>\n</blockquote>\n"},{"title":"js-Promise-Thenable","date":"2016-09-10T16:00:00.000Z","_content":"\n> 类似Promise 具有.then 方法的对象\n\n> JQuery.ajax() 返回值就是thenable,即是jqXHR Object\n\n","source":"_posts/Javascript-Promise/js-Promise-Thenable.md","raw":"---\ntitle: js-Promise-Thenable\ndate: 2016-09-11\ncategories: \n- javascript\n---\n\n> 类似Promise 具有.then 方法的对象\n\n> JQuery.ajax() 返回值就是thenable,即是jqXHR Object\n\n","slug":"Javascript-Promise/js-Promise-Thenable","published":1,"updated":"2017-02-06T03:11:11.000Z","_id":"ciytg488v0048s10o1uh8l7o1","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>类似Promise 具有.then 方法的对象</p>\n<p>JQuery.ajax() 返回值就是thenable,即是jqXHR Object</p>\n</blockquote>\n","excerpt":"","more":"<blockquote>\n<p>类似Promise 具有.then 方法的对象</p>\n<p>JQuery.ajax() 返回值就是thenable,即是jqXHR Object</p>\n</blockquote>\n"},{"title":"js-Promise-catch","date":"2016-09-10T16:00:00.000Z","_content":"\n> 代替catch\n\n```\nvar promise = Promise.reject(new Error(\"message\"));\npromise.then(undefined, function (error) {\n    console.error(error);\n});\n```\n\n\n``\n由于 catch 标识符可能会导致问题出现，因此一些类库（Library）也采用了 caught 作为函数名，而函数要完成的工作是一样的。\n\n而且很多压缩工具自带了将 promise.catch 转换为 promise[\"catch\"] 的功能， 所以可能不经意之间也能帮我们解决这个问题。\n\n如果各位读者需要支持IE8及以下版本的浏览器的话，那么一定要将这个 catch 问题牢记在心中。\n``\n","source":"_posts/Javascript-Promise/js-Promise-catch.md","raw":"---\ntitle: js-Promise-catch\ndate: 2016-09-11\ncategories: \n- javascript\n---\n\n> 代替catch\n\n```\nvar promise = Promise.reject(new Error(\"message\"));\npromise.then(undefined, function (error) {\n    console.error(error);\n});\n```\n\n\n``\n由于 catch 标识符可能会导致问题出现，因此一些类库（Library）也采用了 caught 作为函数名，而函数要完成的工作是一样的。\n\n而且很多压缩工具自带了将 promise.catch 转换为 promise[\"catch\"] 的功能， 所以可能不经意之间也能帮我们解决这个问题。\n\n如果各位读者需要支持IE8及以下版本的浏览器的话，那么一定要将这个 catch 问题牢记在心中。\n``\n","slug":"Javascript-Promise/js-Promise-catch","published":1,"updated":"2017-02-06T03:11:01.000Z","_id":"ciytg488w0049s10oiz17mbhw","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>代替catch</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var promise = Promise.reject(new Error(&quot;message&quot;));</div><div class=\"line\">promise.then(undefined, function (error) &#123;</div><div class=\"line\">    console.error(error);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>``<br>由于 catch 标识符可能会导致问题出现，因此一些类库（Library）也采用了 caught 作为函数名，而函数要完成的工作是一样的。</p>\n<p>而且很多压缩工具自带了将 promise.catch 转换为 promise[“catch”] 的功能， 所以可能不经意之间也能帮我们解决这个问题。</p>\n<p>如果各位读者需要支持IE8及以下版本的浏览器的话，那么一定要将这个 catch 问题牢记在心中。<br>``</p>\n","excerpt":"","more":"<blockquote>\n<p>代替catch</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var promise = Promise.reject(new Error(&quot;message&quot;));</div><div class=\"line\">promise.then(undefined, function (error) &#123;</div><div class=\"line\">    console.error(error);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>``<br>由于 catch 标识符可能会导致问题出现，因此一些类库（Library）也采用了 caught 作为函数名，而函数要完成的工作是一样的。</p>\n<p>而且很多压缩工具自带了将 promise.catch 转换为 promise[“catch”] 的功能， 所以可能不经意之间也能帮我们解决这个问题。</p>\n<p>如果各位读者需要支持IE8及以下版本的浏览器的话，那么一定要将这个 catch 问题牢记在心中。<br>``</p>\n"},{"title":"js-Promise-简介及例子","date":"2016-09-10T16:00:00.000Z","_content":"\n> 用于管理与异步API交互的抽象对象,避免使用回调函数的层层嵌套\n\n> 状态:等待->完成->拒绝\n\n> 必须有一个then(),第一个参数是resolved,第二个是rejected函数;\n\n实例:\n查询学生的信息列表，有一个文本框可以输入学生的姓名，可以进行查找指定的学生信息，如果不存在就不进行学生信息列表的查询了，如果存在，再进行下一步的查询。\n\n```\n<script type=\"text/javascript\">\n\n        //判断是否存在该学生姓名\n        var isExistStu = function (name) {\n            var promise = new Promise(function (resolve, reject) {\n                $.ajax({\n                    type: \"Post\",\n                    url: \"/student/student/checkstu\",\n                    dataType: \"json\",\n                    data: JSON.stringify({\n                        name: name\n                    }),\n                    contentType: \"application/json;charset-utf-8\",\n                    success: function (data) {\n                        resolve(data);  //data 返回来的是 true 或者 false\n                    }\n                });\n            });\n        }\n\n        //查询根据学生姓名查询学生信息列表\n        var searchStu = function (name) {\n            var promise = new Promise(function (resolve, reject) {\n                $.ajax({\n                    type: \"Post\",\n                    url: \"/student/student/getstulist\",\n                    dataType: \"json\",\n                    data: JSON.stringify({\n                        name: name\n                    }),\n                    contentType: \"application/json;charset-utf-8\",\n                    success: function (data) {\n                        resolve(data);  //data 返回来的是学生信息列表\n                    }\n                });\n            });\n        }\n\n        \n\n        window.onload = function () {\n            var stuName = $(\"txtName\").val();\n            isExistStu(stuName).then(function (data) {\n                if (data == \"true\") {\n                    return searchStu(stuName);\n                }\n                else {\n                    return;\n                }\n            }).then(function (data) {\n                showTable(data);\n            })\n        }\n\n        //展示 学生信息列表表格\n        function showTable(data) {\n            var html = \"<table>\";\n            for (var i = 0; i < data.length; i++) {\n                html += \"<tr>\";\n                html += \"<td>\" + data.name + \"</td>\";\n                html += \"<td>\" + data.address + \"</td>\";\n                html += \"</tr>\";\n            }\n            html += \"</table>\";\n\n            $(\">divTable\").html(html);\n        }\n\n    </script>\n    \n    \n    \n    \n    function add(xPromise,yPromise) {\n    // `Promise.all([ .. ])`接收一个Promise的数组，\n    // 并返回一个等待它们全部完成的新Promise\n    return Promise.all( [xPromise, yPromise] )\n\n    // 当这个Promise被解析后，我们拿起收到的`X`和`Y`的值，并把它们相加\n    .then( function(values){\n        // `values`是一个从先前被解析的Promise那里收到的消息数组\n        return values[0] + values[1];\n    } );\n}\n\n// `fetchX()`和`fetchY()`分别为它们的值返回一个Promise，\n// 这些值可能在 *现在* 或 *稍后* 准备好\nadd( fetchX(), fetchY() )\n\n// 为了将两个数字相加，我们得到一个Promise。\n// 现在我们链式地调用`then(..)`来等待返回的Promise被解析\n.then( function(sum){\n    console.log( sum ); // 这容易多了！\n} );\n\n```\n","source":"_posts/Javascript-Promise/js-Promise-简介及例子.md","raw":"---\ntitle: js-Promise-简介及例子\ndate: 2016-09-11\ncategories: \n- javascript\n---\n\n> 用于管理与异步API交互的抽象对象,避免使用回调函数的层层嵌套\n\n> 状态:等待->完成->拒绝\n\n> 必须有一个then(),第一个参数是resolved,第二个是rejected函数;\n\n实例:\n查询学生的信息列表，有一个文本框可以输入学生的姓名，可以进行查找指定的学生信息，如果不存在就不进行学生信息列表的查询了，如果存在，再进行下一步的查询。\n\n```\n<script type=\"text/javascript\">\n\n        //判断是否存在该学生姓名\n        var isExistStu = function (name) {\n            var promise = new Promise(function (resolve, reject) {\n                $.ajax({\n                    type: \"Post\",\n                    url: \"/student/student/checkstu\",\n                    dataType: \"json\",\n                    data: JSON.stringify({\n                        name: name\n                    }),\n                    contentType: \"application/json;charset-utf-8\",\n                    success: function (data) {\n                        resolve(data);  //data 返回来的是 true 或者 false\n                    }\n                });\n            });\n        }\n\n        //查询根据学生姓名查询学生信息列表\n        var searchStu = function (name) {\n            var promise = new Promise(function (resolve, reject) {\n                $.ajax({\n                    type: \"Post\",\n                    url: \"/student/student/getstulist\",\n                    dataType: \"json\",\n                    data: JSON.stringify({\n                        name: name\n                    }),\n                    contentType: \"application/json;charset-utf-8\",\n                    success: function (data) {\n                        resolve(data);  //data 返回来的是学生信息列表\n                    }\n                });\n            });\n        }\n\n        \n\n        window.onload = function () {\n            var stuName = $(\"txtName\").val();\n            isExistStu(stuName).then(function (data) {\n                if (data == \"true\") {\n                    return searchStu(stuName);\n                }\n                else {\n                    return;\n                }\n            }).then(function (data) {\n                showTable(data);\n            })\n        }\n\n        //展示 学生信息列表表格\n        function showTable(data) {\n            var html = \"<table>\";\n            for (var i = 0; i < data.length; i++) {\n                html += \"<tr>\";\n                html += \"<td>\" + data.name + \"</td>\";\n                html += \"<td>\" + data.address + \"</td>\";\n                html += \"</tr>\";\n            }\n            html += \"</table>\";\n\n            $(\">divTable\").html(html);\n        }\n\n    </script>\n    \n    \n    \n    \n    function add(xPromise,yPromise) {\n    // `Promise.all([ .. ])`接收一个Promise的数组，\n    // 并返回一个等待它们全部完成的新Promise\n    return Promise.all( [xPromise, yPromise] )\n\n    // 当这个Promise被解析后，我们拿起收到的`X`和`Y`的值，并把它们相加\n    .then( function(values){\n        // `values`是一个从先前被解析的Promise那里收到的消息数组\n        return values[0] + values[1];\n    } );\n}\n\n// `fetchX()`和`fetchY()`分别为它们的值返回一个Promise，\n// 这些值可能在 *现在* 或 *稍后* 准备好\nadd( fetchX(), fetchY() )\n\n// 为了将两个数字相加，我们得到一个Promise。\n// 现在我们链式地调用`then(..)`来等待返回的Promise被解析\n.then( function(sum){\n    console.log( sum ); // 这容易多了！\n} );\n\n```\n","slug":"Javascript-Promise/js-Promise-简介及例子","published":1,"updated":"2017-02-06T03:11:01.000Z","_id":"ciytg488x004as10o6il7042j","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>用于管理与异步API交互的抽象对象,避免使用回调函数的层层嵌套</p>\n<p>状态:等待-&gt;完成-&gt;拒绝</p>\n<p>必须有一个then(),第一个参数是resolved,第二个是rejected函数;</p>\n</blockquote>\n<p>实例:<br>查询学生的信息列表，有一个文本框可以输入学生的姓名，可以进行查找指定的学生信息，如果不存在就不进行学生信息列表的查询了，如果存在，再进行下一步的查询。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">        //判断是否存在该学生姓名</div><div class=\"line\">        var isExistStu = function (name) &#123;</div><div class=\"line\">            var promise = new Promise(function (resolve, reject) &#123;</div><div class=\"line\">                $.ajax(&#123;</div><div class=\"line\">                    type: &quot;Post&quot;,</div><div class=\"line\">                    url: &quot;/student/student/checkstu&quot;,</div><div class=\"line\">                    dataType: &quot;json&quot;,</div><div class=\"line\">                    data: JSON.stringify(&#123;</div><div class=\"line\">                        name: name</div><div class=\"line\">                    &#125;),</div><div class=\"line\">                    contentType: &quot;application/json;charset-utf-8&quot;,</div><div class=\"line\">                    success: function (data) &#123;</div><div class=\"line\">                        resolve(data);  //data 返回来的是 true 或者 false</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        //查询根据学生姓名查询学生信息列表</div><div class=\"line\">        var searchStu = function (name) &#123;</div><div class=\"line\">            var promise = new Promise(function (resolve, reject) &#123;</div><div class=\"line\">                $.ajax(&#123;</div><div class=\"line\">                    type: &quot;Post&quot;,</div><div class=\"line\">                    url: &quot;/student/student/getstulist&quot;,</div><div class=\"line\">                    dataType: &quot;json&quot;,</div><div class=\"line\">                    data: JSON.stringify(&#123;</div><div class=\"line\">                        name: name</div><div class=\"line\">                    &#125;),</div><div class=\"line\">                    contentType: &quot;application/json;charset-utf-8&quot;,</div><div class=\"line\">                    success: function (data) &#123;</div><div class=\"line\">                        resolve(data);  //data 返回来的是学生信息列表</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        </div><div class=\"line\"></div><div class=\"line\">        window.onload = function () &#123;</div><div class=\"line\">            var stuName = $(&quot;txtName&quot;).val();</div><div class=\"line\">            isExistStu(stuName).then(function (data) &#123;</div><div class=\"line\">                if (data == &quot;true&quot;) &#123;</div><div class=\"line\">                    return searchStu(stuName);</div><div class=\"line\">                &#125;</div><div class=\"line\">                else &#123;</div><div class=\"line\">                    return;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;).then(function (data) &#123;</div><div class=\"line\">                showTable(data);</div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        //展示 学生信息列表表格</div><div class=\"line\">        function showTable(data) &#123;</div><div class=\"line\">            var html = &quot;&lt;table&gt;&quot;;</div><div class=\"line\">            for (var i = 0; i &lt; data.length; i++) &#123;</div><div class=\"line\">                html += &quot;&lt;tr&gt;&quot;;</div><div class=\"line\">                html += &quot;&lt;td&gt;&quot; + data.name + &quot;&lt;/td&gt;&quot;;</div><div class=\"line\">                html += &quot;&lt;td&gt;&quot; + data.address + &quot;&lt;/td&gt;&quot;;</div><div class=\"line\">                html += &quot;&lt;/tr&gt;&quot;;</div><div class=\"line\">            &#125;</div><div class=\"line\">            html += &quot;&lt;/table&gt;&quot;;</div><div class=\"line\"></div><div class=\"line\">            $(&quot;&gt;divTable&quot;).html(html);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &lt;/script&gt;</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    function add(xPromise,yPromise) &#123;</div><div class=\"line\">    // `Promise.all([ .. ])`接收一个Promise的数组，</div><div class=\"line\">    // 并返回一个等待它们全部完成的新Promise</div><div class=\"line\">    return Promise.all( [xPromise, yPromise] )</div><div class=\"line\"></div><div class=\"line\">    // 当这个Promise被解析后，我们拿起收到的`X`和`Y`的值，并把它们相加</div><div class=\"line\">    .then( function(values)&#123;</div><div class=\"line\">        // `values`是一个从先前被解析的Promise那里收到的消息数组</div><div class=\"line\">        return values[0] + values[1];</div><div class=\"line\">    &#125; );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// `fetchX()`和`fetchY()`分别为它们的值返回一个Promise，</div><div class=\"line\">// 这些值可能在 *现在* 或 *稍后* 准备好</div><div class=\"line\">add( fetchX(), fetchY() )</div><div class=\"line\"></div><div class=\"line\">// 为了将两个数字相加，我们得到一个Promise。</div><div class=\"line\">// 现在我们链式地调用`then(..)`来等待返回的Promise被解析</div><div class=\"line\">.then( function(sum)&#123;</div><div class=\"line\">    console.log( sum ); // 这容易多了！</div><div class=\"line\">&#125; );</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>用于管理与异步API交互的抽象对象,避免使用回调函数的层层嵌套</p>\n<p>状态:等待-&gt;完成-&gt;拒绝</p>\n<p>必须有一个then(),第一个参数是resolved,第二个是rejected函数;</p>\n</blockquote>\n<p>实例:<br>查询学生的信息列表，有一个文本框可以输入学生的姓名，可以进行查找指定的学生信息，如果不存在就不进行学生信息列表的查询了，如果存在，再进行下一步的查询。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">        //判断是否存在该学生姓名</div><div class=\"line\">        var isExistStu = function (name) &#123;</div><div class=\"line\">            var promise = new Promise(function (resolve, reject) &#123;</div><div class=\"line\">                $.ajax(&#123;</div><div class=\"line\">                    type: &quot;Post&quot;,</div><div class=\"line\">                    url: &quot;/student/student/checkstu&quot;,</div><div class=\"line\">                    dataType: &quot;json&quot;,</div><div class=\"line\">                    data: JSON.stringify(&#123;</div><div class=\"line\">                        name: name</div><div class=\"line\">                    &#125;),</div><div class=\"line\">                    contentType: &quot;application/json;charset-utf-8&quot;,</div><div class=\"line\">                    success: function (data) &#123;</div><div class=\"line\">                        resolve(data);  //data 返回来的是 true 或者 false</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        //查询根据学生姓名查询学生信息列表</div><div class=\"line\">        var searchStu = function (name) &#123;</div><div class=\"line\">            var promise = new Promise(function (resolve, reject) &#123;</div><div class=\"line\">                $.ajax(&#123;</div><div class=\"line\">                    type: &quot;Post&quot;,</div><div class=\"line\">                    url: &quot;/student/student/getstulist&quot;,</div><div class=\"line\">                    dataType: &quot;json&quot;,</div><div class=\"line\">                    data: JSON.stringify(&#123;</div><div class=\"line\">                        name: name</div><div class=\"line\">                    &#125;),</div><div class=\"line\">                    contentType: &quot;application/json;charset-utf-8&quot;,</div><div class=\"line\">                    success: function (data) &#123;</div><div class=\"line\">                        resolve(data);  //data 返回来的是学生信息列表</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        </div><div class=\"line\"></div><div class=\"line\">        window.onload = function () &#123;</div><div class=\"line\">            var stuName = $(&quot;txtName&quot;).val();</div><div class=\"line\">            isExistStu(stuName).then(function (data) &#123;</div><div class=\"line\">                if (data == &quot;true&quot;) &#123;</div><div class=\"line\">                    return searchStu(stuName);</div><div class=\"line\">                &#125;</div><div class=\"line\">                else &#123;</div><div class=\"line\">                    return;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;).then(function (data) &#123;</div><div class=\"line\">                showTable(data);</div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        //展示 学生信息列表表格</div><div class=\"line\">        function showTable(data) &#123;</div><div class=\"line\">            var html = &quot;&lt;table&gt;&quot;;</div><div class=\"line\">            for (var i = 0; i &lt; data.length; i++) &#123;</div><div class=\"line\">                html += &quot;&lt;tr&gt;&quot;;</div><div class=\"line\">                html += &quot;&lt;td&gt;&quot; + data.name + &quot;&lt;/td&gt;&quot;;</div><div class=\"line\">                html += &quot;&lt;td&gt;&quot; + data.address + &quot;&lt;/td&gt;&quot;;</div><div class=\"line\">                html += &quot;&lt;/tr&gt;&quot;;</div><div class=\"line\">            &#125;</div><div class=\"line\">            html += &quot;&lt;/table&gt;&quot;;</div><div class=\"line\"></div><div class=\"line\">            $(&quot;&gt;divTable&quot;).html(html);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &lt;/script&gt;</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    function add(xPromise,yPromise) &#123;</div><div class=\"line\">    // `Promise.all([ .. ])`接收一个Promise的数组，</div><div class=\"line\">    // 并返回一个等待它们全部完成的新Promise</div><div class=\"line\">    return Promise.all( [xPromise, yPromise] )</div><div class=\"line\"></div><div class=\"line\">    // 当这个Promise被解析后，我们拿起收到的`X`和`Y`的值，并把它们相加</div><div class=\"line\">    .then( function(values)&#123;</div><div class=\"line\">        // `values`是一个从先前被解析的Promise那里收到的消息数组</div><div class=\"line\">        return values[0] + values[1];</div><div class=\"line\">    &#125; );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// `fetchX()`和`fetchY()`分别为它们的值返回一个Promise，</div><div class=\"line\">// 这些值可能在 *现在* 或 *稍后* 准备好</div><div class=\"line\">add( fetchX(), fetchY() )</div><div class=\"line\"></div><div class=\"line\">// 为了将两个数字相加，我们得到一个Promise。</div><div class=\"line\">// 现在我们链式地调用`then(..)`来等待返回的Promise被解析</div><div class=\"line\">.then( function(sum)&#123;</div><div class=\"line\">    console.log( sum ); // 这容易多了！</div><div class=\"line\">&#125; );</div></pre></td></tr></table></figure>\n"},{"title":"js-Promise-all","date":"2016-09-10T16:00:00.000Z","_content":"\n> Promise.all(func1, func2 [,funcN])\n两个或两个以上,仅在所有指定承诺均完成 或者被拒绝时返回\n\n> 返回承诺返回而组成的数组.\n\n> 一旦其中承诺被拒绝则立刻返回拒绝承诺的原因,而其他值被丢弃\n","source":"_posts/Javascript-Promise/js-Promise-all.md","raw":"---\ntitle: js-Promise-all\ndate: 2016-09-11\ncategories: \n- javascript\n---\n\n> Promise.all(func1, func2 [,funcN])\n两个或两个以上,仅在所有指定承诺均完成 或者被拒绝时返回\n\n> 返回承诺返回而组成的数组.\n\n> 一旦其中承诺被拒绝则立刻返回拒绝承诺的原因,而其他值被丢弃\n","slug":"Javascript-Promise/js-Promise-all","published":1,"updated":"2017-02-06T03:11:01.000Z","_id":"ciytg488y004bs10osdpfmmur","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>Promise.all(func1, func2 [,funcN])<br>两个或两个以上,仅在所有指定承诺均完成 或者被拒绝时返回</p>\n<p>返回承诺返回而组成的数组.</p>\n<p>一旦其中承诺被拒绝则立刻返回拒绝承诺的原因,而其他值被丢弃</p>\n</blockquote>\n","excerpt":"","more":"<blockquote>\n<p>Promise.all(func1, func2 [,funcN])<br>两个或两个以上,仅在所有指定承诺均完成 或者被拒绝时返回</p>\n<p>返回承诺返回而组成的数组.</p>\n<p>一旦其中承诺被拒绝则立刻返回拒绝承诺的原因,而其他值被丢弃</p>\n</blockquote>\n"},{"title":"js-Promise-传值","date":"2016-09-10T16:00:00.000Z","_content":"\n```\nfunction doubleUp(value) {\n    return value * 2;\n}\nfunction increment(value) {\n    return value + 1;\n}\nfunction output(value) {\n    console.log(value);// => (1 + 1) * 2\n}\n\nvar promise = Promise.resolve(1);\npromise\n    .then(increment)\n    .then(doubleUp)\n    .then(output)\n    .catch(function(error){\n        // promise chain中出现异常的时候会被调用\n        console.error(error);\n    });\n```\n","source":"_posts/Javascript-Promise/js-Promise-传值.md","raw":"---\ntitle: js-Promise-传值\ndate: 2016-09-11\ncategories: \n- javascript\n---\n\n```\nfunction doubleUp(value) {\n    return value * 2;\n}\nfunction increment(value) {\n    return value + 1;\n}\nfunction output(value) {\n    console.log(value);// => (1 + 1) * 2\n}\n\nvar promise = Promise.resolve(1);\npromise\n    .then(increment)\n    .then(doubleUp)\n    .then(output)\n    .catch(function(error){\n        // promise chain中出现异常的时候会被调用\n        console.error(error);\n    });\n```\n","slug":"Javascript-Promise/js-Promise-传值","published":1,"updated":"2017-02-06T02:49:30.000Z","_id":"ciytg4892004ds10oitezfneh","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">function doubleUp(value) &#123;</div><div class=\"line\">    return value * 2;</div><div class=\"line\">&#125;</div><div class=\"line\">function increment(value) &#123;</div><div class=\"line\">    return value + 1;</div><div class=\"line\">&#125;</div><div class=\"line\">function output(value) &#123;</div><div class=\"line\">    console.log(value);// =&gt; (1 + 1) * 2</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var promise = Promise.resolve(1);</div><div class=\"line\">promise</div><div class=\"line\">    .then(increment)</div><div class=\"line\">    .then(doubleUp)</div><div class=\"line\">    .then(output)</div><div class=\"line\">    .catch(function(error)&#123;</div><div class=\"line\">        // promise chain中出现异常的时候会被调用</div><div class=\"line\">        console.error(error);</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">function doubleUp(value) &#123;</div><div class=\"line\">    return value * 2;</div><div class=\"line\">&#125;</div><div class=\"line\">function increment(value) &#123;</div><div class=\"line\">    return value + 1;</div><div class=\"line\">&#125;</div><div class=\"line\">function output(value) &#123;</div><div class=\"line\">    console.log(value);// =&gt; (1 + 1) * 2</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var promise = Promise.resolve(1);</div><div class=\"line\">promise</div><div class=\"line\">    .then(increment)</div><div class=\"line\">    .then(doubleUp)</div><div class=\"line\">    .then(output)</div><div class=\"line\">    .catch(function(error)&#123;</div><div class=\"line\">        // promise chain中出现异常的时候会被调用</div><div class=\"line\">        console.error(error);</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n"},{"title":"js-Promise","date":"2016-09-10T16:00:00.000Z","_content":"\n```\nvar assert = require('power-assert');\n\ndescribe('Basic Test', function () {\n\n    it(\"should use `done` for test?\", function (done) {\n        var promise = Promise.resolve();\n        promise.then(function (value) {\n            assert(false);\n        }).then(done, done);\n    });\n\n});\n\n```\n\n> 第二种写法\n```\nit(\"should be fail\", function () {\n    return Promise.resolve().then(function () {\n        assert(false);// => 测试失败\n    });\n});\n```\n","source":"_posts/Javascript-Promise/js-Promise.md","raw":"---\ntitle: js-Promise\ndate: 2016-09-11\ncategories: \n- javascript\n---\n\n```\nvar assert = require('power-assert');\n\ndescribe('Basic Test', function () {\n\n    it(\"should use `done` for test?\", function (done) {\n        var promise = Promise.resolve();\n        promise.then(function (value) {\n            assert(false);\n        }).then(done, done);\n    });\n\n});\n\n```\n\n> 第二种写法\n```\nit(\"should be fail\", function () {\n    return Promise.resolve().then(function () {\n        assert(false);// => 测试失败\n    });\n});\n```\n","slug":"Javascript-Promise/js-Promise","published":1,"updated":"2017-02-06T03:11:01.000Z","_id":"ciytg4894004es10o95d6dnwy","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var assert = require(&apos;power-assert&apos;);</div><div class=\"line\"></div><div class=\"line\">describe(&apos;Basic Test&apos;, function () &#123;</div><div class=\"line\"></div><div class=\"line\">    it(&quot;should use `done` for test?&quot;, function (done) &#123;</div><div class=\"line\">        var promise = Promise.resolve();</div><div class=\"line\">        promise.then(function (value) &#123;</div><div class=\"line\">            assert(false);</div><div class=\"line\">        &#125;).then(done, done);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>第二种写法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(&quot;should be fail&quot;, function () &#123;</div><div class=\"line\">    return Promise.resolve().then(function () &#123;</div><div class=\"line\">        assert(false);// =&gt; 测试失败</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n</blockquote>\n","excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var assert = require(&apos;power-assert&apos;);</div><div class=\"line\"></div><div class=\"line\">describe(&apos;Basic Test&apos;, function () &#123;</div><div class=\"line\"></div><div class=\"line\">    it(&quot;should use `done` for test?&quot;, function (done) &#123;</div><div class=\"line\">        var promise = Promise.resolve();</div><div class=\"line\">        promise.then(function (value) &#123;</div><div class=\"line\">            assert(false);</div><div class=\"line\">        &#125;).then(done, done);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>第二种写法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(&quot;should be fail&quot;, function () &#123;</div><div class=\"line\">    return Promise.resolve().then(function () &#123;</div><div class=\"line\">        assert(false);// =&gt; 测试失败</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n</blockquote>\n"},{"title":"js-Promise-解决地狱回调","date":"2016-09-10T16:00:00.000Z","_content":"\n> 之前见过的一道Promise面试题的答案\n\n```\nfunction red(){\n    console.log('red');\n}\nfunction green(){\n    console.log('green');\n}\nfunction yellow(){\n    console.log('yellow');\n}\n\nvar tic = function(timmer, cb){\n    return new Promise(function(resolve, reject) {\n        setTimeout(function() {\n            cb();\n            resolve();\n        }, timmer);\n    });\n};\n\nvar d = new Promise(function(resolve, reject){resolve();});\nvar step = function(def) {\n    def.then(function(){\n        return tic(3000, red);\n    }).then(function(){\n        return tic(2000, green);\n    }).then(function(){\n        return tic(1000, yellow);\n    }).then(function(){\n        step(def);\n    });\n}\n\nstep(d);\n```\n","source":"_posts/Javascript-Promise/js-Promise-解决地狱回调.md","raw":"---\ntitle: js-Promise-解决地狱回调\ndate: 2016-09-11\ncategories: \n- javascript\n---\n\n> 之前见过的一道Promise面试题的答案\n\n```\nfunction red(){\n    console.log('red');\n}\nfunction green(){\n    console.log('green');\n}\nfunction yellow(){\n    console.log('yellow');\n}\n\nvar tic = function(timmer, cb){\n    return new Promise(function(resolve, reject) {\n        setTimeout(function() {\n            cb();\n            resolve();\n        }, timmer);\n    });\n};\n\nvar d = new Promise(function(resolve, reject){resolve();});\nvar step = function(def) {\n    def.then(function(){\n        return tic(3000, red);\n    }).then(function(){\n        return tic(2000, green);\n    }).then(function(){\n        return tic(1000, yellow);\n    }).then(function(){\n        step(def);\n    });\n}\n\nstep(d);\n```\n","slug":"Javascript-Promise/js-Promise-解决地狱回调","published":1,"updated":"2017-02-06T03:11:01.000Z","_id":"ciytg4895004fs10oxligw1sf","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>之前见过的一道Promise面试题的答案</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">function red()&#123;</div><div class=\"line\">    console.log(&apos;red&apos;);</div><div class=\"line\">&#125;</div><div class=\"line\">function green()&#123;</div><div class=\"line\">    console.log(&apos;green&apos;);</div><div class=\"line\">&#125;</div><div class=\"line\">function yellow()&#123;</div><div class=\"line\">    console.log(&apos;yellow&apos;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var tic = function(timmer, cb)&#123;</div><div class=\"line\">    return new Promise(function(resolve, reject) &#123;</div><div class=\"line\">        setTimeout(function() &#123;</div><div class=\"line\">            cb();</div><div class=\"line\">            resolve();</div><div class=\"line\">        &#125;, timmer);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var d = new Promise(function(resolve, reject)&#123;resolve();&#125;);</div><div class=\"line\">var step = function(def) &#123;</div><div class=\"line\">    def.then(function()&#123;</div><div class=\"line\">        return tic(3000, red);</div><div class=\"line\">    &#125;).then(function()&#123;</div><div class=\"line\">        return tic(2000, green);</div><div class=\"line\">    &#125;).then(function()&#123;</div><div class=\"line\">        return tic(1000, yellow);</div><div class=\"line\">    &#125;).then(function()&#123;</div><div class=\"line\">        step(def);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">step(d);</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>之前见过的一道Promise面试题的答案</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">function red()&#123;</div><div class=\"line\">    console.log(&apos;red&apos;);</div><div class=\"line\">&#125;</div><div class=\"line\">function green()&#123;</div><div class=\"line\">    console.log(&apos;green&apos;);</div><div class=\"line\">&#125;</div><div class=\"line\">function yellow()&#123;</div><div class=\"line\">    console.log(&apos;yellow&apos;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var tic = function(timmer, cb)&#123;</div><div class=\"line\">    return new Promise(function(resolve, reject) &#123;</div><div class=\"line\">        setTimeout(function() &#123;</div><div class=\"line\">            cb();</div><div class=\"line\">            resolve();</div><div class=\"line\">        &#125;, timmer);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var d = new Promise(function(resolve, reject)&#123;resolve();&#125;);</div><div class=\"line\">var step = function(def) &#123;</div><div class=\"line\">    def.then(function()&#123;</div><div class=\"line\">        return tic(3000, red);</div><div class=\"line\">    &#125;).then(function()&#123;</div><div class=\"line\">        return tic(2000, green);</div><div class=\"line\">    &#125;).then(function()&#123;</div><div class=\"line\">        return tic(1000, yellow);</div><div class=\"line\">    &#125;).then(function()&#123;</div><div class=\"line\">        step(def);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">step(d);</div></pre></td></tr></table></figure>\n"},{"title":"js-IIFE--立即调用的函数表达式","date":"2016-09-10T16:00:00.000Z","_content":"\n```\n1.(function(){// do something })();\n2.[function(){// do something }()];\n3.(function(){// do something }());\n4.!function(){ // do something }();\n5.~ function() {}();\n6.+ function() {}();\n7.- function() {}()\n\n8.delete function() {}();\n9.typeof function() {}();\n10.void function() {}();\n11.new function() {}();\n12.new function() {};\n\n13.var f = function() {}();\n14.1, function() {}();\n15.1 ^ function() {}();\n16.1 > function() {}();\n```\n","source":"_posts/Javascript/js-IIFE--立即调用的函数表达式.md","raw":"---\ntitle: js-IIFE--立即调用的函数表达式\ndate: 2016-09-11\ncategories: \n- javascript\n---\n\n```\n1.(function(){// do something })();\n2.[function(){// do something }()];\n3.(function(){// do something }());\n4.!function(){ // do something }();\n5.~ function() {}();\n6.+ function() {}();\n7.- function() {}()\n\n8.delete function() {}();\n9.typeof function() {}();\n10.void function() {}();\n11.new function() {}();\n12.new function() {};\n\n13.var f = function() {}();\n14.1, function() {}();\n15.1 ^ function() {}();\n16.1 > function() {}();\n```\n","slug":"Javascript/js-IIFE--立即调用的函数表达式","published":1,"updated":"2017-02-06T02:16:25.000Z","_id":"ciytg4biz004gs10oiihglspf","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">1.(function()&#123;// do something &#125;)();</div><div class=\"line\">2.[function()&#123;// do something &#125;()];</div><div class=\"line\">3.(function()&#123;// do something &#125;());</div><div class=\"line\">4.!function()&#123; // do something &#125;();</div><div class=\"line\">5.~ function() &#123;&#125;();</div><div class=\"line\">6.+ function() &#123;&#125;();</div><div class=\"line\">7.- function() &#123;&#125;()</div><div class=\"line\"></div><div class=\"line\">8.delete function() &#123;&#125;();</div><div class=\"line\">9.typeof function() &#123;&#125;();</div><div class=\"line\">10.void function() &#123;&#125;();</div><div class=\"line\">11.new function() &#123;&#125;();</div><div class=\"line\">12.new function() &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">13.var f = function() &#123;&#125;();</div><div class=\"line\">14.1, function() &#123;&#125;();</div><div class=\"line\">15.1 ^ function() &#123;&#125;();</div><div class=\"line\">16.1 &gt; function() &#123;&#125;();</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">1.(function()&#123;// do something &#125;)();</div><div class=\"line\">2.[function()&#123;// do something &#125;()];</div><div class=\"line\">3.(function()&#123;// do something &#125;());</div><div class=\"line\">4.!function()&#123; // do something &#125;();</div><div class=\"line\">5.~ function() &#123;&#125;();</div><div class=\"line\">6.+ function() &#123;&#125;();</div><div class=\"line\">7.- function() &#123;&#125;()</div><div class=\"line\"></div><div class=\"line\">8.delete function() &#123;&#125;();</div><div class=\"line\">9.typeof function() &#123;&#125;();</div><div class=\"line\">10.void function() &#123;&#125;();</div><div class=\"line\">11.new function() &#123;&#125;();</div><div class=\"line\">12.new function() &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">13.var f = function() &#123;&#125;();</div><div class=\"line\">14.1, function() &#123;&#125;();</div><div class=\"line\">15.1 ^ function() &#123;&#125;();</div><div class=\"line\">16.1 &gt; function() &#123;&#125;();</div></pre></td></tr></table></figure>\n"},{"title":"js-&&-和----用法","date":"2016-09-10T16:00:00.000Z","_content":"\na() && b() :如果执行a()后返回true，则执行b()并返回b的值；如果执行a()后返回false，则整个表达式返回a()的值，b()不执行；\na() || b() :如果执行a()后返回true，则整个表达式返回a()的值，b()不执行；如果执行a()后返回false，则执行b()并返回b()的值；\n&& 优先级高于 ||\n\n如下代码:\n\n```\nalert((1 && 3 || 0) && 4); //结果4 ①\nalert(1 && 3 || 0 && 4); //结果3 ②\nalert(0 && 3 || 1 && 4); //结果4 ③\n```\n\n分析：\n```\n语句①：1&&3 返回3 => 3 || 0 返回 3 => 3&&4 返回 4\n语句②：先执行1&&3 返回3，在执行0&&4返回0，最后执行结果比较 3||0 返回 3\n语句③：先执行0&&3 返回0，在执行1&&4返回4，最后执行结果比较 0||4 返回 4\n注：非0的整数都为true，undefined、null和空字符串”\" 为false。\n```\n","source":"_posts/Javascript/js-&&-和----用法.md","raw":"---\ntitle: js-&&-和----用法\ndate: 2016-09-11\ncategories: \n- javascript\n---\n\na() && b() :如果执行a()后返回true，则执行b()并返回b的值；如果执行a()后返回false，则整个表达式返回a()的值，b()不执行；\na() || b() :如果执行a()后返回true，则整个表达式返回a()的值，b()不执行；如果执行a()后返回false，则执行b()并返回b()的值；\n&& 优先级高于 ||\n\n如下代码:\n\n```\nalert((1 && 3 || 0) && 4); //结果4 ①\nalert(1 && 3 || 0 && 4); //结果3 ②\nalert(0 && 3 || 1 && 4); //结果4 ③\n```\n\n分析：\n```\n语句①：1&&3 返回3 => 3 || 0 返回 3 => 3&&4 返回 4\n语句②：先执行1&&3 返回3，在执行0&&4返回0，最后执行结果比较 3||0 返回 3\n语句③：先执行0&&3 返回0，在执行1&&4返回4，最后执行结果比较 0||4 返回 4\n注：非0的整数都为true，undefined、null和空字符串”\" 为false。\n```\n","slug":"Javascript/js-&&-和----用法","published":1,"updated":"2017-02-06T02:14:47.000Z","_id":"ciytg4bj0004hs10omo1zg4yy","comments":1,"layout":"post","photos":[],"link":"","content":"<p>a() &amp;&amp; b() :如果执行a()后返回true，则执行b()并返回b的值；如果执行a()后返回false，则整个表达式返回a()的值，b()不执行；<br>a() || b() :如果执行a()后返回true，则整个表达式返回a()的值，b()不执行；如果执行a()后返回false，则执行b()并返回b()的值；<br>&amp;&amp; 优先级高于 ||</p>\n<p>如下代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert((1 &amp;&amp; 3 || 0) &amp;&amp; 4); //结果4 ①</div><div class=\"line\">alert(1 &amp;&amp; 3 || 0 &amp;&amp; 4); //结果3 ②</div><div class=\"line\">alert(0 &amp;&amp; 3 || 1 &amp;&amp; 4); //结果4 ③</div></pre></td></tr></table></figure>\n<p>分析：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">语句①：1&amp;&amp;3 返回3 =&gt; 3 || 0 返回 3 =&gt; 3&amp;&amp;4 返回 4</div><div class=\"line\">语句②：先执行1&amp;&amp;3 返回3，在执行0&amp;&amp;4返回0，最后执行结果比较 3||0 返回 3</div><div class=\"line\">语句③：先执行0&amp;&amp;3 返回0，在执行1&amp;&amp;4返回4，最后执行结果比较 0||4 返回 4</div><div class=\"line\">注：非0的整数都为true，undefined、null和空字符串”&quot; 为false。</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>a() &amp;&amp; b() :如果执行a()后返回true，则执行b()并返回b的值；如果执行a()后返回false，则整个表达式返回a()的值，b()不执行；<br>a() || b() :如果执行a()后返回true，则整个表达式返回a()的值，b()不执行；如果执行a()后返回false，则执行b()并返回b()的值；<br>&amp;&amp; 优先级高于 ||</p>\n<p>如下代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert((1 &amp;&amp; 3 || 0) &amp;&amp; 4); //结果4 ①</div><div class=\"line\">alert(1 &amp;&amp; 3 || 0 &amp;&amp; 4); //结果3 ②</div><div class=\"line\">alert(0 &amp;&amp; 3 || 1 &amp;&amp; 4); //结果4 ③</div></pre></td></tr></table></figure>\n<p>分析：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">语句①：1&amp;&amp;3 返回3 =&gt; 3 || 0 返回 3 =&gt; 3&amp;&amp;4 返回 4</div><div class=\"line\">语句②：先执行1&amp;&amp;3 返回3，在执行0&amp;&amp;4返回0，最后执行结果比较 3||0 返回 3</div><div class=\"line\">语句③：先执行0&amp;&amp;3 返回0，在执行1&amp;&amp;4返回4，最后执行结果比较 0||4 返回 4</div><div class=\"line\">注：非0的整数都为true，undefined、null和空字符串”&quot; 为false。</div></pre></td></tr></table></figure></p>\n"},{"title":"js-Reflect","date":"2016-09-10T16:00:00.000Z","_content":"\n# js.Reflect\n\n> http://www.cnblogs.com/diligenceday/p/5474126.html\n\n> Object.defineProperty(obj, name, desc)执行成功会返回obj， 以及其它原因导致的错误\n\n> Reflect.defineProperty只会返回false或者true来表示对象的属性是否设置上了\n\n```\nif (Reflect.defineProperty(obj, name, desc)) {\n  // success\n} else {\n  // failure\n}\n```\n\n> 其余的方法， 比如Relect.set ， Reflect.deleteProperty, Reflect.preventExtensions, >Reflect.setPrototypeOf， 都可以进行重构；\n\n\n# js.Reflect get \n\n```\nvar Reflect = require('harmony-reflect');\n\nvar obj = {\n    \"foo\" : 1,\n    get bar() {\n        return this.foo;\n    }\n};\nvar foo = {};\nfoo.foo = \"heheda\";\nconsole.log(Reflect.get(obj, \"bar\", foo));\n\n```\n\n\n# js.Reflect 函数操作\n\n> 如果要判断一个obj有定义或者继承了属性name， 在ES5中这样判断：name in obj ； 或者删除一个属性 ：> delete obj[name],  虽然这些很好用， 很简短， 很明确， 但是要使用的时候也要封装成一个类；\n\n> 有了Reflect， 它帮你封装好了， Reflect.has(obj, name),  Reflect.deleteProperty(obj, name);\n\n# js.Reflect 可变参数的构造函数\n\n> 演变过程\n\n```\nvar obj = new F(...args)\n\nvar obj = Reflect.construct(F, args)\n```\n\n# js.Reflect 可靠的函数式执行方式\n\n```\n# 演变过程\n\nf.apply(obj, args)\n\n# 避免被重新定义\n\nFunction.prototype.apply.call(f, obj, args)\n\n# 更加简明\nReflect.apply(f, obj, args)\n```\n\n\n\n\n\n","source":"_posts/Javascript/js-Reflect.md","raw":"---\ntitle: js-Reflect\ndate: 2016-09-11\ncategories: \n- javascript\n---\n\n# js.Reflect\n\n> http://www.cnblogs.com/diligenceday/p/5474126.html\n\n> Object.defineProperty(obj, name, desc)执行成功会返回obj， 以及其它原因导致的错误\n\n> Reflect.defineProperty只会返回false或者true来表示对象的属性是否设置上了\n\n```\nif (Reflect.defineProperty(obj, name, desc)) {\n  // success\n} else {\n  // failure\n}\n```\n\n> 其余的方法， 比如Relect.set ， Reflect.deleteProperty, Reflect.preventExtensions, >Reflect.setPrototypeOf， 都可以进行重构；\n\n\n# js.Reflect get \n\n```\nvar Reflect = require('harmony-reflect');\n\nvar obj = {\n    \"foo\" : 1,\n    get bar() {\n        return this.foo;\n    }\n};\nvar foo = {};\nfoo.foo = \"heheda\";\nconsole.log(Reflect.get(obj, \"bar\", foo));\n\n```\n\n\n# js.Reflect 函数操作\n\n> 如果要判断一个obj有定义或者继承了属性name， 在ES5中这样判断：name in obj ； 或者删除一个属性 ：> delete obj[name],  虽然这些很好用， 很简短， 很明确， 但是要使用的时候也要封装成一个类；\n\n> 有了Reflect， 它帮你封装好了， Reflect.has(obj, name),  Reflect.deleteProperty(obj, name);\n\n# js.Reflect 可变参数的构造函数\n\n> 演变过程\n\n```\nvar obj = new F(...args)\n\nvar obj = Reflect.construct(F, args)\n```\n\n# js.Reflect 可靠的函数式执行方式\n\n```\n# 演变过程\n\nf.apply(obj, args)\n\n# 避免被重新定义\n\nFunction.prototype.apply.call(f, obj, args)\n\n# 更加简明\nReflect.apply(f, obj, args)\n```\n\n\n\n\n\n","slug":"Javascript/js-Reflect","published":1,"updated":"2017-02-06T02:16:15.000Z","_id":"ciytg4bj1004is10op8x1bb7y","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"js-Reflect\"><a href=\"#js-Reflect\" class=\"headerlink\" title=\"js.Reflect\"></a>js.Reflect</h1><blockquote>\n<p><a href=\"http://www.cnblogs.com/diligenceday/p/5474126.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/diligenceday/p/5474126.html</a></p>\n<p>Object.defineProperty(obj, name, desc)执行成功会返回obj， 以及其它原因导致的错误</p>\n<p>Reflect.defineProperty只会返回false或者true来表示对象的属性是否设置上了</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (Reflect.defineProperty(obj, name, desc)) &#123;</div><div class=\"line\">  // success</div><div class=\"line\">&#125; else &#123;</div><div class=\"line\">  // failure</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>其余的方法， 比如Relect.set ， Reflect.deleteProperty, Reflect.preventExtensions, &gt;Reflect.setPrototypeOf， 都可以进行重构；</p>\n</blockquote>\n<h1 id=\"js-Reflect-get\"><a href=\"#js-Reflect-get\" class=\"headerlink\" title=\"js.Reflect get\"></a>js.Reflect get</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var Reflect = require(&apos;harmony-reflect&apos;);</div><div class=\"line\"></div><div class=\"line\">var obj = &#123;</div><div class=\"line\">    &quot;foo&quot; : 1,</div><div class=\"line\">    get bar() &#123;</div><div class=\"line\">        return this.foo;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">var foo = &#123;&#125;;</div><div class=\"line\">foo.foo = &quot;heheda&quot;;</div><div class=\"line\">console.log(Reflect.get(obj, &quot;bar&quot;, foo));</div></pre></td></tr></table></figure>\n<h1 id=\"js-Reflect-函数操作\"><a href=\"#js-Reflect-函数操作\" class=\"headerlink\" title=\"js.Reflect 函数操作\"></a>js.Reflect 函数操作</h1><blockquote>\n<p>如果要判断一个obj有定义或者继承了属性name， 在ES5中这样判断：name in obj ； 或者删除一个属性 ：&gt; delete obj[name],  虽然这些很好用， 很简短， 很明确， 但是要使用的时候也要封装成一个类；</p>\n<p>有了Reflect， 它帮你封装好了， Reflect.has(obj, name),  Reflect.deleteProperty(obj, name);</p>\n</blockquote>\n<h1 id=\"js-Reflect-可变参数的构造函数\"><a href=\"#js-Reflect-可变参数的构造函数\" class=\"headerlink\" title=\"js.Reflect 可变参数的构造函数\"></a>js.Reflect 可变参数的构造函数</h1><blockquote>\n<p>演变过程</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var obj = new F(...args)</div><div class=\"line\"></div><div class=\"line\">var obj = Reflect.construct(F, args)</div></pre></td></tr></table></figure>\n<h1 id=\"js-Reflect-可靠的函数式执行方式\"><a href=\"#js-Reflect-可靠的函数式执行方式\" class=\"headerlink\" title=\"js.Reflect 可靠的函数式执行方式\"></a>js.Reflect 可靠的函数式执行方式</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 演变过程</div><div class=\"line\"></div><div class=\"line\">f.apply(obj, args)</div><div class=\"line\"></div><div class=\"line\"># 避免被重新定义</div><div class=\"line\"></div><div class=\"line\">Function.prototype.apply.call(f, obj, args)</div><div class=\"line\"></div><div class=\"line\"># 更加简明</div><div class=\"line\">Reflect.apply(f, obj, args)</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"js-Reflect\"><a href=\"#js-Reflect\" class=\"headerlink\" title=\"js.Reflect\"></a>js.Reflect</h1><blockquote>\n<p><a href=\"http://www.cnblogs.com/diligenceday/p/5474126.html\">http://www.cnblogs.com/diligenceday/p/5474126.html</a></p>\n<p>Object.defineProperty(obj, name, desc)执行成功会返回obj， 以及其它原因导致的错误</p>\n<p>Reflect.defineProperty只会返回false或者true来表示对象的属性是否设置上了</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (Reflect.defineProperty(obj, name, desc)) &#123;</div><div class=\"line\">  // success</div><div class=\"line\">&#125; else &#123;</div><div class=\"line\">  // failure</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>其余的方法， 比如Relect.set ， Reflect.deleteProperty, Reflect.preventExtensions, &gt;Reflect.setPrototypeOf， 都可以进行重构；</p>\n</blockquote>\n<h1 id=\"js-Reflect-get\"><a href=\"#js-Reflect-get\" class=\"headerlink\" title=\"js.Reflect get\"></a>js.Reflect get</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var Reflect = require(&apos;harmony-reflect&apos;);</div><div class=\"line\"></div><div class=\"line\">var obj = &#123;</div><div class=\"line\">    &quot;foo&quot; : 1,</div><div class=\"line\">    get bar() &#123;</div><div class=\"line\">        return this.foo;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">var foo = &#123;&#125;;</div><div class=\"line\">foo.foo = &quot;heheda&quot;;</div><div class=\"line\">console.log(Reflect.get(obj, &quot;bar&quot;, foo));</div></pre></td></tr></table></figure>\n<h1 id=\"js-Reflect-函数操作\"><a href=\"#js-Reflect-函数操作\" class=\"headerlink\" title=\"js.Reflect 函数操作\"></a>js.Reflect 函数操作</h1><blockquote>\n<p>如果要判断一个obj有定义或者继承了属性name， 在ES5中这样判断：name in obj ； 或者删除一个属性 ：&gt; delete obj[name],  虽然这些很好用， 很简短， 很明确， 但是要使用的时候也要封装成一个类；</p>\n<p>有了Reflect， 它帮你封装好了， Reflect.has(obj, name),  Reflect.deleteProperty(obj, name);</p>\n</blockquote>\n<h1 id=\"js-Reflect-可变参数的构造函数\"><a href=\"#js-Reflect-可变参数的构造函数\" class=\"headerlink\" title=\"js.Reflect 可变参数的构造函数\"></a>js.Reflect 可变参数的构造函数</h1><blockquote>\n<p>演变过程</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var obj = new F(...args)</div><div class=\"line\"></div><div class=\"line\">var obj = Reflect.construct(F, args)</div></pre></td></tr></table></figure>\n<h1 id=\"js-Reflect-可靠的函数式执行方式\"><a href=\"#js-Reflect-可靠的函数式执行方式\" class=\"headerlink\" title=\"js.Reflect 可靠的函数式执行方式\"></a>js.Reflect 可靠的函数式执行方式</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 演变过程</div><div class=\"line\"></div><div class=\"line\">f.apply(obj, args)</div><div class=\"line\"></div><div class=\"line\"># 避免被重新定义</div><div class=\"line\"></div><div class=\"line\">Function.prototype.apply.call(f, obj, args)</div><div class=\"line\"></div><div class=\"line\"># 更加简明</div><div class=\"line\">Reflect.apply(f, obj, args)</div></pre></td></tr></table></figure>\n"},{"title":"js-Set-简介","date":"2016-09-10T16:00:00.000Z","_content":"\n> 不含相同元素,但是不提供索引\n\n> has()的速度快过 indexOf()\n\n> 创建\n``new Set()``\n\n> 长度\n``set.size``\n\n> 查询\n```set.has() set.keys()、set.values()和set.entries()```\n\n> 操作,返回集合本身\n```.add() .delete() .clear()```\n\n> 迭代器\n``for of ``  //in 没有效果\n","source":"_posts/Javascript/js-Set-简介.md","raw":"---\ntitle: js-Set-简介\ndate: 2016-09-11\ncategories: \n- javascript\n---\n\n> 不含相同元素,但是不提供索引\n\n> has()的速度快过 indexOf()\n\n> 创建\n``new Set()``\n\n> 长度\n``set.size``\n\n> 查询\n```set.has() set.keys()、set.values()和set.entries()```\n\n> 操作,返回集合本身\n```.add() .delete() .clear()```\n\n> 迭代器\n``for of ``  //in 没有效果\n","slug":"Javascript/js-Set-简介","published":1,"updated":"2017-02-06T03:12:34.000Z","_id":"ciytg4bj5004js10ot5l7l60y","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>不含相同元素,但是不提供索引</p>\n<p>has()的速度快过 indexOf()</p>\n<p>创建<br><code>new Set()</code></p>\n<p>长度<br><code>set.size</code></p>\n<p>查询<br><figure class=\"highlight plain\"><figcaption><span>set.keys()、set.values()和set.entries()```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&gt; 操作,返回集合本身</div><div class=\"line\">```.add() .delete() .clear()</div></pre></td></tr></table></figure></p>\n<p>迭代器<br><code>for of</code>  //in 没有效果</p>\n</blockquote>\n","excerpt":"","more":"<blockquote>\n<p>不含相同元素,但是不提供索引</p>\n<p>has()的速度快过 indexOf()</p>\n<p>创建<br><code>new Set()</code></p>\n<p>长度<br><code>set.size</code></p>\n<p>查询<br><figure class=\"highlight plain\"><figcaption><span>set.keys()、set.values()和set.entries()```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&gt; 操作,返回集合本身</div><div class=\"line\">```.add() .delete() .clear()</div></pre></td></tr></table></figure></p>\n<p>迭代器<br><code>for of</code>  //in 没有效果</p>\n</blockquote>\n"},{"title":"js-Symbol-介绍及应用","date":"2016-09-10T16:00:00.000Z","_content":"\n> 应用场景\n\n```\n1.Symbol()-->解决属性名的冲突,因为传入对象属性时,同样的Symbol不相等;\n解释:什么是冲突呢？当多人合作编码的时候，经常会出现你往对象上加了一个某某属性（比如 $ ），他人正好也想到了这个名称，当你们同时用了这个名称作为属性，代码之间就会发生冲突，互相覆盖。而用 symbol，即使都用了相同的描述，也不是同一个 symbol。\n\n2.Symbol.for()-->共享Symbol,因为返回值得不一样,keyFor()用来查看它的描述\n\n```\n\n> 新的基本类型\n\n``` null,underfined,number,boolean,string,object ```\n\n> 基本判断\n\n```typeof Symbol() === 'symbol'```\n\n> 特点\n\n```\n1.Symbol('key') !== Symbol('key')  //true,返回不同\n2.Symbol(\"know\").name = 1; // TypeError,只读\n3.for...in 、 Object.keys(obj) 、Object.getOwnPropertyNames(obj)会忽略Symbol,即自身不可枚举\n4.不能用obj.prop的形式访问\n```\n\n> 创建\n\n```\nvar obj = {\n    a: 1\n};\nvar safeKey = Symbol(\"know\");\nconsole.log(safeKey);//Symbol(know)\nobj[safeKey] = 'value';\nconsole.log(obj[safeKey]);  // value\n```\n\n> 查询\n\n```\n1.Object.getOwnPropertySymbols(obj) //获取Symbol属性名,但是也会忽略内置的Symbol\n2.Reflect.ownKeys(obj)//获取所有的属性名\n```\n\n# js.Symbol 代替\n\n```\nlet obj = {\n    [Symbol.replace](string) {\n        console.log(string);\n        return \"replllll\";\n    }\n};\nconsole.log( \"sssss\".replace(obj) ); //输出：  sssss    replllll\n```\n\n# js.Symbol 迭代器js.Symbol 迭代器\n\n> Symbol.Iterator：对象的Symbol.Iterator属性， 指向这个对象的默认遍历器：\n\n```\nvar myIterable = {};\nmyIterable[Symbol.iterator] = function* () {\n    yield 1;\n    yield 2;\n    yield 3;\n};\nconsole.log([...myIterable]); // [1, 2, 3]\n```\n\n# js.Symbol 私有属性\n\n```\nvar Person = (function() {\n  let _name = Symbol();\n  class Person {\n    constructor(name) {\n      this[_name] = name;\n    }\n    get name() {\n      return this[_name];\n    }\n  }\n  return Person;\n})();\n\n\n//es5简单代替方法,但是查看属性名的时候会发现垃圾字符串\nvar Person = (function() {\n  var _name = \"00\" + Math.random();\n  function Person(name) {\n    this[_name] = name;\n  }\n  Object.defineProperty(Person.prototype, \"name\", {\n    get: function() {\n      return this[_name];\n    }\n  });\n  return Person;\n})();\n\n```\n","source":"_posts/Javascript/js-Symbol-介绍及应用.md","raw":"---\ntitle: js-Symbol-介绍及应用\ndate: 2016-09-11\ncategories: \n- javascript\n---\n\n> 应用场景\n\n```\n1.Symbol()-->解决属性名的冲突,因为传入对象属性时,同样的Symbol不相等;\n解释:什么是冲突呢？当多人合作编码的时候，经常会出现你往对象上加了一个某某属性（比如 $ ），他人正好也想到了这个名称，当你们同时用了这个名称作为属性，代码之间就会发生冲突，互相覆盖。而用 symbol，即使都用了相同的描述，也不是同一个 symbol。\n\n2.Symbol.for()-->共享Symbol,因为返回值得不一样,keyFor()用来查看它的描述\n\n```\n\n> 新的基本类型\n\n``` null,underfined,number,boolean,string,object ```\n\n> 基本判断\n\n```typeof Symbol() === 'symbol'```\n\n> 特点\n\n```\n1.Symbol('key') !== Symbol('key')  //true,返回不同\n2.Symbol(\"know\").name = 1; // TypeError,只读\n3.for...in 、 Object.keys(obj) 、Object.getOwnPropertyNames(obj)会忽略Symbol,即自身不可枚举\n4.不能用obj.prop的形式访问\n```\n\n> 创建\n\n```\nvar obj = {\n    a: 1\n};\nvar safeKey = Symbol(\"know\");\nconsole.log(safeKey);//Symbol(know)\nobj[safeKey] = 'value';\nconsole.log(obj[safeKey]);  // value\n```\n\n> 查询\n\n```\n1.Object.getOwnPropertySymbols(obj) //获取Symbol属性名,但是也会忽略内置的Symbol\n2.Reflect.ownKeys(obj)//获取所有的属性名\n```\n\n# js.Symbol 代替\n\n```\nlet obj = {\n    [Symbol.replace](string) {\n        console.log(string);\n        return \"replllll\";\n    }\n};\nconsole.log( \"sssss\".replace(obj) ); //输出：  sssss    replllll\n```\n\n# js.Symbol 迭代器js.Symbol 迭代器\n\n> Symbol.Iterator：对象的Symbol.Iterator属性， 指向这个对象的默认遍历器：\n\n```\nvar myIterable = {};\nmyIterable[Symbol.iterator] = function* () {\n    yield 1;\n    yield 2;\n    yield 3;\n};\nconsole.log([...myIterable]); // [1, 2, 3]\n```\n\n# js.Symbol 私有属性\n\n```\nvar Person = (function() {\n  let _name = Symbol();\n  class Person {\n    constructor(name) {\n      this[_name] = name;\n    }\n    get name() {\n      return this[_name];\n    }\n  }\n  return Person;\n})();\n\n\n//es5简单代替方法,但是查看属性名的时候会发现垃圾字符串\nvar Person = (function() {\n  var _name = \"00\" + Math.random();\n  function Person(name) {\n    this[_name] = name;\n  }\n  Object.defineProperty(Person.prototype, \"name\", {\n    get: function() {\n      return this[_name];\n    }\n  });\n  return Person;\n})();\n\n```\n","slug":"Javascript/js-Symbol-介绍及应用","published":1,"updated":"2017-02-06T02:16:05.000Z","_id":"ciytg4bj6004ks10oru6tpi1i","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>应用场景</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">1.Symbol()--&gt;解决属性名的冲突,因为传入对象属性时,同样的Symbol不相等;</div><div class=\"line\">解释:什么是冲突呢？当多人合作编码的时候，经常会出现你往对象上加了一个某某属性（比如 $ ），他人正好也想到了这个名称，当你们同时用了这个名称作为属性，代码之间就会发生冲突，互相覆盖。而用 symbol，即使都用了相同的描述，也不是同一个 symbol。</div><div class=\"line\"></div><div class=\"line\">2.Symbol.for()--&gt;共享Symbol,因为返回值得不一样,keyFor()用来查看它的描述</div></pre></td></tr></table></figure>\n<blockquote>\n<p>新的基本类型</p>\n</blockquote>\n<figure class=\"highlight plain\"><figcaption><span>```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&gt; 基本判断</div><div class=\"line\"></div><div class=\"line\">```typeof Symbol() === &apos;symbol&apos;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>特点</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">1.Symbol(&apos;key&apos;) !== Symbol(&apos;key&apos;)  //true,返回不同</div><div class=\"line\">2.Symbol(&quot;know&quot;).name = 1; // TypeError,只读</div><div class=\"line\">3.for...in 、 Object.keys(obj) 、Object.getOwnPropertyNames(obj)会忽略Symbol,即自身不可枚举</div><div class=\"line\">4.不能用obj.prop的形式访问</div></pre></td></tr></table></figure>\n<blockquote>\n<p>创建</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var obj = &#123;</div><div class=\"line\">    a: 1</div><div class=\"line\">&#125;;</div><div class=\"line\">var safeKey = Symbol(&quot;know&quot;);</div><div class=\"line\">console.log(safeKey);//Symbol(know)</div><div class=\"line\">obj[safeKey] = &apos;value&apos;;</div><div class=\"line\">console.log(obj[safeKey]);  // value</div></pre></td></tr></table></figure>\n<blockquote>\n<p>查询</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">1.Object.getOwnPropertySymbols(obj) //获取Symbol属性名,但是也会忽略内置的Symbol</div><div class=\"line\">2.Reflect.ownKeys(obj)//获取所有的属性名</div></pre></td></tr></table></figure>\n<h1 id=\"js-Symbol-代替\"><a href=\"#js-Symbol-代替\" class=\"headerlink\" title=\"js.Symbol 代替\"></a>js.Symbol 代替</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">let obj = &#123;</div><div class=\"line\">    [Symbol.replace](string) &#123;</div><div class=\"line\">        console.log(string);</div><div class=\"line\">        return &quot;replllll&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">console.log( &quot;sssss&quot;.replace(obj) ); //输出：  sssss    replllll</div></pre></td></tr></table></figure>\n<h1 id=\"js-Symbol-迭代器js-Symbol-迭代器\"><a href=\"#js-Symbol-迭代器js-Symbol-迭代器\" class=\"headerlink\" title=\"js.Symbol 迭代器js.Symbol 迭代器\"></a>js.Symbol 迭代器js.Symbol 迭代器</h1><blockquote>\n<p>Symbol.Iterator：对象的Symbol.Iterator属性， 指向这个对象的默认遍历器：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var myIterable = &#123;&#125;;</div><div class=\"line\">myIterable[Symbol.iterator] = function* () &#123;</div><div class=\"line\">    yield 1;</div><div class=\"line\">    yield 2;</div><div class=\"line\">    yield 3;</div><div class=\"line\">&#125;;</div><div class=\"line\">console.log([...myIterable]); // [1, 2, 3]</div></pre></td></tr></table></figure>\n<h1 id=\"js-Symbol-私有属性\"><a href=\"#js-Symbol-私有属性\" class=\"headerlink\" title=\"js.Symbol 私有属性\"></a>js.Symbol 私有属性</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">var Person = (function() &#123;</div><div class=\"line\">  let _name = Symbol();</div><div class=\"line\">  class Person &#123;</div><div class=\"line\">    constructor(name) &#123;</div><div class=\"line\">      this[_name] = name;</div><div class=\"line\">    &#125;</div><div class=\"line\">    get name() &#123;</div><div class=\"line\">      return this[_name];</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  return Person;</div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//es5简单代替方法,但是查看属性名的时候会发现垃圾字符串</div><div class=\"line\">var Person = (function() &#123;</div><div class=\"line\">  var _name = &quot;00&quot; + Math.random();</div><div class=\"line\">  function Person(name) &#123;</div><div class=\"line\">    this[_name] = name;</div><div class=\"line\">  &#125;</div><div class=\"line\">  Object.defineProperty(Person.prototype, &quot;name&quot;, &#123;</div><div class=\"line\">    get: function() &#123;</div><div class=\"line\">      return this[_name];</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">  return Person;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>应用场景</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">1.Symbol()--&gt;解决属性名的冲突,因为传入对象属性时,同样的Symbol不相等;</div><div class=\"line\">解释:什么是冲突呢？当多人合作编码的时候，经常会出现你往对象上加了一个某某属性（比如 $ ），他人正好也想到了这个名称，当你们同时用了这个名称作为属性，代码之间就会发生冲突，互相覆盖。而用 symbol，即使都用了相同的描述，也不是同一个 symbol。</div><div class=\"line\"></div><div class=\"line\">2.Symbol.for()--&gt;共享Symbol,因为返回值得不一样,keyFor()用来查看它的描述</div></pre></td></tr></table></figure>\n<blockquote>\n<p>新的基本类型</p>\n</blockquote>\n<figure class=\"highlight plain\"><figcaption><span>```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&gt; 基本判断</div><div class=\"line\"></div><div class=\"line\">```typeof Symbol() === &apos;symbol&apos;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>特点</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">1.Symbol(&apos;key&apos;) !== Symbol(&apos;key&apos;)  //true,返回不同</div><div class=\"line\">2.Symbol(&quot;know&quot;).name = 1; // TypeError,只读</div><div class=\"line\">3.for...in 、 Object.keys(obj) 、Object.getOwnPropertyNames(obj)会忽略Symbol,即自身不可枚举</div><div class=\"line\">4.不能用obj.prop的形式访问</div></pre></td></tr></table></figure>\n<blockquote>\n<p>创建</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var obj = &#123;</div><div class=\"line\">    a: 1</div><div class=\"line\">&#125;;</div><div class=\"line\">var safeKey = Symbol(&quot;know&quot;);</div><div class=\"line\">console.log(safeKey);//Symbol(know)</div><div class=\"line\">obj[safeKey] = &apos;value&apos;;</div><div class=\"line\">console.log(obj[safeKey]);  // value</div></pre></td></tr></table></figure>\n<blockquote>\n<p>查询</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">1.Object.getOwnPropertySymbols(obj) //获取Symbol属性名,但是也会忽略内置的Symbol</div><div class=\"line\">2.Reflect.ownKeys(obj)//获取所有的属性名</div></pre></td></tr></table></figure>\n<h1 id=\"js-Symbol-代替\"><a href=\"#js-Symbol-代替\" class=\"headerlink\" title=\"js.Symbol 代替\"></a>js.Symbol 代替</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">let obj = &#123;</div><div class=\"line\">    [Symbol.replace](string) &#123;</div><div class=\"line\">        console.log(string);</div><div class=\"line\">        return &quot;replllll&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">console.log( &quot;sssss&quot;.replace(obj) ); //输出：  sssss    replllll</div></pre></td></tr></table></figure>\n<h1 id=\"js-Symbol-迭代器js-Symbol-迭代器\"><a href=\"#js-Symbol-迭代器js-Symbol-迭代器\" class=\"headerlink\" title=\"js.Symbol 迭代器js.Symbol 迭代器\"></a>js.Symbol 迭代器js.Symbol 迭代器</h1><blockquote>\n<p>Symbol.Iterator：对象的Symbol.Iterator属性， 指向这个对象的默认遍历器：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var myIterable = &#123;&#125;;</div><div class=\"line\">myIterable[Symbol.iterator] = function* () &#123;</div><div class=\"line\">    yield 1;</div><div class=\"line\">    yield 2;</div><div class=\"line\">    yield 3;</div><div class=\"line\">&#125;;</div><div class=\"line\">console.log([...myIterable]); // [1, 2, 3]</div></pre></td></tr></table></figure>\n<h1 id=\"js-Symbol-私有属性\"><a href=\"#js-Symbol-私有属性\" class=\"headerlink\" title=\"js.Symbol 私有属性\"></a>js.Symbol 私有属性</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">var Person = (function() &#123;</div><div class=\"line\">  let _name = Symbol();</div><div class=\"line\">  class Person &#123;</div><div class=\"line\">    constructor(name) &#123;</div><div class=\"line\">      this[_name] = name;</div><div class=\"line\">    &#125;</div><div class=\"line\">    get name() &#123;</div><div class=\"line\">      return this[_name];</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  return Person;</div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//es5简单代替方法,但是查看属性名的时候会发现垃圾字符串</div><div class=\"line\">var Person = (function() &#123;</div><div class=\"line\">  var _name = &quot;00&quot; + Math.random();</div><div class=\"line\">  function Person(name) &#123;</div><div class=\"line\">    this[_name] = name;</div><div class=\"line\">  &#125;</div><div class=\"line\">  Object.defineProperty(Person.prototype, &quot;name&quot;, &#123;</div><div class=\"line\">    get: function() &#123;</div><div class=\"line\">      return this[_name];</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">  return Person;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n"},{"title":"js-es6-对象解构赋值","date":"2016-09-10T16:00:00.000Z","_content":"\n> best 例子\n```\nfunction getFullName({ firstName, lastName }) {\n    return `${firstName} ${lastName}`;\n}\n```\n\n> 注意返回来的时候是对象而不是数组\n```\n// good\n  function processInput(input) {\n    // then a miracle occurs\n    return { left, right, top, bottom };\n  }\n\n  // 调用时只选择需要的数据\n  const { left, right } = processInput(input);\n```\n\n\n> 对象属性的覆盖\n```\nvar robotA = { name: \"Bender\" };\nvar robotB = { name: \"Flexo\" };\n\nvar { name: nameA } = robotA;\nvar { name: nameB } = robotB;\n\nconsole.log(nameA);\n// \"Bender\"\nconsole.log(nameB);\n// \"Flexo\"\n```\n\n> 避免判断是否存在的情况\n```\njQuery.ajax = function (url, {\n  async = true,\n  beforeSend = noop,\n  cache = true,\n  complete = noop,\n  crossDomain = false,\n  global = \n  ,\n  // ... more config\n}) {\n  // ... do stuff\n};\n```\n\n> 与迭代器一起使用\n``` \nvar map = new Map();\nmap.set(window, \"the global\");\nmap.set(document, \"the document\");\n\nfor (var [key, value] of map) {\n  console.log(key + \" is \" + value);\n}\n// \"[object Window] is the global\"\n// \"[object HTMLDocument] is the document\"\n\nfor (var [key] of map) {\n  // ...\n}\n\nfor (var [,value] of map) {\n  // ...\n}\n```\n> 返回多值\n```\nfunction returnMultipleValues() {\n    return {\n        foo: 3,\n        bar: 4\n    };\n}\nvar demo = { foo, bar } = returnMultipleValues();\n```\n> 导入 CommonJS 模块的指定部分\n```\nconst { SourceMapConsumer, SourceNode } = require(\"source-map\");\n```\n","source":"_posts/Javascript/js-es6-对象解构赋值.md","raw":"---\ntitle: js-es6-对象解构赋值\ndate: 2016-09-11\ncategories: \n- javascript\n---\n\n> best 例子\n```\nfunction getFullName({ firstName, lastName }) {\n    return `${firstName} ${lastName}`;\n}\n```\n\n> 注意返回来的时候是对象而不是数组\n```\n// good\n  function processInput(input) {\n    // then a miracle occurs\n    return { left, right, top, bottom };\n  }\n\n  // 调用时只选择需要的数据\n  const { left, right } = processInput(input);\n```\n\n\n> 对象属性的覆盖\n```\nvar robotA = { name: \"Bender\" };\nvar robotB = { name: \"Flexo\" };\n\nvar { name: nameA } = robotA;\nvar { name: nameB } = robotB;\n\nconsole.log(nameA);\n// \"Bender\"\nconsole.log(nameB);\n// \"Flexo\"\n```\n\n> 避免判断是否存在的情况\n```\njQuery.ajax = function (url, {\n  async = true,\n  beforeSend = noop,\n  cache = true,\n  complete = noop,\n  crossDomain = false,\n  global = \n  ,\n  // ... more config\n}) {\n  // ... do stuff\n};\n```\n\n> 与迭代器一起使用\n``` \nvar map = new Map();\nmap.set(window, \"the global\");\nmap.set(document, \"the document\");\n\nfor (var [key, value] of map) {\n  console.log(key + \" is \" + value);\n}\n// \"[object Window] is the global\"\n// \"[object HTMLDocument] is the document\"\n\nfor (var [key] of map) {\n  // ...\n}\n\nfor (var [,value] of map) {\n  // ...\n}\n```\n> 返回多值\n```\nfunction returnMultipleValues() {\n    return {\n        foo: 3,\n        bar: 4\n    };\n}\nvar demo = { foo, bar } = returnMultipleValues();\n```\n> 导入 CommonJS 模块的指定部分\n```\nconst { SourceMapConsumer, SourceNode } = require(\"source-map\");\n```\n","slug":"Javascript/js-es6-对象解构赋值","published":1,"updated":"2017-02-06T03:12:34.000Z","_id":"ciytg4bj9004ls10o43rwgiqh","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>best 例子<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">function getFullName(&#123; firstName, lastName &#125;) &#123;</div><div class=\"line\">    return `$&#123;firstName&#125; $&#123;lastName&#125;`;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>注意返回来的时候是对象而不是数组<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">// good</div><div class=\"line\">  function processInput(input) &#123;</div><div class=\"line\">    // then a miracle occurs</div><div class=\"line\">    return &#123; left, right, top, bottom &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  // 调用时只选择需要的数据</div><div class=\"line\">  const &#123; left, right &#125; = processInput(input);</div></pre></td></tr></table></figure></p>\n<p>对象属性的覆盖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">var robotA = &#123; name: &quot;Bender&quot; &#125;;</div><div class=\"line\">var robotB = &#123; name: &quot;Flexo&quot; &#125;;</div><div class=\"line\"></div><div class=\"line\">var &#123; name: nameA &#125; = robotA;</div><div class=\"line\">var &#123; name: nameB &#125; = robotB;</div><div class=\"line\"></div><div class=\"line\">console.log(nameA);</div><div class=\"line\">// &quot;Bender&quot;</div><div class=\"line\">console.log(nameB);</div><div class=\"line\">// &quot;Flexo&quot;</div></pre></td></tr></table></figure></p>\n<p>避免判断是否存在的情况<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.ajax = function (url, &#123;</div><div class=\"line\">  async = true,</div><div class=\"line\">  beforeSend = noop,</div><div class=\"line\">  cache = true,</div><div class=\"line\">  complete = noop,</div><div class=\"line\">  crossDomain = false,</div><div class=\"line\">  global = </div><div class=\"line\">  ,</div><div class=\"line\">  // ... more config</div><div class=\"line\">&#125;) &#123;</div><div class=\"line\">  // ... do stuff</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>与迭代器一起使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">var map = new Map();</div><div class=\"line\">map.set(window, &quot;the global&quot;);</div><div class=\"line\">map.set(document, &quot;the document&quot;);</div><div class=\"line\"></div><div class=\"line\">for (var [key, value] of map) &#123;</div><div class=\"line\">  console.log(key + &quot; is &quot; + value);</div><div class=\"line\">&#125;</div><div class=\"line\">// &quot;[object Window] is the global&quot;</div><div class=\"line\">// &quot;[object HTMLDocument] is the document&quot;</div><div class=\"line\"></div><div class=\"line\">for (var [key] of map) &#123;</div><div class=\"line\">  // ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">for (var [,value] of map) &#123;</div><div class=\"line\">  // ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>返回多值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">function returnMultipleValues() &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">        foo: 3,</div><div class=\"line\">        bar: 4</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">var demo = &#123; foo, bar &#125; = returnMultipleValues();</div></pre></td></tr></table></figure></p>\n<p>导入 CommonJS 模块的指定部分<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">const &#123; SourceMapConsumer, SourceNode &#125; = require(&quot;source-map&quot;);</div></pre></td></tr></table></figure></p>\n</blockquote>\n","excerpt":"","more":"<blockquote>\n<p>best 例子<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">function getFullName(&#123; firstName, lastName &#125;) &#123;</div><div class=\"line\">    return `$&#123;firstName&#125; $&#123;lastName&#125;`;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>注意返回来的时候是对象而不是数组<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">// good</div><div class=\"line\">  function processInput(input) &#123;</div><div class=\"line\">    // then a miracle occurs</div><div class=\"line\">    return &#123; left, right, top, bottom &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  // 调用时只选择需要的数据</div><div class=\"line\">  const &#123; left, right &#125; = processInput(input);</div></pre></td></tr></table></figure></p>\n<p>对象属性的覆盖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">var robotA = &#123; name: &quot;Bender&quot; &#125;;</div><div class=\"line\">var robotB = &#123; name: &quot;Flexo&quot; &#125;;</div><div class=\"line\"></div><div class=\"line\">var &#123; name: nameA &#125; = robotA;</div><div class=\"line\">var &#123; name: nameB &#125; = robotB;</div><div class=\"line\"></div><div class=\"line\">console.log(nameA);</div><div class=\"line\">// &quot;Bender&quot;</div><div class=\"line\">console.log(nameB);</div><div class=\"line\">// &quot;Flexo&quot;</div></pre></td></tr></table></figure></p>\n<p>避免判断是否存在的情况<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.ajax = function (url, &#123;</div><div class=\"line\">  async = true,</div><div class=\"line\">  beforeSend = noop,</div><div class=\"line\">  cache = true,</div><div class=\"line\">  complete = noop,</div><div class=\"line\">  crossDomain = false,</div><div class=\"line\">  global = </div><div class=\"line\">  ,</div><div class=\"line\">  // ... more config</div><div class=\"line\">&#125;) &#123;</div><div class=\"line\">  // ... do stuff</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>与迭代器一起使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">var map = new Map();</div><div class=\"line\">map.set(window, &quot;the global&quot;);</div><div class=\"line\">map.set(document, &quot;the document&quot;);</div><div class=\"line\"></div><div class=\"line\">for (var [key, value] of map) &#123;</div><div class=\"line\">  console.log(key + &quot; is &quot; + value);</div><div class=\"line\">&#125;</div><div class=\"line\">// &quot;[object Window] is the global&quot;</div><div class=\"line\">// &quot;[object HTMLDocument] is the document&quot;</div><div class=\"line\"></div><div class=\"line\">for (var [key] of map) &#123;</div><div class=\"line\">  // ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">for (var [,value] of map) &#123;</div><div class=\"line\">  // ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>返回多值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">function returnMultipleValues() &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">        foo: 3,</div><div class=\"line\">        bar: 4</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">var demo = &#123; foo, bar &#125; = returnMultipleValues();</div></pre></td></tr></table></figure></p>\n<p>导入 CommonJS 模块的指定部分<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">const &#123; SourceMapConsumer, SourceNode &#125; = require(&quot;source-map&quot;);</div></pre></td></tr></table></figure></p>\n</blockquote>\n"},{"title":"js-es6-数组解构赋值","date":"2016-09-10T16:00:00.000Z","_content":"\n> 捕获剩余项\n```\nvar [head, ...tail] = [1, 2, 3, 4];\nconsole.log(tail);\n// [2, 3, 4]\n```\n\n> 在生成器的作用\n```\nfunction* fibs() {\n  var a = 0;\n  var b = 1;\n  while (true) {\n    yield a;\n    [a, b] = [b, a + b];\n  }\n}\n\nvar [first, second, third, fourth, fifth, sixth] = fibs();\nconsole.log(sixth);\n```\n","source":"_posts/Javascript/js-es6-数组解构赋值.md","raw":"---\ntitle: js-es6-数组解构赋值\ndate: 2016-09-11\ncategories: \n- javascript\n---\n\n> 捕获剩余项\n```\nvar [head, ...tail] = [1, 2, 3, 4];\nconsole.log(tail);\n// [2, 3, 4]\n```\n\n> 在生成器的作用\n```\nfunction* fibs() {\n  var a = 0;\n  var b = 1;\n  while (true) {\n    yield a;\n    [a, b] = [b, a + b];\n  }\n}\n\nvar [first, second, third, fourth, fifth, sixth] = fibs();\nconsole.log(sixth);\n```\n","slug":"Javascript/js-es6-数组解构赋值","published":1,"updated":"2017-02-06T03:12:34.000Z","_id":"ciytg4bjb004ms10op74umx29","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>捕获剩余项<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var [head, ...tail] = [1, 2, 3, 4];</div><div class=\"line\">console.log(tail);</div><div class=\"line\">// [2, 3, 4]</div></pre></td></tr></table></figure></p>\n<p>在生成器的作用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">function* fibs() &#123;</div><div class=\"line\">  var a = 0;</div><div class=\"line\">  var b = 1;</div><div class=\"line\">  while (true) &#123;</div><div class=\"line\">    yield a;</div><div class=\"line\">    [a, b] = [b, a + b];</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var [first, second, third, fourth, fifth, sixth] = fibs();</div><div class=\"line\">console.log(sixth);</div></pre></td></tr></table></figure></p>\n</blockquote>\n","excerpt":"","more":"<blockquote>\n<p>捕获剩余项<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var [head, ...tail] = [1, 2, 3, 4];</div><div class=\"line\">console.log(tail);</div><div class=\"line\">// [2, 3, 4]</div></pre></td></tr></table></figure></p>\n<p>在生成器的作用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">function* fibs() &#123;</div><div class=\"line\">  var a = 0;</div><div class=\"line\">  var b = 1;</div><div class=\"line\">  while (true) &#123;</div><div class=\"line\">    yield a;</div><div class=\"line\">    [a, b] = [b, a + b];</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var [first, second, third, fourth, fifth, sixth] = fibs();</div><div class=\"line\">console.log(sixth);</div></pre></td></tr></table></figure></p>\n</blockquote>\n"},{"title":"js-export","date":"2016-09-10T16:00:00.000Z","_content":"\n```\nexport { myFunction }; // 导出一个函数声明\nexport const foo = Math.sqrt(2); // 导出一个常量\n\nexport default myFunctionOrClass\n```\n\n> 使用\n```\n// module \"my-module.js\"\nlet cube = function cube(x) {\n  return x * x * x;\n}\nexport default cube;\n```\n","source":"_posts/Javascript/js-export.md","raw":"---\ntitle: js-export\ndate: 2016-09-11\ncategories: \n- javascript\n---\n\n```\nexport { myFunction }; // 导出一个函数声明\nexport const foo = Math.sqrt(2); // 导出一个常量\n\nexport default myFunctionOrClass\n```\n\n> 使用\n```\n// module \"my-module.js\"\nlet cube = function cube(x) {\n  return x * x * x;\n}\nexport default cube;\n```\n","slug":"Javascript/js-export","published":1,"updated":"2017-02-06T03:12:34.000Z","_id":"ciytg4bji004ns10oia918fph","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">export &#123; myFunction &#125;; // 导出一个函数声明</div><div class=\"line\">export const foo = Math.sqrt(2); // 导出一个常量</div><div class=\"line\"></div><div class=\"line\">export default myFunctionOrClass</div></pre></td></tr></table></figure>\n<blockquote>\n<p>使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// module &quot;my-module.js&quot;</div><div class=\"line\">let cube = function cube(x) &#123;</div><div class=\"line\">  return x * x * x;</div><div class=\"line\">&#125;</div><div class=\"line\">export default cube;</div></pre></td></tr></table></figure></p>\n</blockquote>\n","excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">export &#123; myFunction &#125;; // 导出一个函数声明</div><div class=\"line\">export const foo = Math.sqrt(2); // 导出一个常量</div><div class=\"line\"></div><div class=\"line\">export default myFunctionOrClass</div></pre></td></tr></table></figure>\n<blockquote>\n<p>使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// module &quot;my-module.js&quot;</div><div class=\"line\">let cube = function cube(x) &#123;</div><div class=\"line\">  return x * x * x;</div><div class=\"line\">&#125;</div><div class=\"line\">export default cube;</div></pre></td></tr></table></figure></p>\n</blockquote>\n"},{"title":"js-module-多种模式的开发","date":"2016-09-10T16:00:00.000Z","_content":"\n> AMD \n\n```\ndefine(function(require, exports, module) {\n  var a = require('./a')\n  a.doSomething()\n  // 此处略去 100 行\n  var b = require('./b') // 依赖可以就近书写\n  b.doSomething()\n  // ... \n\n  exports.action = function() {};\n})\n```\n\n\n> CommonJS\n\n```\nexports.firstName = 'mei';\nexports.lastName = 'qingguang';\nexports.year = 1988;\n\n// or\n\nmodule.exports = {\n  firstName: 'mei',\n  lastName: 'qingguang',\n  year: 1988\n}\n\n// or\n\nmodule.exports = function() {\n  // do something\n}\n```\n","source":"_posts/Javascript/js-module-多种模式的开发.md","raw":"---\ntitle: js-module-多种模式的开发\ndate: 2016-09-11\ncategories: \n- javascript\n---\n\n> AMD \n\n```\ndefine(function(require, exports, module) {\n  var a = require('./a')\n  a.doSomething()\n  // 此处略去 100 行\n  var b = require('./b') // 依赖可以就近书写\n  b.doSomething()\n  // ... \n\n  exports.action = function() {};\n})\n```\n\n\n> CommonJS\n\n```\nexports.firstName = 'mei';\nexports.lastName = 'qingguang';\nexports.year = 1988;\n\n// or\n\nmodule.exports = {\n  firstName: 'mei',\n  lastName: 'qingguang',\n  year: 1988\n}\n\n// or\n\nmodule.exports = function() {\n  // do something\n}\n```\n","slug":"Javascript/js-module-多种模式的开发","published":1,"updated":"2017-02-06T03:12:34.000Z","_id":"ciytg4bjj004os10o733je4fg","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>AMD </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(function(require, exports, module) &#123;</div><div class=\"line\">  var a = require(&apos;./a&apos;)</div><div class=\"line\">  a.doSomething()</div><div class=\"line\">  // 此处略去 100 行</div><div class=\"line\">  var b = require(&apos;./b&apos;) // 依赖可以就近书写</div><div class=\"line\">  b.doSomething()</div><div class=\"line\">  // ... </div><div class=\"line\"></div><div class=\"line\">  exports.action = function() &#123;&#125;;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<blockquote>\n<p>CommonJS</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.firstName = &apos;mei&apos;;</div><div class=\"line\">exports.lastName = &apos;qingguang&apos;;</div><div class=\"line\">exports.year = 1988;</div><div class=\"line\"></div><div class=\"line\">// or</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;</div><div class=\"line\">  firstName: &apos;mei&apos;,</div><div class=\"line\">  lastName: &apos;qingguang&apos;,</div><div class=\"line\">  year: 1988</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// or</div><div class=\"line\"></div><div class=\"line\">module.exports = function() &#123;</div><div class=\"line\">  // do something</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>AMD </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(function(require, exports, module) &#123;</div><div class=\"line\">  var a = require(&apos;./a&apos;)</div><div class=\"line\">  a.doSomething()</div><div class=\"line\">  // 此处略去 100 行</div><div class=\"line\">  var b = require(&apos;./b&apos;) // 依赖可以就近书写</div><div class=\"line\">  b.doSomething()</div><div class=\"line\">  // ... </div><div class=\"line\"></div><div class=\"line\">  exports.action = function() &#123;&#125;;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<blockquote>\n<p>CommonJS</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.firstName = &apos;mei&apos;;</div><div class=\"line\">exports.lastName = &apos;qingguang&apos;;</div><div class=\"line\">exports.year = 1988;</div><div class=\"line\"></div><div class=\"line\">// or</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;</div><div class=\"line\">  firstName: &apos;mei&apos;,</div><div class=\"line\">  lastName: &apos;qingguang&apos;,</div><div class=\"line\">  year: 1988</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// or</div><div class=\"line\"></div><div class=\"line\">module.exports = function() &#123;</div><div class=\"line\">  // do something</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"js-对象简写","date":"2016-09-10T16:00:00.000Z","_content":"\n> 函数简写\n```\n// good\nconst atom = {\n  value: 1,\n\n  addValue(value) {\n    return atom.value + value;\n  },\n};\n```\n\n> 属性简写 \n\n```\n  const anakinSkywalker = 'Anakin Skywalker';\n  const lukeSkywalker = 'Luke Skywalker';\n  // good\n  const obj = {\n    lukeSkywalker,\n    anakinSkywalker,\n    episodeOne: 1,\n    twoJedisWalkIntoACantina: 2,\n    episodeThree: 3,\n    mayTheFourth: 4,\n  };\n ```\n","source":"_posts/Javascript/js-对象简写.md","raw":"---\ntitle: js-对象简写\ndate: 2016-09-11\ncategories: \n- javascript\n---\n\n> 函数简写\n```\n// good\nconst atom = {\n  value: 1,\n\n  addValue(value) {\n    return atom.value + value;\n  },\n};\n```\n\n> 属性简写 \n\n```\n  const anakinSkywalker = 'Anakin Skywalker';\n  const lukeSkywalker = 'Luke Skywalker';\n  // good\n  const obj = {\n    lukeSkywalker,\n    anakinSkywalker,\n    episodeOne: 1,\n    twoJedisWalkIntoACantina: 2,\n    episodeThree: 3,\n    mayTheFourth: 4,\n  };\n ```\n","slug":"Javascript/js-对象简写","published":1,"updated":"2017-02-06T03:12:34.000Z","_id":"ciytg4bjj004ps10oa8osj9l5","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>函数简写<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">// good</div><div class=\"line\">const atom = &#123;</div><div class=\"line\">  value: 1,</div><div class=\"line\"></div><div class=\"line\">  addValue(value) &#123;</div><div class=\"line\">    return atom.value + value;</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>属性简写 </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">const anakinSkywalker = &apos;Anakin Skywalker&apos;;</div><div class=\"line\">const lukeSkywalker = &apos;Luke Skywalker&apos;;</div><div class=\"line\">// good</div><div class=\"line\">const obj = &#123;</div><div class=\"line\">  lukeSkywalker,</div><div class=\"line\">  anakinSkywalker,</div><div class=\"line\">  episodeOne: 1,</div><div class=\"line\">  twoJedisWalkIntoACantina: 2,</div><div class=\"line\">  episodeThree: 3,</div><div class=\"line\">  mayTheFourth: 4,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>函数简写<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">// good</div><div class=\"line\">const atom = &#123;</div><div class=\"line\">  value: 1,</div><div class=\"line\"></div><div class=\"line\">  addValue(value) &#123;</div><div class=\"line\">    return atom.value + value;</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>属性简写 </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">const anakinSkywalker = &apos;Anakin Skywalker&apos;;</div><div class=\"line\">const lukeSkywalker = &apos;Luke Skywalker&apos;;</div><div class=\"line\">// good</div><div class=\"line\">const obj = &#123;</div><div class=\"line\">  lukeSkywalker,</div><div class=\"line\">  anakinSkywalker,</div><div class=\"line\">  episodeOne: 1,</div><div class=\"line\">  twoJedisWalkIntoACantina: 2,</div><div class=\"line\">  episodeThree: 3,</div><div class=\"line\">  mayTheFourth: 4,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n"},{"title":"js-数据属性和访问器属性","date":"2016-09-10T16:00:00.000Z","_content":"\n> 数据属性\n\n数据的``获取与设置``\n\n```\nValue:undefined,\n\nwritable:false,\n\nenumerable:false,\n\nconfigurable:false;\n\n```\n","source":"_posts/Javascript/js-数据属性和访问器属性.md","raw":"---\ntitle: js-数据属性和访问器属性\ndate: 2016-09-11\ncategories: \n- javascript\n---\n\n> 数据属性\n\n数据的``获取与设置``\n\n```\nValue:undefined,\n\nwritable:false,\n\nenumerable:false,\n\nconfigurable:false;\n\n```\n","slug":"Javascript/js-数据属性和访问器属性","published":1,"updated":"2017-02-06T03:12:34.000Z","_id":"ciytg4bjv004qs10o77uuev7j","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>数据属性</p>\n</blockquote>\n<p>数据的<code>获取与设置</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Value:undefined,</div><div class=\"line\"></div><div class=\"line\">writable:false,</div><div class=\"line\"></div><div class=\"line\">enumerable:false,</div><div class=\"line\"></div><div class=\"line\">configurable:false;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>数据属性</p>\n</blockquote>\n<p>数据的<code>获取与设置</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Value:undefined,</div><div class=\"line\"></div><div class=\"line\">writable:false,</div><div class=\"line\"></div><div class=\"line\">enumerable:false,</div><div class=\"line\"></div><div class=\"line\">configurable:false;</div></pre></td></tr></table></figure>\n"},{"title":"js-时间--测试函数","date":"2016-09-10T16:00:00.000Z","_content":"\n```\nfunction cal_fn_time(fn) {\n    var timebegin = (new Date()).getTime();\n    console.log(for_iphone);\n    fn();\n    var timeend = (new Date()).getTime();\n    return (timeend - timebegin)/1000 + \"s\";\n}\n```\n","source":"_posts/Javascript/js-时间--测试函数.md","raw":"---\ntitle: js-时间--测试函数\ndate: 2016-09-11\ncategories: \n- javascript\n---\n\n```\nfunction cal_fn_time(fn) {\n    var timebegin = (new Date()).getTime();\n    console.log(for_iphone);\n    fn();\n    var timeend = (new Date()).getTime();\n    return (timeend - timebegin)/1000 + \"s\";\n}\n```\n","slug":"Javascript/js-时间--测试函数","published":1,"updated":"2017-02-06T02:15:50.000Z","_id":"ciytg4bjy004rs10o1ukh2dcp","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">function cal_fn_time(fn) &#123;</div><div class=\"line\">    var timebegin = (new Date()).getTime();</div><div class=\"line\">    console.log(for_iphone);</div><div class=\"line\">    fn();</div><div class=\"line\">    var timeend = (new Date()).getTime();</div><div class=\"line\">    return (timeend - timebegin)/1000 + &quot;s&quot;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">function cal_fn_time(fn) &#123;</div><div class=\"line\">    var timebegin = (new Date()).getTime();</div><div class=\"line\">    console.log(for_iphone);</div><div class=\"line\">    fn();</div><div class=\"line\">    var timeend = (new Date()).getTime();</div><div class=\"line\">    return (timeend - timebegin)/1000 + &quot;s&quot;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"js-管理私有属性","date":"2016-09-10T16:00:00.000Z","_content":"\n```\nclass Countdown {\n    constructor(counter, action) {\n        Object.assign(this, {\n            dec() {\n                if (counter < 1) return;\n                counter--;\n                if (counter === 0) {\n                    action();\n                }\n            }\n        });\n    }\n}\n```\n\n优点：\n\n私有数据非常安全；\n私有属性的命名不会与其他父类或子类的私有属性命名冲突。\n缺点：\n\n当你需要在构造函数内把所有方法（至少那些需要用到私有数据的方法）添加到实例的时候，代码看起来就没那么优雅了；\n作为实例方法，代码会浪费内存；如果作为原型方法，则会被共享。\n\n\n```\nclass Countdown {\n    constructor(counter, action) {\n        this._counter = counter;\n        this._action = action;\n    }\n    dec() {\n        if (this._counter < 1) return;\n        this._counter--;\n        if (this._counter === 0) {\n            this._action();\n        }\n    }\n}\n```\n优点：\n\n代码比较美观；\n可以使用原型方法。\n缺点：\n\n不够安全，只能用规范去约束用户代码；\n私有属性的命名容易冲突。\n\n```\nlet _counter = new WeakMap();\nlet _action = new WeakMap();\nclass Countdown {\n    constructor(counter, action) {\n        _counter.set(this, counter);\n        _action.set(this, action);\n    }\n    dec() {\n        let counter = _counter.get(this);\n        if (counter < 1) return;\n        counter--;\n        _counter.set(this, counter);\n        if (counter === 0) {\n            _action.get(this)();\n        }\n    }\n}\n```\n\n优点：\n\n可以使用原型方法；\n比属性命名约定更加安全；\n私有属性命名不会冲突。\nCon:\n\n代码不如命名约定优雅。\n\n```\nconst _counter = Symbol('counter');\nconst _action = Symbol('action');\n\nclass Countdown {\n    constructor(counter, action) {\n        this[_counter] = counter;\n        this[_action] = action;\n    }\n    dec() {\n        if (this[_counter] < 1) return;\n        this[_counter]--;\n        if (this[_counter] === 0) {\n            this[_action]();\n        }\n    }\n}\n```\n\n优点：\n\n可以使用原型方法；\n私有属性命名不会冲突。\n缺点：\n\n代码不如命名约定优雅；\n不太安全：可以通过 Reflect.ownKeys() 列出一个对象所有的属性键名（即使用了 Symbol）。\n","source":"_posts/Javascript/js-管理私有属性.md","raw":"---\ntitle: js-管理私有属性\ndate: 2016-09-11\ncategories: \n- javascript\n---\n\n```\nclass Countdown {\n    constructor(counter, action) {\n        Object.assign(this, {\n            dec() {\n                if (counter < 1) return;\n                counter--;\n                if (counter === 0) {\n                    action();\n                }\n            }\n        });\n    }\n}\n```\n\n优点：\n\n私有数据非常安全；\n私有属性的命名不会与其他父类或子类的私有属性命名冲突。\n缺点：\n\n当你需要在构造函数内把所有方法（至少那些需要用到私有数据的方法）添加到实例的时候，代码看起来就没那么优雅了；\n作为实例方法，代码会浪费内存；如果作为原型方法，则会被共享。\n\n\n```\nclass Countdown {\n    constructor(counter, action) {\n        this._counter = counter;\n        this._action = action;\n    }\n    dec() {\n        if (this._counter < 1) return;\n        this._counter--;\n        if (this._counter === 0) {\n            this._action();\n        }\n    }\n}\n```\n优点：\n\n代码比较美观；\n可以使用原型方法。\n缺点：\n\n不够安全，只能用规范去约束用户代码；\n私有属性的命名容易冲突。\n\n```\nlet _counter = new WeakMap();\nlet _action = new WeakMap();\nclass Countdown {\n    constructor(counter, action) {\n        _counter.set(this, counter);\n        _action.set(this, action);\n    }\n    dec() {\n        let counter = _counter.get(this);\n        if (counter < 1) return;\n        counter--;\n        _counter.set(this, counter);\n        if (counter === 0) {\n            _action.get(this)();\n        }\n    }\n}\n```\n\n优点：\n\n可以使用原型方法；\n比属性命名约定更加安全；\n私有属性命名不会冲突。\nCon:\n\n代码不如命名约定优雅。\n\n```\nconst _counter = Symbol('counter');\nconst _action = Symbol('action');\n\nclass Countdown {\n    constructor(counter, action) {\n        this[_counter] = counter;\n        this[_action] = action;\n    }\n    dec() {\n        if (this[_counter] < 1) return;\n        this[_counter]--;\n        if (this[_counter] === 0) {\n            this[_action]();\n        }\n    }\n}\n```\n\n优点：\n\n可以使用原型方法；\n私有属性命名不会冲突。\n缺点：\n\n代码不如命名约定优雅；\n不太安全：可以通过 Reflect.ownKeys() 列出一个对象所有的属性键名（即使用了 Symbol）。\n","slug":"Javascript/js-管理私有属性","published":1,"updated":"2017-02-06T02:15:44.000Z","_id":"ciytg4bk2004ss10of4602bm7","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Countdown &#123;</div><div class=\"line\">    constructor(counter, action) &#123;</div><div class=\"line\">        Object.assign(this, &#123;</div><div class=\"line\">            dec() &#123;</div><div class=\"line\">                if (counter &lt; 1) return;</div><div class=\"line\">                counter--;</div><div class=\"line\">                if (counter === 0) &#123;</div><div class=\"line\">                    action();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>优点：</p>\n<p>私有数据非常安全；<br>私有属性的命名不会与其他父类或子类的私有属性命名冲突。<br>缺点：</p>\n<p>当你需要在构造函数内把所有方法（至少那些需要用到私有数据的方法）添加到实例的时候，代码看起来就没那么优雅了；<br>作为实例方法，代码会浪费内存；如果作为原型方法，则会被共享。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Countdown &#123;</div><div class=\"line\">    constructor(counter, action) &#123;</div><div class=\"line\">        this._counter = counter;</div><div class=\"line\">        this._action = action;</div><div class=\"line\">    &#125;</div><div class=\"line\">    dec() &#123;</div><div class=\"line\">        if (this._counter &lt; 1) return;</div><div class=\"line\">        this._counter--;</div><div class=\"line\">        if (this._counter === 0) &#123;</div><div class=\"line\">            this._action();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>优点：</p>\n<p>代码比较美观；<br>可以使用原型方法。<br>缺点：</p>\n<p>不够安全，只能用规范去约束用户代码；<br>私有属性的命名容易冲突。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">let _counter = new WeakMap();</div><div class=\"line\">let _action = new WeakMap();</div><div class=\"line\">class Countdown &#123;</div><div class=\"line\">    constructor(counter, action) &#123;</div><div class=\"line\">        _counter.set(this, counter);</div><div class=\"line\">        _action.set(this, action);</div><div class=\"line\">    &#125;</div><div class=\"line\">    dec() &#123;</div><div class=\"line\">        let counter = _counter.get(this);</div><div class=\"line\">        if (counter &lt; 1) return;</div><div class=\"line\">        counter--;</div><div class=\"line\">        _counter.set(this, counter);</div><div class=\"line\">        if (counter === 0) &#123;</div><div class=\"line\">            _action.get(this)();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>优点：</p>\n<p>可以使用原型方法；<br>比属性命名约定更加安全；<br>私有属性命名不会冲突。<br>Con:</p>\n<p>代码不如命名约定优雅。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">const _counter = Symbol(&apos;counter&apos;);</div><div class=\"line\">const _action = Symbol(&apos;action&apos;);</div><div class=\"line\"></div><div class=\"line\">class Countdown &#123;</div><div class=\"line\">    constructor(counter, action) &#123;</div><div class=\"line\">        this[_counter] = counter;</div><div class=\"line\">        this[_action] = action;</div><div class=\"line\">    &#125;</div><div class=\"line\">    dec() &#123;</div><div class=\"line\">        if (this[_counter] &lt; 1) return;</div><div class=\"line\">        this[_counter]--;</div><div class=\"line\">        if (this[_counter] === 0) &#123;</div><div class=\"line\">            this[_action]();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>优点：</p>\n<p>可以使用原型方法；<br>私有属性命名不会冲突。<br>缺点：</p>\n<p>代码不如命名约定优雅；<br>不太安全：可以通过 Reflect.ownKeys() 列出一个对象所有的属性键名（即使用了 Symbol）。</p>\n","excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Countdown &#123;</div><div class=\"line\">    constructor(counter, action) &#123;</div><div class=\"line\">        Object.assign(this, &#123;</div><div class=\"line\">            dec() &#123;</div><div class=\"line\">                if (counter &lt; 1) return;</div><div class=\"line\">                counter--;</div><div class=\"line\">                if (counter === 0) &#123;</div><div class=\"line\">                    action();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>优点：</p>\n<p>私有数据非常安全；<br>私有属性的命名不会与其他父类或子类的私有属性命名冲突。<br>缺点：</p>\n<p>当你需要在构造函数内把所有方法（至少那些需要用到私有数据的方法）添加到实例的时候，代码看起来就没那么优雅了；<br>作为实例方法，代码会浪费内存；如果作为原型方法，则会被共享。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Countdown &#123;</div><div class=\"line\">    constructor(counter, action) &#123;</div><div class=\"line\">        this._counter = counter;</div><div class=\"line\">        this._action = action;</div><div class=\"line\">    &#125;</div><div class=\"line\">    dec() &#123;</div><div class=\"line\">        if (this._counter &lt; 1) return;</div><div class=\"line\">        this._counter--;</div><div class=\"line\">        if (this._counter === 0) &#123;</div><div class=\"line\">            this._action();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>优点：</p>\n<p>代码比较美观；<br>可以使用原型方法。<br>缺点：</p>\n<p>不够安全，只能用规范去约束用户代码；<br>私有属性的命名容易冲突。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">let _counter = new WeakMap();</div><div class=\"line\">let _action = new WeakMap();</div><div class=\"line\">class Countdown &#123;</div><div class=\"line\">    constructor(counter, action) &#123;</div><div class=\"line\">        _counter.set(this, counter);</div><div class=\"line\">        _action.set(this, action);</div><div class=\"line\">    &#125;</div><div class=\"line\">    dec() &#123;</div><div class=\"line\">        let counter = _counter.get(this);</div><div class=\"line\">        if (counter &lt; 1) return;</div><div class=\"line\">        counter--;</div><div class=\"line\">        _counter.set(this, counter);</div><div class=\"line\">        if (counter === 0) &#123;</div><div class=\"line\">            _action.get(this)();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>优点：</p>\n<p>可以使用原型方法；<br>比属性命名约定更加安全；<br>私有属性命名不会冲突。<br>Con:</p>\n<p>代码不如命名约定优雅。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">const _counter = Symbol(&apos;counter&apos;);</div><div class=\"line\">const _action = Symbol(&apos;action&apos;);</div><div class=\"line\"></div><div class=\"line\">class Countdown &#123;</div><div class=\"line\">    constructor(counter, action) &#123;</div><div class=\"line\">        this[_counter] = counter;</div><div class=\"line\">        this[_action] = action;</div><div class=\"line\">    &#125;</div><div class=\"line\">    dec() &#123;</div><div class=\"line\">        if (this[_counter] &lt; 1) return;</div><div class=\"line\">        this[_counter]--;</div><div class=\"line\">        if (this[_counter] === 0) &#123;</div><div class=\"line\">            this[_action]();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>优点：</p>\n<p>可以使用原型方法；<br>私有属性命名不会冲突。<br>缺点：</p>\n<p>代码不如命名约定优雅；<br>不太安全：可以通过 Reflect.ownKeys() 列出一个对象所有的属性键名（即使用了 Symbol）。</p>\n"},{"title":"js-类型的转换","date":"2016-09-10T16:00:00.000Z","_content":"\n> 转成字符串\n```\n// good\nconst totalScore = String(this.reviewScore);\n```\n\n> 转成数字\n```\nconst inputValue = '4';\n\n// bad\nconst val = new Number(inputValue);\n\n// bad\nconst val = +inputValue;\n\n// bad\nconst val = inputValue >> 0;\n\n// bad\nconst val = parseInt(inputValue);\n\n// good\nconst val = Number(inputValue);\n\n// good\nconst val = parseInt(inputValue, 10);\n```\n\n> 转成布尔\n```\nconst age = 0;\n\n// bad\nconst hasAge = new Boolean(age);\n\n// good\nconst hasAge = Boolean(age);\n\n// good\nconst hasAge = !!age;\n```\n","source":"_posts/Javascript/js-类型的转换.md","raw":"---\ntitle: js-类型的转换\ndate: 2016-09-11\ncategories: \n- javascript\n---\n\n> 转成字符串\n```\n// good\nconst totalScore = String(this.reviewScore);\n```\n\n> 转成数字\n```\nconst inputValue = '4';\n\n// bad\nconst val = new Number(inputValue);\n\n// bad\nconst val = +inputValue;\n\n// bad\nconst val = inputValue >> 0;\n\n// bad\nconst val = parseInt(inputValue);\n\n// good\nconst val = Number(inputValue);\n\n// good\nconst val = parseInt(inputValue, 10);\n```\n\n> 转成布尔\n```\nconst age = 0;\n\n// bad\nconst hasAge = new Boolean(age);\n\n// good\nconst hasAge = Boolean(age);\n\n// good\nconst hasAge = !!age;\n```\n","slug":"Javascript/js-类型的转换","published":1,"updated":"2017-02-06T03:12:34.000Z","_id":"ciytg4bk4004ts10oh5r91c4f","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>转成字符串<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// good</div><div class=\"line\">const totalScore = String(this.reviewScore);</div></pre></td></tr></table></figure></p>\n<p>转成数字<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">const inputValue = &apos;4&apos;;</div><div class=\"line\"></div><div class=\"line\">// bad</div><div class=\"line\">const val = new Number(inputValue);</div><div class=\"line\"></div><div class=\"line\">// bad</div><div class=\"line\">const val = +inputValue;</div><div class=\"line\"></div><div class=\"line\">// bad</div><div class=\"line\">const val = inputValue &gt;&gt; 0;</div><div class=\"line\"></div><div class=\"line\">// bad</div><div class=\"line\">const val = parseInt(inputValue);</div><div class=\"line\"></div><div class=\"line\">// good</div><div class=\"line\">const val = Number(inputValue);</div><div class=\"line\"></div><div class=\"line\">// good</div><div class=\"line\">const val = parseInt(inputValue, 10);</div></pre></td></tr></table></figure></p>\n<p>转成布尔<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">const age = 0;</div><div class=\"line\"></div><div class=\"line\">// bad</div><div class=\"line\">const hasAge = new Boolean(age);</div><div class=\"line\"></div><div class=\"line\">// good</div><div class=\"line\">const hasAge = Boolean(age);</div><div class=\"line\"></div><div class=\"line\">// good</div><div class=\"line\">const hasAge = !!age;</div></pre></td></tr></table></figure></p>\n</blockquote>\n","excerpt":"","more":"<blockquote>\n<p>转成字符串<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// good</div><div class=\"line\">const totalScore = String(this.reviewScore);</div></pre></td></tr></table></figure></p>\n<p>转成数字<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">const inputValue = &apos;4&apos;;</div><div class=\"line\"></div><div class=\"line\">// bad</div><div class=\"line\">const val = new Number(inputValue);</div><div class=\"line\"></div><div class=\"line\">// bad</div><div class=\"line\">const val = +inputValue;</div><div class=\"line\"></div><div class=\"line\">// bad</div><div class=\"line\">const val = inputValue &gt;&gt; 0;</div><div class=\"line\"></div><div class=\"line\">// bad</div><div class=\"line\">const val = parseInt(inputValue);</div><div class=\"line\"></div><div class=\"line\">// good</div><div class=\"line\">const val = Number(inputValue);</div><div class=\"line\"></div><div class=\"line\">// good</div><div class=\"line\">const val = parseInt(inputValue, 10);</div></pre></td></tr></table></figure></p>\n<p>转成布尔<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">const age = 0;</div><div class=\"line\"></div><div class=\"line\">// bad</div><div class=\"line\">const hasAge = new Boolean(age);</div><div class=\"line\"></div><div class=\"line\">// good</div><div class=\"line\">const hasAge = Boolean(age);</div><div class=\"line\"></div><div class=\"line\">// good</div><div class=\"line\">const hasAge = !!age;</div></pre></td></tr></table></figure></p>\n</blockquote>\n"},{"title":"js-闭包理解---缺乏形参","date":"2016-09-10T16:00:00.000Z","_content":"\n```\nfor (var i = 1; i <= 5; i++) {\n    setTimeout(function timer() {\n        console.log(i);\n    }, i*1000);\n}\n```\n\n解释原因\n\nvar i，实际上声明了一个全局变量\n\n延迟函数timer必然是在循环结束后才开始执行，循环结束后，i＝6\n\n循环中确实定义了多个延迟函数timer，延迟函数在setTimeout的内部被回调，根据闭包概念，timer在其声明之外的地方被调用，timer能够记住并访问其声明位置的词法作用域，存在闭包\n\n实际上timer所记住的词法作用域就是全局作用域，所以引用输出的i都是6\n\n修改方案\n\n只要能保证每次循环都能够创建新的作用域，在新作用域中保存当前i的值即可\n\n所以任何可以创建新作用域的方法都可以达到效果，具体可参考这里， 通过分析这段代码的进化历程，或许能够加深您对JavaScript的作用域的理解\n\n常见的做法有\n\n利用具名立即执行函数，每次循环都创建新作用域\n\n```\nfor (var i = 1; i <= 5; i++) {\n    (function scope(j) {\n        setTimeout(function timer() {\n            console.log(j);\n        }, i * 1000);\n    })(i);\n}\n```\n\n利用es6 let创建块作用域\n\n```\nfor (var i = 1; i <= 5; i++) {\n    {\n      let j = i;\n      setTimeout(function timer() {\n            console.log(j);\n        }, i * 1000);\n    }\n}\n```\n总结:根据闭包的概念，只要有回调就会有闭包\n","source":"_posts/Javascript/js-闭包理解---缺乏形参.md","raw":"---\ntitle: js-闭包理解---缺乏形参\ndate: 2016-09-11\ncategories: \n- javascript\n---\n\n```\nfor (var i = 1; i <= 5; i++) {\n    setTimeout(function timer() {\n        console.log(i);\n    }, i*1000);\n}\n```\n\n解释原因\n\nvar i，实际上声明了一个全局变量\n\n延迟函数timer必然是在循环结束后才开始执行，循环结束后，i＝6\n\n循环中确实定义了多个延迟函数timer，延迟函数在setTimeout的内部被回调，根据闭包概念，timer在其声明之外的地方被调用，timer能够记住并访问其声明位置的词法作用域，存在闭包\n\n实际上timer所记住的词法作用域就是全局作用域，所以引用输出的i都是6\n\n修改方案\n\n只要能保证每次循环都能够创建新的作用域，在新作用域中保存当前i的值即可\n\n所以任何可以创建新作用域的方法都可以达到效果，具体可参考这里， 通过分析这段代码的进化历程，或许能够加深您对JavaScript的作用域的理解\n\n常见的做法有\n\n利用具名立即执行函数，每次循环都创建新作用域\n\n```\nfor (var i = 1; i <= 5; i++) {\n    (function scope(j) {\n        setTimeout(function timer() {\n            console.log(j);\n        }, i * 1000);\n    })(i);\n}\n```\n\n利用es6 let创建块作用域\n\n```\nfor (var i = 1; i <= 5; i++) {\n    {\n      let j = i;\n      setTimeout(function timer() {\n            console.log(j);\n        }, i * 1000);\n    }\n}\n```\n总结:根据闭包的概念，只要有回调就会有闭包\n","slug":"Javascript/js-闭包理解---缺乏形参","published":1,"updated":"2017-02-06T02:15:34.000Z","_id":"ciytg4bk7004us10olyfl266e","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">for (var i = 1; i &lt;= 5; i++) &#123;</div><div class=\"line\">    setTimeout(function timer() &#123;</div><div class=\"line\">        console.log(i);</div><div class=\"line\">    &#125;, i*1000);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>解释原因</p>\n<p>var i，实际上声明了一个全局变量</p>\n<p>延迟函数timer必然是在循环结束后才开始执行，循环结束后，i＝6</p>\n<p>循环中确实定义了多个延迟函数timer，延迟函数在setTimeout的内部被回调，根据闭包概念，timer在其声明之外的地方被调用，timer能够记住并访问其声明位置的词法作用域，存在闭包</p>\n<p>实际上timer所记住的词法作用域就是全局作用域，所以引用输出的i都是6</p>\n<p>修改方案</p>\n<p>只要能保证每次循环都能够创建新的作用域，在新作用域中保存当前i的值即可</p>\n<p>所以任何可以创建新作用域的方法都可以达到效果，具体可参考这里， 通过分析这段代码的进化历程，或许能够加深您对JavaScript的作用域的理解</p>\n<p>常见的做法有</p>\n<p>利用具名立即执行函数，每次循环都创建新作用域</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">for (var i = 1; i &lt;= 5; i++) &#123;</div><div class=\"line\">    (function scope(j) &#123;</div><div class=\"line\">        setTimeout(function timer() &#123;</div><div class=\"line\">            console.log(j);</div><div class=\"line\">        &#125;, i * 1000);</div><div class=\"line\">    &#125;)(i);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>利用es6 let创建块作用域</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">for (var i = 1; i &lt;= 5; i++) &#123;</div><div class=\"line\">    &#123;</div><div class=\"line\">      let j = i;</div><div class=\"line\">      setTimeout(function timer() &#123;</div><div class=\"line\">            console.log(j);</div><div class=\"line\">        &#125;, i * 1000);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>总结:根据闭包的概念，只要有回调就会有闭包</p>\n","excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">for (var i = 1; i &lt;= 5; i++) &#123;</div><div class=\"line\">    setTimeout(function timer() &#123;</div><div class=\"line\">        console.log(i);</div><div class=\"line\">    &#125;, i*1000);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>解释原因</p>\n<p>var i，实际上声明了一个全局变量</p>\n<p>延迟函数timer必然是在循环结束后才开始执行，循环结束后，i＝6</p>\n<p>循环中确实定义了多个延迟函数timer，延迟函数在setTimeout的内部被回调，根据闭包概念，timer在其声明之外的地方被调用，timer能够记住并访问其声明位置的词法作用域，存在闭包</p>\n<p>实际上timer所记住的词法作用域就是全局作用域，所以引用输出的i都是6</p>\n<p>修改方案</p>\n<p>只要能保证每次循环都能够创建新的作用域，在新作用域中保存当前i的值即可</p>\n<p>所以任何可以创建新作用域的方法都可以达到效果，具体可参考这里， 通过分析这段代码的进化历程，或许能够加深您对JavaScript的作用域的理解</p>\n<p>常见的做法有</p>\n<p>利用具名立即执行函数，每次循环都创建新作用域</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">for (var i = 1; i &lt;= 5; i++) &#123;</div><div class=\"line\">    (function scope(j) &#123;</div><div class=\"line\">        setTimeout(function timer() &#123;</div><div class=\"line\">            console.log(j);</div><div class=\"line\">        &#125;, i * 1000);</div><div class=\"line\">    &#125;)(i);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>利用es6 let创建块作用域</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">for (var i = 1; i &lt;= 5; i++) &#123;</div><div class=\"line\">    &#123;</div><div class=\"line\">      let j = i;</div><div class=\"line\">      setTimeout(function timer() &#123;</div><div class=\"line\">            console.log(j);</div><div class=\"line\">        &#125;, i * 1000);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>总结:根据闭包的概念，只要有回调就会有闭包</p>\n"},{"title":"js-pattern--h-策略模式","date":"2016-09-10T16:00:00.000Z","_content":"\n## 策略比状态模式 少了一个储存状态的类\n\n```\n'use strict'\n\nlet PriceStrategy = (function () {\n    class strategy {\n        constructor() {\n            let that = this;\n            this.change = {\n                return30: () => {\n\n                },\n                return50: (price) => {\n                    return price/2;\n                },\n                percent90: () => {\n\n                },\n                percent50: () => {\n\n                }\n            }\n        }\n        running(algorithm,price){\n            let _obj = new strategy();\n            return _obj.change[algorithm] && _obj.change[algorithm](price)\n        }\n    }\n\n    return new strategy().running;\n})();\n\n\nconsole.log(PriceStrategy('return50','3214.32'))\n```\n","source":"_posts/Javascript-设计模式/js-pattern--h-策略模式.md","raw":"---\ntitle: js-pattern--h-策略模式\ndate: 2016-09-11\ncategories: \n- javascript\n---\n\n## 策略比状态模式 少了一个储存状态的类\n\n```\n'use strict'\n\nlet PriceStrategy = (function () {\n    class strategy {\n        constructor() {\n            let that = this;\n            this.change = {\n                return30: () => {\n\n                },\n                return50: (price) => {\n                    return price/2;\n                },\n                percent90: () => {\n\n                },\n                percent50: () => {\n\n                }\n            }\n        }\n        running(algorithm,price){\n            let _obj = new strategy();\n            return _obj.change[algorithm] && _obj.change[algorithm](price)\n        }\n    }\n\n    return new strategy().running;\n})();\n\n\nconsole.log(PriceStrategy('return50','3214.32'))\n```\n","slug":"Javascript-设计模式/js-pattern--h-策略模式","published":1,"updated":"2017-02-06T02:51:37.000Z","_id":"ciytg4e52004vs10on218v7pv","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"策略比状态模式-少了一个储存状态的类\"><a href=\"#策略比状态模式-少了一个储存状态的类\" class=\"headerlink\" title=\"策略比状态模式 少了一个储存状态的类\"></a>策略比状态模式 少了一个储存状态的类</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;</div><div class=\"line\"></div><div class=\"line\">let PriceStrategy = (function () &#123;</div><div class=\"line\">    class strategy &#123;</div><div class=\"line\">        constructor() &#123;</div><div class=\"line\">            let that = this;</div><div class=\"line\">            this.change = &#123;</div><div class=\"line\">                return30: () =&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">                &#125;,</div><div class=\"line\">                return50: (price) =&gt; &#123;</div><div class=\"line\">                    return price/2;</div><div class=\"line\">                &#125;,</div><div class=\"line\">                percent90: () =&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">                &#125;,</div><div class=\"line\">                percent50: () =&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        running(algorithm,price)&#123;</div><div class=\"line\">            let _obj = new strategy();</div><div class=\"line\">            return _obj.change[algorithm] &amp;&amp; _obj.change[algorithm](price)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return new strategy().running;</div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">console.log(PriceStrategy(&apos;return50&apos;,&apos;3214.32&apos;))</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"策略比状态模式-少了一个储存状态的类\"><a href=\"#策略比状态模式-少了一个储存状态的类\" class=\"headerlink\" title=\"策略比状态模式 少了一个储存状态的类\"></a>策略比状态模式 少了一个储存状态的类</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;</div><div class=\"line\"></div><div class=\"line\">let PriceStrategy = (function () &#123;</div><div class=\"line\">    class strategy &#123;</div><div class=\"line\">        constructor() &#123;</div><div class=\"line\">            let that = this;</div><div class=\"line\">            this.change = &#123;</div><div class=\"line\">                return30: () =&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">                &#125;,</div><div class=\"line\">                return50: (price) =&gt; &#123;</div><div class=\"line\">                    return price/2;</div><div class=\"line\">                &#125;,</div><div class=\"line\">                percent90: () =&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">                &#125;,</div><div class=\"line\">                percent50: () =&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        running(algorithm,price)&#123;</div><div class=\"line\">            let _obj = new strategy();</div><div class=\"line\">            return _obj.change[algorithm] &amp;&amp; _obj.change[algorithm](price)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return new strategy().running;</div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">console.log(PriceStrategy(&apos;return50&apos;,&apos;3214.32&apos;))</div></pre></td></tr></table></figure>\n"},{"title":"js-pattern--h-模板方法模式","date":"2016-09-10T16:00:00.000Z","_content":"\n``基于复用技术``、``抽象类-->继承抽象类``\n\n## 创建抽象类\n\n```\nvar CaffeineBeverage = function () {\n\n};\nCaffeineBeverage.prototype.prepareRecipe = function () {\n    this.boilWater();\n    this.brew();\n    this.pourOnCup();\n    if (this.customerWantsCondiments()) {\n        // 如果可以想加小料，就加上\n this.addCondiments();\n    }\n};\nCaffeineBeverage.prototype.boilWater = function () {\n    console.log(\"将水烧开!\");\n};\nCaffeineBeverage.prototype.pourOnCup = function () {\n    console.log(\"将饮料到再杯子里!\");\n};\nCaffeineBeverage.prototype.brew = function () {\n    throw new Error(\"该方法必须重写!\");\n};\nCaffeineBeverage.prototype.addCondiments = function () {\n    throw new Error(\"该方法必须重写!\");\n};\n// 默认加上小料\nCaffeineBeverage.prototype.customerWantsCondiments = function () {\n    return true;\n};\n```\n\n## 实现抽象类\n\n```\n// 冲咖啡\nvar Coffee = function () {\n    CaffeineBeverage.apply(this);\n};\nCoffee.prototype = new CaffeineBeverage();\nCoffee.prototype.brew = function () {\n    console.log(\"从咖啡机想咖啡倒进去!\");\n};\nCoffee.prototype.addCondiments = function () {\n    console.log(\"添加糖和牛奶\");\n};\nCoffee.prototype.customerWantsCondiments = function () {\n    return confirm(\"你想添加糖和牛奶吗？\");\n};\n\n//冲茶叶\nvar Tea = function () {\n    CaffeineBeverage.apply(this);\n};\nTea.prototype = new CaffeineBeverage();\nTea.prototype.brew = function () {\n    console.log(\"泡茶叶!\");\n};\nTea.prototype.addCondiments = function () {\n    console.log(\"添加柠檬!\");\n};\nTea.prototype.customerWantsCondiments = function () {\n    return confirm(\"你想添加柠檬嘛？\");\n};\n\n```\n","source":"_posts/Javascript-设计模式/js-pattern--h-模板方法模式.md","raw":"---\ntitle: js-pattern--h-模板方法模式\ndate: 2016-09-11\ncategories: \n- javascript\n---\n\n``基于复用技术``、``抽象类-->继承抽象类``\n\n## 创建抽象类\n\n```\nvar CaffeineBeverage = function () {\n\n};\nCaffeineBeverage.prototype.prepareRecipe = function () {\n    this.boilWater();\n    this.brew();\n    this.pourOnCup();\n    if (this.customerWantsCondiments()) {\n        // 如果可以想加小料，就加上\n this.addCondiments();\n    }\n};\nCaffeineBeverage.prototype.boilWater = function () {\n    console.log(\"将水烧开!\");\n};\nCaffeineBeverage.prototype.pourOnCup = function () {\n    console.log(\"将饮料到再杯子里!\");\n};\nCaffeineBeverage.prototype.brew = function () {\n    throw new Error(\"该方法必须重写!\");\n};\nCaffeineBeverage.prototype.addCondiments = function () {\n    throw new Error(\"该方法必须重写!\");\n};\n// 默认加上小料\nCaffeineBeverage.prototype.customerWantsCondiments = function () {\n    return true;\n};\n```\n\n## 实现抽象类\n\n```\n// 冲咖啡\nvar Coffee = function () {\n    CaffeineBeverage.apply(this);\n};\nCoffee.prototype = new CaffeineBeverage();\nCoffee.prototype.brew = function () {\n    console.log(\"从咖啡机想咖啡倒进去!\");\n};\nCoffee.prototype.addCondiments = function () {\n    console.log(\"添加糖和牛奶\");\n};\nCoffee.prototype.customerWantsCondiments = function () {\n    return confirm(\"你想添加糖和牛奶吗？\");\n};\n\n//冲茶叶\nvar Tea = function () {\n    CaffeineBeverage.apply(this);\n};\nTea.prototype = new CaffeineBeverage();\nTea.prototype.brew = function () {\n    console.log(\"泡茶叶!\");\n};\nTea.prototype.addCondiments = function () {\n    console.log(\"添加柠檬!\");\n};\nTea.prototype.customerWantsCondiments = function () {\n    return confirm(\"你想添加柠檬嘛？\");\n};\n\n```\n","slug":"Javascript-设计模式/js-pattern--h-模板方法模式","published":1,"updated":"2017-02-06T02:51:48.000Z","_id":"ciytg4e53004ws10orr2933iq","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>基于复用技术</code>、<code>抽象类--&gt;继承抽象类</code></p>\n<h2 id=\"创建抽象类\"><a href=\"#创建抽象类\" class=\"headerlink\" title=\"创建抽象类\"></a>创建抽象类</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">var CaffeineBeverage = function () &#123;</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\">CaffeineBeverage.prototype.prepareRecipe = function () &#123;</div><div class=\"line\">    this.boilWater();</div><div class=\"line\">    this.brew();</div><div class=\"line\">    this.pourOnCup();</div><div class=\"line\">    if (this.customerWantsCondiments()) &#123;</div><div class=\"line\">        // 如果可以想加小料，就加上</div><div class=\"line\"> this.addCondiments();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">CaffeineBeverage.prototype.boilWater = function () &#123;</div><div class=\"line\">    console.log(&quot;将水烧开!&quot;);</div><div class=\"line\">&#125;;</div><div class=\"line\">CaffeineBeverage.prototype.pourOnCup = function () &#123;</div><div class=\"line\">    console.log(&quot;将饮料到再杯子里!&quot;);</div><div class=\"line\">&#125;;</div><div class=\"line\">CaffeineBeverage.prototype.brew = function () &#123;</div><div class=\"line\">    throw new Error(&quot;该方法必须重写!&quot;);</div><div class=\"line\">&#125;;</div><div class=\"line\">CaffeineBeverage.prototype.addCondiments = function () &#123;</div><div class=\"line\">    throw new Error(&quot;该方法必须重写!&quot;);</div><div class=\"line\">&#125;;</div><div class=\"line\">// 默认加上小料</div><div class=\"line\">CaffeineBeverage.prototype.customerWantsCondiments = function () &#123;</div><div class=\"line\">    return true;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"实现抽象类\"><a href=\"#实现抽象类\" class=\"headerlink\" title=\"实现抽象类\"></a>实现抽象类</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 冲咖啡</div><div class=\"line\">var Coffee = function () &#123;</div><div class=\"line\">    CaffeineBeverage.apply(this);</div><div class=\"line\">&#125;;</div><div class=\"line\">Coffee.prototype = new CaffeineBeverage();</div><div class=\"line\">Coffee.prototype.brew = function () &#123;</div><div class=\"line\">    console.log(&quot;从咖啡机想咖啡倒进去!&quot;);</div><div class=\"line\">&#125;;</div><div class=\"line\">Coffee.prototype.addCondiments = function () &#123;</div><div class=\"line\">    console.log(&quot;添加糖和牛奶&quot;);</div><div class=\"line\">&#125;;</div><div class=\"line\">Coffee.prototype.customerWantsCondiments = function () &#123;</div><div class=\"line\">    return confirm(&quot;你想添加糖和牛奶吗？&quot;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">//冲茶叶</div><div class=\"line\">var Tea = function () &#123;</div><div class=\"line\">    CaffeineBeverage.apply(this);</div><div class=\"line\">&#125;;</div><div class=\"line\">Tea.prototype = new CaffeineBeverage();</div><div class=\"line\">Tea.prototype.brew = function () &#123;</div><div class=\"line\">    console.log(&quot;泡茶叶!&quot;);</div><div class=\"line\">&#125;;</div><div class=\"line\">Tea.prototype.addCondiments = function () &#123;</div><div class=\"line\">    console.log(&quot;添加柠檬!&quot;);</div><div class=\"line\">&#125;;</div><div class=\"line\">Tea.prototype.customerWantsCondiments = function () &#123;</div><div class=\"line\">    return confirm(&quot;你想添加柠檬嘛？&quot;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p><code>基于复用技术</code>、<code>抽象类--&gt;继承抽象类</code></p>\n<h2 id=\"创建抽象类\"><a href=\"#创建抽象类\" class=\"headerlink\" title=\"创建抽象类\"></a>创建抽象类</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">var CaffeineBeverage = function () &#123;</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\">CaffeineBeverage.prototype.prepareRecipe = function () &#123;</div><div class=\"line\">    this.boilWater();</div><div class=\"line\">    this.brew();</div><div class=\"line\">    this.pourOnCup();</div><div class=\"line\">    if (this.customerWantsCondiments()) &#123;</div><div class=\"line\">        // 如果可以想加小料，就加上</div><div class=\"line\"> this.addCondiments();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">CaffeineBeverage.prototype.boilWater = function () &#123;</div><div class=\"line\">    console.log(&quot;将水烧开!&quot;);</div><div class=\"line\">&#125;;</div><div class=\"line\">CaffeineBeverage.prototype.pourOnCup = function () &#123;</div><div class=\"line\">    console.log(&quot;将饮料到再杯子里!&quot;);</div><div class=\"line\">&#125;;</div><div class=\"line\">CaffeineBeverage.prototype.brew = function () &#123;</div><div class=\"line\">    throw new Error(&quot;该方法必须重写!&quot;);</div><div class=\"line\">&#125;;</div><div class=\"line\">CaffeineBeverage.prototype.addCondiments = function () &#123;</div><div class=\"line\">    throw new Error(&quot;该方法必须重写!&quot;);</div><div class=\"line\">&#125;;</div><div class=\"line\">// 默认加上小料</div><div class=\"line\">CaffeineBeverage.prototype.customerWantsCondiments = function () &#123;</div><div class=\"line\">    return true;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"实现抽象类\"><a href=\"#实现抽象类\" class=\"headerlink\" title=\"实现抽象类\"></a>实现抽象类</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 冲咖啡</div><div class=\"line\">var Coffee = function () &#123;</div><div class=\"line\">    CaffeineBeverage.apply(this);</div><div class=\"line\">&#125;;</div><div class=\"line\">Coffee.prototype = new CaffeineBeverage();</div><div class=\"line\">Coffee.prototype.brew = function () &#123;</div><div class=\"line\">    console.log(&quot;从咖啡机想咖啡倒进去!&quot;);</div><div class=\"line\">&#125;;</div><div class=\"line\">Coffee.prototype.addCondiments = function () &#123;</div><div class=\"line\">    console.log(&quot;添加糖和牛奶&quot;);</div><div class=\"line\">&#125;;</div><div class=\"line\">Coffee.prototype.customerWantsCondiments = function () &#123;</div><div class=\"line\">    return confirm(&quot;你想添加糖和牛奶吗？&quot;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">//冲茶叶</div><div class=\"line\">var Tea = function () &#123;</div><div class=\"line\">    CaffeineBeverage.apply(this);</div><div class=\"line\">&#125;;</div><div class=\"line\">Tea.prototype = new CaffeineBeverage();</div><div class=\"line\">Tea.prototype.brew = function () &#123;</div><div class=\"line\">    console.log(&quot;泡茶叶!&quot;);</div><div class=\"line\">&#125;;</div><div class=\"line\">Tea.prototype.addCondiments = function () &#123;</div><div class=\"line\">    console.log(&quot;添加柠檬!&quot;);</div><div class=\"line\">&#125;;</div><div class=\"line\">Tea.prototype.customerWantsCondiments = function () &#123;</div><div class=\"line\">    return confirm(&quot;你想添加柠檬嘛？&quot;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n"},{"title":"js-pattern--h-观察者模式","date":"2016-09-10T16:00:00.000Z","_content":"\n```\n'use strict';\n\n/**\n * 观察者模式:定义依赖的关系\n */\nlet Observer = (function () {\n    //懒加载单例模式\n    let _instance = null;\n    let _message = Symbol(\"message\");\n\n    class Observer {\n        constructor() {\n            //生成需要存储的字典\n            this[_message] = {};\n        }\n\n        //注册信息接口,给需要注册的函数一个名字;\n        regist(key, fn) {\n            !!this[_message][key] ? this[_message][key].push(fn) : this[_message][key] = [fn];\n        }\n\n        //发布信息接口,当触发函数名字的时候,提供对应的功能\n        fire(key, args) {\n            if (!this[_message][key]) {\n                return false;\n            }\n            let date = {\n                key: key,\n                args: args || {}\n            };\n\n            for (let i = 0, len = this[_message][key].length; i < len; i++) {\n                this[_message][key][i].apply(null, date);\n            }\n        }\n\n        //移除信息接口\n        remove(key, fn) {\n            if (Array.isArray(this[_message][key])) {\n                let i = this[_message][key].length - 1;\n                for (; i > 0; i--) {\n                    this[_message][key][i] === fn && this[_message][key].splice(i, 1);\n                }\n            }\n        }\n    }\n\n    return function () {\n        return _instance = _instance || new Observer();\n    }\n\n})();\n\nmodule.exports = Observer();\n```\n\n## 测试\n\n```\n'use strict';\n\nconst Obp = require('./design_pattern/observe');\n\n/**\n * 需要传递的东西 要建立在构造函数内,在创建的时候就应该初始化了,要不this得值很难传过去的\n */\nclass Student{\n    constructor (name){\n        let that = this;\n        this._name = name;\n        this.say = function () {\n            console.log(that._name + \"正在回答\");\n        }\n    }\n    answer(question){\n         Obp.regist(question,this.say);\n    }\n    sleep(question){\n        console.log(this._name + \"正在睡觉\")\n        Obp.remove(question,this.say);\n    }\n}\n\nclass Teacher{\n    constructor(){\n    }\n    ask(question){\n        Obp.fire(question);\n    }\n}\n\nlet one = new Student(\"学生1\");\nlet one2 = new Student(\"学生2\");\nlet one3 = new Student(\"学生3\");\n\none.answer(\"丽君是不是傻瓜\");\none2.answer(\"丽君是不是傻瓜\");\none3.answer(\"丽君是不是傻瓜\");\n\none3.sleep(\"丽君是不是傻瓜\");\n\nlet two = new Teacher();\n\ntwo.ask(\"丽君是不是傻瓜\");\n```\n","source":"_posts/Javascript-设计模式/js-pattern--h-观察者模式.md","raw":"---\ntitle: js-pattern--h-观察者模式\ndate: 2016-09-11\ncategories: \n- javascript\n---\n\n```\n'use strict';\n\n/**\n * 观察者模式:定义依赖的关系\n */\nlet Observer = (function () {\n    //懒加载单例模式\n    let _instance = null;\n    let _message = Symbol(\"message\");\n\n    class Observer {\n        constructor() {\n            //生成需要存储的字典\n            this[_message] = {};\n        }\n\n        //注册信息接口,给需要注册的函数一个名字;\n        regist(key, fn) {\n            !!this[_message][key] ? this[_message][key].push(fn) : this[_message][key] = [fn];\n        }\n\n        //发布信息接口,当触发函数名字的时候,提供对应的功能\n        fire(key, args) {\n            if (!this[_message][key]) {\n                return false;\n            }\n            let date = {\n                key: key,\n                args: args || {}\n            };\n\n            for (let i = 0, len = this[_message][key].length; i < len; i++) {\n                this[_message][key][i].apply(null, date);\n            }\n        }\n\n        //移除信息接口\n        remove(key, fn) {\n            if (Array.isArray(this[_message][key])) {\n                let i = this[_message][key].length - 1;\n                for (; i > 0; i--) {\n                    this[_message][key][i] === fn && this[_message][key].splice(i, 1);\n                }\n            }\n        }\n    }\n\n    return function () {\n        return _instance = _instance || new Observer();\n    }\n\n})();\n\nmodule.exports = Observer();\n```\n\n## 测试\n\n```\n'use strict';\n\nconst Obp = require('./design_pattern/observe');\n\n/**\n * 需要传递的东西 要建立在构造函数内,在创建的时候就应该初始化了,要不this得值很难传过去的\n */\nclass Student{\n    constructor (name){\n        let that = this;\n        this._name = name;\n        this.say = function () {\n            console.log(that._name + \"正在回答\");\n        }\n    }\n    answer(question){\n         Obp.regist(question,this.say);\n    }\n    sleep(question){\n        console.log(this._name + \"正在睡觉\")\n        Obp.remove(question,this.say);\n    }\n}\n\nclass Teacher{\n    constructor(){\n    }\n    ask(question){\n        Obp.fire(question);\n    }\n}\n\nlet one = new Student(\"学生1\");\nlet one2 = new Student(\"学生2\");\nlet one3 = new Student(\"学生3\");\n\none.answer(\"丽君是不是傻瓜\");\none2.answer(\"丽君是不是傻瓜\");\none3.answer(\"丽君是不是傻瓜\");\n\none3.sleep(\"丽君是不是傻瓜\");\n\nlet two = new Teacher();\n\ntwo.ask(\"丽君是不是傻瓜\");\n```\n","slug":"Javascript-设计模式/js-pattern--h-观察者模式","published":1,"updated":"2017-02-06T02:51:30.000Z","_id":"ciytg4e54004xs10oxe6edkkj","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 观察者模式:定义依赖的关系</div><div class=\"line\"> */</div><div class=\"line\">let Observer = (function () &#123;</div><div class=\"line\">    //懒加载单例模式</div><div class=\"line\">    let _instance = null;</div><div class=\"line\">    let _message = Symbol(&quot;message&quot;);</div><div class=\"line\"></div><div class=\"line\">    class Observer &#123;</div><div class=\"line\">        constructor() &#123;</div><div class=\"line\">            //生成需要存储的字典</div><div class=\"line\">            this[_message] = &#123;&#125;;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        //注册信息接口,给需要注册的函数一个名字;</div><div class=\"line\">        regist(key, fn) &#123;</div><div class=\"line\">            !!this[_message][key] ? this[_message][key].push(fn) : this[_message][key] = [fn];</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        //发布信息接口,当触发函数名字的时候,提供对应的功能</div><div class=\"line\">        fire(key, args) &#123;</div><div class=\"line\">            if (!this[_message][key]) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\">            let date = &#123;</div><div class=\"line\">                key: key,</div><div class=\"line\">                args: args || &#123;&#125;</div><div class=\"line\">            &#125;;</div><div class=\"line\"></div><div class=\"line\">            for (let i = 0, len = this[_message][key].length; i &lt; len; i++) &#123;</div><div class=\"line\">                this[_message][key][i].apply(null, date);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        //移除信息接口</div><div class=\"line\">        remove(key, fn) &#123;</div><div class=\"line\">            if (Array.isArray(this[_message][key])) &#123;</div><div class=\"line\">                let i = this[_message][key].length - 1;</div><div class=\"line\">                for (; i &gt; 0; i--) &#123;</div><div class=\"line\">                    this[_message][key][i] === fn &amp;&amp; this[_message][key].splice(i, 1);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return function () &#123;</div><div class=\"line\">        return _instance = _instance || new Observer();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\">module.exports = Observer();</div></pre></td></tr></table></figure>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;;</div><div class=\"line\"></div><div class=\"line\">const Obp = require(&apos;./design_pattern/observe&apos;);</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 需要传递的东西 要建立在构造函数内,在创建的时候就应该初始化了,要不this得值很难传过去的</div><div class=\"line\"> */</div><div class=\"line\">class Student&#123;</div><div class=\"line\">    constructor (name)&#123;</div><div class=\"line\">        let that = this;</div><div class=\"line\">        this._name = name;</div><div class=\"line\">        this.say = function () &#123;</div><div class=\"line\">            console.log(that._name + &quot;正在回答&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    answer(question)&#123;</div><div class=\"line\">         Obp.regist(question,this.say);</div><div class=\"line\">    &#125;</div><div class=\"line\">    sleep(question)&#123;</div><div class=\"line\">        console.log(this._name + &quot;正在睡觉&quot;)</div><div class=\"line\">        Obp.remove(question,this.say);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class Teacher&#123;</div><div class=\"line\">    constructor()&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ask(question)&#123;</div><div class=\"line\">        Obp.fire(question);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">let one = new Student(&quot;学生1&quot;);</div><div class=\"line\">let one2 = new Student(&quot;学生2&quot;);</div><div class=\"line\">let one3 = new Student(&quot;学生3&quot;);</div><div class=\"line\"></div><div class=\"line\">one.answer(&quot;丽君是不是傻瓜&quot;);</div><div class=\"line\">one2.answer(&quot;丽君是不是傻瓜&quot;);</div><div class=\"line\">one3.answer(&quot;丽君是不是傻瓜&quot;);</div><div class=\"line\"></div><div class=\"line\">one3.sleep(&quot;丽君是不是傻瓜&quot;);</div><div class=\"line\"></div><div class=\"line\">let two = new Teacher();</div><div class=\"line\"></div><div class=\"line\">two.ask(&quot;丽君是不是傻瓜&quot;);</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 观察者模式:定义依赖的关系</div><div class=\"line\"> */</div><div class=\"line\">let Observer = (function () &#123;</div><div class=\"line\">    //懒加载单例模式</div><div class=\"line\">    let _instance = null;</div><div class=\"line\">    let _message = Symbol(&quot;message&quot;);</div><div class=\"line\"></div><div class=\"line\">    class Observer &#123;</div><div class=\"line\">        constructor() &#123;</div><div class=\"line\">            //生成需要存储的字典</div><div class=\"line\">            this[_message] = &#123;&#125;;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        //注册信息接口,给需要注册的函数一个名字;</div><div class=\"line\">        regist(key, fn) &#123;</div><div class=\"line\">            !!this[_message][key] ? this[_message][key].push(fn) : this[_message][key] = [fn];</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        //发布信息接口,当触发函数名字的时候,提供对应的功能</div><div class=\"line\">        fire(key, args) &#123;</div><div class=\"line\">            if (!this[_message][key]) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\">            let date = &#123;</div><div class=\"line\">                key: key,</div><div class=\"line\">                args: args || &#123;&#125;</div><div class=\"line\">            &#125;;</div><div class=\"line\"></div><div class=\"line\">            for (let i = 0, len = this[_message][key].length; i &lt; len; i++) &#123;</div><div class=\"line\">                this[_message][key][i].apply(null, date);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        //移除信息接口</div><div class=\"line\">        remove(key, fn) &#123;</div><div class=\"line\">            if (Array.isArray(this[_message][key])) &#123;</div><div class=\"line\">                let i = this[_message][key].length - 1;</div><div class=\"line\">                for (; i &gt; 0; i--) &#123;</div><div class=\"line\">                    this[_message][key][i] === fn &amp;&amp; this[_message][key].splice(i, 1);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return function () &#123;</div><div class=\"line\">        return _instance = _instance || new Observer();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\">module.exports = Observer();</div></pre></td></tr></table></figure>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;;</div><div class=\"line\"></div><div class=\"line\">const Obp = require(&apos;./design_pattern/observe&apos;);</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 需要传递的东西 要建立在构造函数内,在创建的时候就应该初始化了,要不this得值很难传过去的</div><div class=\"line\"> */</div><div class=\"line\">class Student&#123;</div><div class=\"line\">    constructor (name)&#123;</div><div class=\"line\">        let that = this;</div><div class=\"line\">        this._name = name;</div><div class=\"line\">        this.say = function () &#123;</div><div class=\"line\">            console.log(that._name + &quot;正在回答&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    answer(question)&#123;</div><div class=\"line\">         Obp.regist(question,this.say);</div><div class=\"line\">    &#125;</div><div class=\"line\">    sleep(question)&#123;</div><div class=\"line\">        console.log(this._name + &quot;正在睡觉&quot;)</div><div class=\"line\">        Obp.remove(question,this.say);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class Teacher&#123;</div><div class=\"line\">    constructor()&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ask(question)&#123;</div><div class=\"line\">        Obp.fire(question);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">let one = new Student(&quot;学生1&quot;);</div><div class=\"line\">let one2 = new Student(&quot;学生2&quot;);</div><div class=\"line\">let one3 = new Student(&quot;学生3&quot;);</div><div class=\"line\"></div><div class=\"line\">one.answer(&quot;丽君是不是傻瓜&quot;);</div><div class=\"line\">one2.answer(&quot;丽君是不是傻瓜&quot;);</div><div class=\"line\">one3.answer(&quot;丽君是不是傻瓜&quot;);</div><div class=\"line\"></div><div class=\"line\">one3.sleep(&quot;丽君是不是傻瓜&quot;);</div><div class=\"line\"></div><div class=\"line\">let two = new Teacher();</div><div class=\"line\"></div><div class=\"line\">two.ask(&quot;丽君是不是傻瓜&quot;);</div></pre></td></tr></table></figure>\n"},{"title":"js-pattern--k-节流模式","date":"2016-09-10T16:00:00.000Z","_content":"\n```\n_.throttle = function(func, wait) {\n    var context, args, timeout, result;\n    var previous = 0;\n    var later = function() {\n      previous = new Date;\n      timeout = null;\n      result = func.apply(context, args);\n    };\n    return function() {\n      var now = new Date;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0) {\n        clearTimeout(timeout);\n        timeout = null;\n        previous = now;\n        result = func.apply(context, args);\n      } else if (!timeout) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };\n ```\n \n```  \n  _.debounce = function(func, wait, immediate) {\n    var timeout, result;\n    return function() {\n      var context = this, args = arguments;\n      var later = function() {\n        timeout = null;\n        if (!immediate) result = func.apply(context, args);\n      };\n      var callNow = immediate && !timeout;\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n      if (callNow) result = func.apply(context, args);\n      return result;\n    };\n  };\n```\n","source":"_posts/Javascript-设计模式/js-pattern--k-节流模式.md","raw":"---\ntitle: js-pattern--k-节流模式\ndate: 2016-09-11\ncategories: \n- javascript\n---\n\n```\n_.throttle = function(func, wait) {\n    var context, args, timeout, result;\n    var previous = 0;\n    var later = function() {\n      previous = new Date;\n      timeout = null;\n      result = func.apply(context, args);\n    };\n    return function() {\n      var now = new Date;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0) {\n        clearTimeout(timeout);\n        timeout = null;\n        previous = now;\n        result = func.apply(context, args);\n      } else if (!timeout) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };\n ```\n \n```  \n  _.debounce = function(func, wait, immediate) {\n    var timeout, result;\n    return function() {\n      var context = this, args = arguments;\n      var later = function() {\n        timeout = null;\n        if (!immediate) result = func.apply(context, args);\n      };\n      var callNow = immediate && !timeout;\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n      if (callNow) result = func.apply(context, args);\n      return result;\n    };\n  };\n```\n","slug":"Javascript-设计模式/js-pattern--k-节流模式","published":1,"updated":"2017-02-06T02:51:22.000Z","_id":"ciytg4e55004ys10ofxlxfw1m","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.throttle = function(func, wait) &#123;</div><div class=\"line\">    var context, args, timeout, result;</div><div class=\"line\">    var previous = 0;</div><div class=\"line\">    var later = function() &#123;</div><div class=\"line\">      previous = new Date;</div><div class=\"line\">      timeout = null;</div><div class=\"line\">      result = func.apply(context, args);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    return function() &#123;</div><div class=\"line\">      var now = new Date;</div><div class=\"line\">      var remaining = wait - (now - previous);</div><div class=\"line\">      context = this;</div><div class=\"line\">      args = arguments;</div><div class=\"line\">      if (remaining &lt;= 0) &#123;</div><div class=\"line\">        clearTimeout(timeout);</div><div class=\"line\">        timeout = null;</div><div class=\"line\">        previous = now;</div><div class=\"line\">        result = func.apply(context, args);</div><div class=\"line\">      &#125; else if (!timeout) &#123;</div><div class=\"line\">        timeout = setTimeout(later, remaining);</div><div class=\"line\">      &#125;</div><div class=\"line\">      return result;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.debounce = function(func, wait, immediate) &#123;</div><div class=\"line\">  var timeout, result;</div><div class=\"line\">  return function() &#123;</div><div class=\"line\">    var context = this, args = arguments;</div><div class=\"line\">    var later = function() &#123;</div><div class=\"line\">      timeout = null;</div><div class=\"line\">      if (!immediate) result = func.apply(context, args);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    var callNow = immediate &amp;&amp; !timeout;</div><div class=\"line\">    clearTimeout(timeout);</div><div class=\"line\">    timeout = setTimeout(later, wait);</div><div class=\"line\">    if (callNow) result = func.apply(context, args);</div><div class=\"line\">    return result;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.throttle = function(func, wait) &#123;</div><div class=\"line\">    var context, args, timeout, result;</div><div class=\"line\">    var previous = 0;</div><div class=\"line\">    var later = function() &#123;</div><div class=\"line\">      previous = new Date;</div><div class=\"line\">      timeout = null;</div><div class=\"line\">      result = func.apply(context, args);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    return function() &#123;</div><div class=\"line\">      var now = new Date;</div><div class=\"line\">      var remaining = wait - (now - previous);</div><div class=\"line\">      context = this;</div><div class=\"line\">      args = arguments;</div><div class=\"line\">      if (remaining &lt;= 0) &#123;</div><div class=\"line\">        clearTimeout(timeout);</div><div class=\"line\">        timeout = null;</div><div class=\"line\">        previous = now;</div><div class=\"line\">        result = func.apply(context, args);</div><div class=\"line\">      &#125; else if (!timeout) &#123;</div><div class=\"line\">        timeout = setTimeout(later, remaining);</div><div class=\"line\">      &#125;</div><div class=\"line\">      return result;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.debounce = function(func, wait, immediate) &#123;</div><div class=\"line\">  var timeout, result;</div><div class=\"line\">  return function() &#123;</div><div class=\"line\">    var context = this, args = arguments;</div><div class=\"line\">    var later = function() &#123;</div><div class=\"line\">      timeout = null;</div><div class=\"line\">      if (!immediate) result = func.apply(context, args);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    var callNow = immediate &amp;&amp; !timeout;</div><div class=\"line\">    clearTimeout(timeout);</div><div class=\"line\">    timeout = setTimeout(later, wait);</div><div class=\"line\">    if (callNow) result = func.apply(context, args);</div><div class=\"line\">    return result;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n"},{"title":"js-pattern-简介与对象的收编","date":"2016-09-10T16:00:00.000Z","_content":"\n参考并结合es6类 是JavaScript 设计模式\n\n```\n-a : 架构型设计模式\n-h : 行为型设计模式\n-i : 创建型设计模式\n-k : 技巧型设计模式\n-s : 结构型设计模式\n```\n\n高内聚 : =内聚力,是软件度量,组成模块程度,即包含鲁棒性(健壮性),可靠度,可复用性和易懂性;\n\n耦合性 : 与内聚性相对;\n\n## 全局函数的处理\n\n# 用对象收编\n\n```\nlet obj = {\n    one : ()=>{\n\n    },\n    two : ()=>{\n\n    }\n}\n```\n\n# 真假对象\n```\nlet obj = ()=> {\n    return {\n        one: ()=> {\n            console.log(\"one\")\n        },\n        two: ()=> {\n            console.log(\"two\")\n        }\n    }\n}\n```\n\n# 类的形式\n```\nclass obj {\n    constructor() {\n    }\n\n    one(){\n        console.log(\"one\");\n        return this;\n    }\n    two(){\n        console.log(\"two\")\n        return this;\n    }\n}\n```\n\n## 函数祖先绑定\n\n```\nFunction.prototype.addMethod = function(name,func){\n    this[name] = func;\n    //类式调用方法\n    //this.prototype[name] = fn ;\n}\n```\n\n# 初始化 \n```\nlet methons = function(){};\nor let methons = new Function();\n```\n\n","source":"_posts/Javascript-设计模式/js-pattern-简介与对象的收编.md","raw":"---\ntitle: js-pattern-简介与对象的收编\ndate: 2016-09-11\ncategories: \n- javascript\n---\n\n参考并结合es6类 是JavaScript 设计模式\n\n```\n-a : 架构型设计模式\n-h : 行为型设计模式\n-i : 创建型设计模式\n-k : 技巧型设计模式\n-s : 结构型设计模式\n```\n\n高内聚 : =内聚力,是软件度量,组成模块程度,即包含鲁棒性(健壮性),可靠度,可复用性和易懂性;\n\n耦合性 : 与内聚性相对;\n\n## 全局函数的处理\n\n# 用对象收编\n\n```\nlet obj = {\n    one : ()=>{\n\n    },\n    two : ()=>{\n\n    }\n}\n```\n\n# 真假对象\n```\nlet obj = ()=> {\n    return {\n        one: ()=> {\n            console.log(\"one\")\n        },\n        two: ()=> {\n            console.log(\"two\")\n        }\n    }\n}\n```\n\n# 类的形式\n```\nclass obj {\n    constructor() {\n    }\n\n    one(){\n        console.log(\"one\");\n        return this;\n    }\n    two(){\n        console.log(\"two\")\n        return this;\n    }\n}\n```\n\n## 函数祖先绑定\n\n```\nFunction.prototype.addMethod = function(name,func){\n    this[name] = func;\n    //类式调用方法\n    //this.prototype[name] = fn ;\n}\n```\n\n# 初始化 \n```\nlet methons = function(){};\nor let methons = new Function();\n```\n\n","slug":"Javascript-设计模式/js-pattern-简介与对象的收编","published":1,"updated":"2017-02-06T02:51:10.000Z","_id":"ciytg4e56004zs10o5j5cwbcg","comments":1,"layout":"post","photos":[],"link":"","content":"<p>参考并结合es6类 是JavaScript 设计模式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">-a : 架构型设计模式</div><div class=\"line\">-h : 行为型设计模式</div><div class=\"line\">-i : 创建型设计模式</div><div class=\"line\">-k : 技巧型设计模式</div><div class=\"line\">-s : 结构型设计模式</div></pre></td></tr></table></figure>\n<p>高内聚 : =内聚力,是软件度量,组成模块程度,即包含鲁棒性(健壮性),可靠度,可复用性和易懂性;</p>\n<p>耦合性 : 与内聚性相对;</p>\n<h2 id=\"全局函数的处理\"><a href=\"#全局函数的处理\" class=\"headerlink\" title=\"全局函数的处理\"></a>全局函数的处理</h2><h1 id=\"用对象收编\"><a href=\"#用对象收编\" class=\"headerlink\" title=\"用对象收编\"></a>用对象收编</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">let obj = &#123;</div><div class=\"line\">    one : ()=&gt;&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;,</div><div class=\"line\">    two : ()=&gt;&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"真假对象\"><a href=\"#真假对象\" class=\"headerlink\" title=\"真假对象\"></a>真假对象</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">let obj = ()=&gt; &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">        one: ()=&gt; &#123;</div><div class=\"line\">            console.log(&quot;one&quot;)</div><div class=\"line\">        &#125;,</div><div class=\"line\">        two: ()=&gt; &#123;</div><div class=\"line\">            console.log(&quot;two&quot;)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"类的形式\"><a href=\"#类的形式\" class=\"headerlink\" title=\"类的形式\"></a>类的形式</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">class obj &#123;</div><div class=\"line\">    constructor() &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    one()&#123;</div><div class=\"line\">        console.log(&quot;one&quot;);</div><div class=\"line\">        return this;</div><div class=\"line\">    &#125;</div><div class=\"line\">    two()&#123;</div><div class=\"line\">        console.log(&quot;two&quot;)</div><div class=\"line\">        return this;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"函数祖先绑定\"><a href=\"#函数祖先绑定\" class=\"headerlink\" title=\"函数祖先绑定\"></a>函数祖先绑定</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Function.prototype.addMethod = function(name,func)&#123;</div><div class=\"line\">    this[name] = func;</div><div class=\"line\">    //类式调用方法</div><div class=\"line\">    //this.prototype[name] = fn ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">let methons = function()&#123;&#125;;</div><div class=\"line\">or let methons = new Function();</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>参考并结合es6类 是JavaScript 设计模式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">-a : 架构型设计模式</div><div class=\"line\">-h : 行为型设计模式</div><div class=\"line\">-i : 创建型设计模式</div><div class=\"line\">-k : 技巧型设计模式</div><div class=\"line\">-s : 结构型设计模式</div></pre></td></tr></table></figure>\n<p>高内聚 : =内聚力,是软件度量,组成模块程度,即包含鲁棒性(健壮性),可靠度,可复用性和易懂性;</p>\n<p>耦合性 : 与内聚性相对;</p>\n<h2 id=\"全局函数的处理\"><a href=\"#全局函数的处理\" class=\"headerlink\" title=\"全局函数的处理\"></a>全局函数的处理</h2><h1 id=\"用对象收编\"><a href=\"#用对象收编\" class=\"headerlink\" title=\"用对象收编\"></a>用对象收编</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">let obj = &#123;</div><div class=\"line\">    one : ()=&gt;&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;,</div><div class=\"line\">    two : ()=&gt;&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"真假对象\"><a href=\"#真假对象\" class=\"headerlink\" title=\"真假对象\"></a>真假对象</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">let obj = ()=&gt; &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">        one: ()=&gt; &#123;</div><div class=\"line\">            console.log(&quot;one&quot;)</div><div class=\"line\">        &#125;,</div><div class=\"line\">        two: ()=&gt; &#123;</div><div class=\"line\">            console.log(&quot;two&quot;)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"类的形式\"><a href=\"#类的形式\" class=\"headerlink\" title=\"类的形式\"></a>类的形式</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">class obj &#123;</div><div class=\"line\">    constructor() &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    one()&#123;</div><div class=\"line\">        console.log(&quot;one&quot;);</div><div class=\"line\">        return this;</div><div class=\"line\">    &#125;</div><div class=\"line\">    two()&#123;</div><div class=\"line\">        console.log(&quot;two&quot;)</div><div class=\"line\">        return this;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"函数祖先绑定\"><a href=\"#函数祖先绑定\" class=\"headerlink\" title=\"函数祖先绑定\"></a>函数祖先绑定</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Function.prototype.addMethod = function(name,func)&#123;</div><div class=\"line\">    this[name] = func;</div><div class=\"line\">    //类式调用方法</div><div class=\"line\">    //this.prototype[name] = fn ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">let methons = function()&#123;&#125;;</div><div class=\"line\">or let methons = new Function();</div></pre></td></tr></table></figure>\n"},{"title":"js-pattern--s-享元模式","date":"2016-09-10T16:00:00.000Z","_content":"\n``优化性能``、``生成大量相似的对象``、\n\n### 如页面翻页的时候,只保留结构模板,而替换中间的数据\n\n```\n'use strict';\n/**\n * 享元元素\n */\nlet flyweightIphone = (function () {\n    let _model = Symbol(\"model\");\n    let _screen = Symbol(\"screen\");\n    let _memory = Symbol(\"memory\");\n    class iphone {\n        constructor(model, screen, memory) {\n            this[_model] = model;\n            this[_screen] = screen;\n            this[_memory] = memory;\n        }\n    }\n    return iphone;\n})();\n\n/**\n * 享元工厂\n * @type {{get}}\n */\nlet flyweightFactory = (function () {\n    var iphones = {};\n    return {\n        get: function (model, screen, memory) {\n            const key = model + screen + memory;\n            return iphones[key] || new flyweightIphone(model, screen, memory);\n        }\n    }\n})();\n\n/**\n * 享元类\n */\nlet iphone = (function () {\n    let _SN = Symbol(\"SN\");\n    let _flyweight = Symbol(\"flyweight\");\n\n    class iphone {\n        constructor(model, screen, memory, SN) {\n            this[_flyweight] = flyweightFactory.get(model, screen, memory, SN);\n            this[_SN] = SN;\n        }\n    }\n    return iphone;\n})();\n\n/**\n * 享元测试\n */\nlet for_iphone = function () {\n    var phones = [];\n    for (var i = 0; i < 100; i++) {\n        let memory = i % 2 == 0 ? 16 : 32;\n        phones.push(new iphone(\"iphone6s\", 5.0, memory, i));\n    }\n}\n\nfunction cal_fn_time(fn) {\n    var timebegin = (new Date()).getTime();\n    console.log(for_iphone);\n    fn();\n    var timeend = (new Date()).getTime();\n    return (timeend - timebegin)/1000 + \"s\";\n}\n\nconsole.log(cal_fn_time(for_iphone));\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//享元元素\n\n```\nfunction IphoneFlyweight(model, screen, memory) {\n    this.model = model;\n    this.screen = screen;\n    this.memory = memory;\n}\n```\n\n//享元工厂,生成共享的对象;生成字典保存并获取享元对象\n\n```\nvar flyweightFactory = (function () {\n    var iphones = {};\n    return {\n        get: function (model, screen, memory) {\n            var key = model + screen + memory;\n            if (!iphones[key]) {\n                iphones[key] = new IphoneFlyweight(model, screen, memory);\n            }\n            return iphones[key];\n        }\n    };\n})();\n\n```\n\n//关键在于除去了唯一的值之外,生成的共享元素并不多,可以直接获取\n\n```\n function Iphone(model, screen, memory, SN) {\n    this.flyweight = flyweightFactory.get(model, screen, memory);\n    this.SN = SN;\n}\n```\n\n//最终生成的数据\n\n```\nvar phones = [];\nfor (var i = 0; i < 1000000; i++) {\n    var memory = i % 2 == 0 ? 16 : 32;\n    phones.push(new Iphone(\"iphone6s\", 5.0, memory, i));\n}\nconsole.log(phones);\n```\n\n在DOM的应用是:事件委托也运用了享元模式的原理\n\n```\n(\".menu\").on(\"click\", \".item\", function () {\n    console.log($(this).text());\n})\n```\n\n","source":"_posts/Javascript-设计模式/js-pattern--s-享元模式.md","raw":"---\ntitle: js-pattern--s-享元模式\ndate: 2016-09-11\ncategories: \n- javascript\n---\n\n``优化性能``、``生成大量相似的对象``、\n\n### 如页面翻页的时候,只保留结构模板,而替换中间的数据\n\n```\n'use strict';\n/**\n * 享元元素\n */\nlet flyweightIphone = (function () {\n    let _model = Symbol(\"model\");\n    let _screen = Symbol(\"screen\");\n    let _memory = Symbol(\"memory\");\n    class iphone {\n        constructor(model, screen, memory) {\n            this[_model] = model;\n            this[_screen] = screen;\n            this[_memory] = memory;\n        }\n    }\n    return iphone;\n})();\n\n/**\n * 享元工厂\n * @type {{get}}\n */\nlet flyweightFactory = (function () {\n    var iphones = {};\n    return {\n        get: function (model, screen, memory) {\n            const key = model + screen + memory;\n            return iphones[key] || new flyweightIphone(model, screen, memory);\n        }\n    }\n})();\n\n/**\n * 享元类\n */\nlet iphone = (function () {\n    let _SN = Symbol(\"SN\");\n    let _flyweight = Symbol(\"flyweight\");\n\n    class iphone {\n        constructor(model, screen, memory, SN) {\n            this[_flyweight] = flyweightFactory.get(model, screen, memory, SN);\n            this[_SN] = SN;\n        }\n    }\n    return iphone;\n})();\n\n/**\n * 享元测试\n */\nlet for_iphone = function () {\n    var phones = [];\n    for (var i = 0; i < 100; i++) {\n        let memory = i % 2 == 0 ? 16 : 32;\n        phones.push(new iphone(\"iphone6s\", 5.0, memory, i));\n    }\n}\n\nfunction cal_fn_time(fn) {\n    var timebegin = (new Date()).getTime();\n    console.log(for_iphone);\n    fn();\n    var timeend = (new Date()).getTime();\n    return (timeend - timebegin)/1000 + \"s\";\n}\n\nconsole.log(cal_fn_time(for_iphone));\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//享元元素\n\n```\nfunction IphoneFlyweight(model, screen, memory) {\n    this.model = model;\n    this.screen = screen;\n    this.memory = memory;\n}\n```\n\n//享元工厂,生成共享的对象;生成字典保存并获取享元对象\n\n```\nvar flyweightFactory = (function () {\n    var iphones = {};\n    return {\n        get: function (model, screen, memory) {\n            var key = model + screen + memory;\n            if (!iphones[key]) {\n                iphones[key] = new IphoneFlyweight(model, screen, memory);\n            }\n            return iphones[key];\n        }\n    };\n})();\n\n```\n\n//关键在于除去了唯一的值之外,生成的共享元素并不多,可以直接获取\n\n```\n function Iphone(model, screen, memory, SN) {\n    this.flyweight = flyweightFactory.get(model, screen, memory);\n    this.SN = SN;\n}\n```\n\n//最终生成的数据\n\n```\nvar phones = [];\nfor (var i = 0; i < 1000000; i++) {\n    var memory = i % 2 == 0 ? 16 : 32;\n    phones.push(new Iphone(\"iphone6s\", 5.0, memory, i));\n}\nconsole.log(phones);\n```\n\n在DOM的应用是:事件委托也运用了享元模式的原理\n\n```\n(\".menu\").on(\"click\", \".item\", function () {\n    console.log($(this).text());\n})\n```\n\n","slug":"Javascript-设计模式/js-pattern--s-享元模式","published":1,"updated":"2017-02-06T02:51:16.000Z","_id":"ciytg4e560050s10o32ndjk32","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>优化性能</code>、<code>生成大量相似的对象</code>、</p>\n<h3 id=\"如页面翻页的时候-只保留结构模板-而替换中间的数据\"><a href=\"#如页面翻页的时候-只保留结构模板-而替换中间的数据\" class=\"headerlink\" title=\"如页面翻页的时候,只保留结构模板,而替换中间的数据\"></a>如页面翻页的时候,只保留结构模板,而替换中间的数据</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;;</div><div class=\"line\">/**</div><div class=\"line\"> * 享元元素</div><div class=\"line\"> */</div><div class=\"line\">let flyweightIphone = (function () &#123;</div><div class=\"line\">    let _model = Symbol(&quot;model&quot;);</div><div class=\"line\">    let _screen = Symbol(&quot;screen&quot;);</div><div class=\"line\">    let _memory = Symbol(&quot;memory&quot;);</div><div class=\"line\">    class iphone &#123;</div><div class=\"line\">        constructor(model, screen, memory) &#123;</div><div class=\"line\">            this[_model] = model;</div><div class=\"line\">            this[_screen] = screen;</div><div class=\"line\">            this[_memory] = memory;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return iphone;</div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 享元工厂</div><div class=\"line\"> * @type &#123;&#123;get&#125;&#125;</div><div class=\"line\"> */</div><div class=\"line\">let flyweightFactory = (function () &#123;</div><div class=\"line\">    var iphones = &#123;&#125;;</div><div class=\"line\">    return &#123;</div><div class=\"line\">        get: function (model, screen, memory) &#123;</div><div class=\"line\">            const key = model + screen + memory;</div><div class=\"line\">            return iphones[key] || new flyweightIphone(model, screen, memory);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 享元类</div><div class=\"line\"> */</div><div class=\"line\">let iphone = (function () &#123;</div><div class=\"line\">    let _SN = Symbol(&quot;SN&quot;);</div><div class=\"line\">    let _flyweight = Symbol(&quot;flyweight&quot;);</div><div class=\"line\"></div><div class=\"line\">    class iphone &#123;</div><div class=\"line\">        constructor(model, screen, memory, SN) &#123;</div><div class=\"line\">            this[_flyweight] = flyweightFactory.get(model, screen, memory, SN);</div><div class=\"line\">            this[_SN] = SN;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return iphone;</div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 享元测试</div><div class=\"line\"> */</div><div class=\"line\">let for_iphone = function () &#123;</div><div class=\"line\">    var phones = [];</div><div class=\"line\">    for (var i = 0; i &lt; 100; i++) &#123;</div><div class=\"line\">        let memory = i % 2 == 0 ? 16 : 32;</div><div class=\"line\">        phones.push(new iphone(&quot;iphone6s&quot;, 5.0, memory, i));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function cal_fn_time(fn) &#123;</div><div class=\"line\">    var timebegin = (new Date()).getTime();</div><div class=\"line\">    console.log(for_iphone);</div><div class=\"line\">    fn();</div><div class=\"line\">    var timeend = (new Date()).getTime();</div><div class=\"line\">    return (timeend - timebegin)/1000 + &quot;s&quot;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">console.log(cal_fn_time(for_iphone));</div></pre></td></tr></table></figure>\n<p>//享元元素</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">function IphoneFlyweight(model, screen, memory) &#123;</div><div class=\"line\">    this.model = model;</div><div class=\"line\">    this.screen = screen;</div><div class=\"line\">    this.memory = memory;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>//享元工厂,生成共享的对象;生成字典保存并获取享元对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var flyweightFactory = (function () &#123;</div><div class=\"line\">    var iphones = &#123;&#125;;</div><div class=\"line\">    return &#123;</div><div class=\"line\">        get: function (model, screen, memory) &#123;</div><div class=\"line\">            var key = model + screen + memory;</div><div class=\"line\">            if (!iphones[key]) &#123;</div><div class=\"line\">                iphones[key] = new IphoneFlyweight(model, screen, memory);</div><div class=\"line\">            &#125;</div><div class=\"line\">            return iphones[key];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<p>//关键在于除去了唯一的值之外,生成的共享元素并不多,可以直接获取</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"> function Iphone(model, screen, memory, SN) &#123;</div><div class=\"line\">    this.flyweight = flyweightFactory.get(model, screen, memory);</div><div class=\"line\">    this.SN = SN;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>//最终生成的数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var phones = [];</div><div class=\"line\">for (var i = 0; i &lt; 1000000; i++) &#123;</div><div class=\"line\">    var memory = i % 2 == 0 ? 16 : 32;</div><div class=\"line\">    phones.push(new Iphone(&quot;iphone6s&quot;, 5.0, memory, i));</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(phones);</div></pre></td></tr></table></figure>\n<p>在DOM的应用是:事件委托也运用了享元模式的原理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(&quot;.menu&quot;).on(&quot;click&quot;, &quot;.item&quot;, function () &#123;</div><div class=\"line\">    console.log($(this).text());</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p><code>优化性能</code>、<code>生成大量相似的对象</code>、</p>\n<h3 id=\"如页面翻页的时候-只保留结构模板-而替换中间的数据\"><a href=\"#如页面翻页的时候-只保留结构模板-而替换中间的数据\" class=\"headerlink\" title=\"如页面翻页的时候,只保留结构模板,而替换中间的数据\"></a>如页面翻页的时候,只保留结构模板,而替换中间的数据</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;;</div><div class=\"line\">/**</div><div class=\"line\"> * 享元元素</div><div class=\"line\"> */</div><div class=\"line\">let flyweightIphone = (function () &#123;</div><div class=\"line\">    let _model = Symbol(&quot;model&quot;);</div><div class=\"line\">    let _screen = Symbol(&quot;screen&quot;);</div><div class=\"line\">    let _memory = Symbol(&quot;memory&quot;);</div><div class=\"line\">    class iphone &#123;</div><div class=\"line\">        constructor(model, screen, memory) &#123;</div><div class=\"line\">            this[_model] = model;</div><div class=\"line\">            this[_screen] = screen;</div><div class=\"line\">            this[_memory] = memory;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return iphone;</div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 享元工厂</div><div class=\"line\"> * @type &#123;&#123;get&#125;&#125;</div><div class=\"line\"> */</div><div class=\"line\">let flyweightFactory = (function () &#123;</div><div class=\"line\">    var iphones = &#123;&#125;;</div><div class=\"line\">    return &#123;</div><div class=\"line\">        get: function (model, screen, memory) &#123;</div><div class=\"line\">            const key = model + screen + memory;</div><div class=\"line\">            return iphones[key] || new flyweightIphone(model, screen, memory);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 享元类</div><div class=\"line\"> */</div><div class=\"line\">let iphone = (function () &#123;</div><div class=\"line\">    let _SN = Symbol(&quot;SN&quot;);</div><div class=\"line\">    let _flyweight = Symbol(&quot;flyweight&quot;);</div><div class=\"line\"></div><div class=\"line\">    class iphone &#123;</div><div class=\"line\">        constructor(model, screen, memory, SN) &#123;</div><div class=\"line\">            this[_flyweight] = flyweightFactory.get(model, screen, memory, SN);</div><div class=\"line\">            this[_SN] = SN;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return iphone;</div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 享元测试</div><div class=\"line\"> */</div><div class=\"line\">let for_iphone = function () &#123;</div><div class=\"line\">    var phones = [];</div><div class=\"line\">    for (var i = 0; i &lt; 100; i++) &#123;</div><div class=\"line\">        let memory = i % 2 == 0 ? 16 : 32;</div><div class=\"line\">        phones.push(new iphone(&quot;iphone6s&quot;, 5.0, memory, i));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function cal_fn_time(fn) &#123;</div><div class=\"line\">    var timebegin = (new Date()).getTime();</div><div class=\"line\">    console.log(for_iphone);</div><div class=\"line\">    fn();</div><div class=\"line\">    var timeend = (new Date()).getTime();</div><div class=\"line\">    return (timeend - timebegin)/1000 + &quot;s&quot;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">console.log(cal_fn_time(for_iphone));</div></pre></td></tr></table></figure>\n<p>//享元元素</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">function IphoneFlyweight(model, screen, memory) &#123;</div><div class=\"line\">    this.model = model;</div><div class=\"line\">    this.screen = screen;</div><div class=\"line\">    this.memory = memory;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>//享元工厂,生成共享的对象;生成字典保存并获取享元对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var flyweightFactory = (function () &#123;</div><div class=\"line\">    var iphones = &#123;&#125;;</div><div class=\"line\">    return &#123;</div><div class=\"line\">        get: function (model, screen, memory) &#123;</div><div class=\"line\">            var key = model + screen + memory;</div><div class=\"line\">            if (!iphones[key]) &#123;</div><div class=\"line\">                iphones[key] = new IphoneFlyweight(model, screen, memory);</div><div class=\"line\">            &#125;</div><div class=\"line\">            return iphones[key];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<p>//关键在于除去了唯一的值之外,生成的共享元素并不多,可以直接获取</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"> function Iphone(model, screen, memory, SN) &#123;</div><div class=\"line\">    this.flyweight = flyweightFactory.get(model, screen, memory);</div><div class=\"line\">    this.SN = SN;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>//最终生成的数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var phones = [];</div><div class=\"line\">for (var i = 0; i &lt; 1000000; i++) &#123;</div><div class=\"line\">    var memory = i % 2 == 0 ? 16 : 32;</div><div class=\"line\">    phones.push(new Iphone(&quot;iphone6s&quot;, 5.0, memory, i));</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(phones);</div></pre></td></tr></table></figure>\n<p>在DOM的应用是:事件委托也运用了享元模式的原理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(&quot;.menu&quot;).on(&quot;click&quot;, &quot;.item&quot;, function () &#123;</div><div class=\"line\">    console.log($(this).text());</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n"},{"title":"js-pattern--h-状态模式","date":"2016-09-10T16:00:00.000Z","_content":"\n```\n'use strict';\n\nlet State = (function () {\n    class State {\n        constructor() {\n            /**\n             * 状态类\n             * @type {{}}\n             * @private\n             */\n            let that = this;\n\n            that._currState = {};\n            that.states = {\n                jump: function () {\n                    console.log(\"jump\")\n                },\n                move: function () {\n                    console.log(\"move\")\n                },\n                shoot: function () {\n                    console.log(\"shoot\")\n                },\n                squat: function () {\n                    console.log(\"squat\")\n                }\n            };\n            /**\n             * 创建组合类之动作控制类\n             * @type {{change, goes}}\n             */\n            let {change, goes} = (function () {\n                class action {\n                    constructor() {\n                        this.change = function () {\n                            //参数转成数组\n                            let arg = [].slice.call(arguments).sort();\n                            that._currState = {};\n                            if (arg.length) {\n                                for (var i in arg) {\n                                    that._currState[arg[i]] = true;\n                                }\n                            }\n                            return that;\n                        }\n\n                        this.goes = function () {\n                            console.log(\"触发一次动作\")\n                            for (var i  in that._currState) {\n                                that.states[i] && that.states[i]()\n                            }\n                            return that;\n                        }\n                    }\n\n                }\n                let _action = new action();\n                return {\n                    change: _action.change,\n                    goes: _action.goes\n                }\n            })();\n            this.change = change;\n            this.goes = goes;\n        }\n    }\n\n    return new State();\n})();\n\nconsole.log(State.change('jump', 'shoot').goes().goes().change(\"move\").goes());\n```\n","source":"_posts/Javascript-设计模式/js-pattern--h-状态模式.md","raw":"---\ntitle: js-pattern--h-状态模式\ndate: 2016-09-11\ncategories: \n- javascript\n---\n\n```\n'use strict';\n\nlet State = (function () {\n    class State {\n        constructor() {\n            /**\n             * 状态类\n             * @type {{}}\n             * @private\n             */\n            let that = this;\n\n            that._currState = {};\n            that.states = {\n                jump: function () {\n                    console.log(\"jump\")\n                },\n                move: function () {\n                    console.log(\"move\")\n                },\n                shoot: function () {\n                    console.log(\"shoot\")\n                },\n                squat: function () {\n                    console.log(\"squat\")\n                }\n            };\n            /**\n             * 创建组合类之动作控制类\n             * @type {{change, goes}}\n             */\n            let {change, goes} = (function () {\n                class action {\n                    constructor() {\n                        this.change = function () {\n                            //参数转成数组\n                            let arg = [].slice.call(arguments).sort();\n                            that._currState = {};\n                            if (arg.length) {\n                                for (var i in arg) {\n                                    that._currState[arg[i]] = true;\n                                }\n                            }\n                            return that;\n                        }\n\n                        this.goes = function () {\n                            console.log(\"触发一次动作\")\n                            for (var i  in that._currState) {\n                                that.states[i] && that.states[i]()\n                            }\n                            return that;\n                        }\n                    }\n\n                }\n                let _action = new action();\n                return {\n                    change: _action.change,\n                    goes: _action.goes\n                }\n            })();\n            this.change = change;\n            this.goes = goes;\n        }\n    }\n\n    return new State();\n})();\n\nconsole.log(State.change('jump', 'shoot').goes().goes().change(\"move\").goes());\n```\n","slug":"Javascript-设计模式/js-pattern--h-状态模式","published":1,"updated":"2017-02-06T02:51:43.000Z","_id":"ciytg4e570051s10ob2ct183i","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;;</div><div class=\"line\"></div><div class=\"line\">let State = (function () &#123;</div><div class=\"line\">    class State &#123;</div><div class=\"line\">        constructor() &#123;</div><div class=\"line\">            /**</div><div class=\"line\">             * 状态类</div><div class=\"line\">             * @type &#123;&#123;&#125;&#125;</div><div class=\"line\">             * @private</div><div class=\"line\">             */</div><div class=\"line\">            let that = this;</div><div class=\"line\"></div><div class=\"line\">            that._currState = &#123;&#125;;</div><div class=\"line\">            that.states = &#123;</div><div class=\"line\">                jump: function () &#123;</div><div class=\"line\">                    console.log(&quot;jump&quot;)</div><div class=\"line\">                &#125;,</div><div class=\"line\">                move: function () &#123;</div><div class=\"line\">                    console.log(&quot;move&quot;)</div><div class=\"line\">                &#125;,</div><div class=\"line\">                shoot: function () &#123;</div><div class=\"line\">                    console.log(&quot;shoot&quot;)</div><div class=\"line\">                &#125;,</div><div class=\"line\">                squat: function () &#123;</div><div class=\"line\">                    console.log(&quot;squat&quot;)</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;;</div><div class=\"line\">            /**</div><div class=\"line\">             * 创建组合类之动作控制类</div><div class=\"line\">             * @type &#123;&#123;change, goes&#125;&#125;</div><div class=\"line\">             */</div><div class=\"line\">            let &#123;change, goes&#125; = (function () &#123;</div><div class=\"line\">                class action &#123;</div><div class=\"line\">                    constructor() &#123;</div><div class=\"line\">                        this.change = function () &#123;</div><div class=\"line\">                            //参数转成数组</div><div class=\"line\">                            let arg = [].slice.call(arguments).sort();</div><div class=\"line\">                            that._currState = &#123;&#125;;</div><div class=\"line\">                            if (arg.length) &#123;</div><div class=\"line\">                                for (var i in arg) &#123;</div><div class=\"line\">                                    that._currState[arg[i]] = true;</div><div class=\"line\">                                &#125;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                            return that;</div><div class=\"line\">                        &#125;</div><div class=\"line\"></div><div class=\"line\">                        this.goes = function () &#123;</div><div class=\"line\">                            console.log(&quot;触发一次动作&quot;)</div><div class=\"line\">                            for (var i  in that._currState) &#123;</div><div class=\"line\">                                that.states[i] &amp;&amp; that.states[i]()</div><div class=\"line\">                            &#125;</div><div class=\"line\">                            return that;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\">                let _action = new action();</div><div class=\"line\">                return &#123;</div><div class=\"line\">                    change: _action.change,</div><div class=\"line\">                    goes: _action.goes</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;)();</div><div class=\"line\">            this.change = change;</div><div class=\"line\">            this.goes = goes;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return new State();</div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\">console.log(State.change(&apos;jump&apos;, &apos;shoot&apos;).goes().goes().change(&quot;move&quot;).goes());</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;;</div><div class=\"line\"></div><div class=\"line\">let State = (function () &#123;</div><div class=\"line\">    class State &#123;</div><div class=\"line\">        constructor() &#123;</div><div class=\"line\">            /**</div><div class=\"line\">             * 状态类</div><div class=\"line\">             * @type &#123;&#123;&#125;&#125;</div><div class=\"line\">             * @private</div><div class=\"line\">             */</div><div class=\"line\">            let that = this;</div><div class=\"line\"></div><div class=\"line\">            that._currState = &#123;&#125;;</div><div class=\"line\">            that.states = &#123;</div><div class=\"line\">                jump: function () &#123;</div><div class=\"line\">                    console.log(&quot;jump&quot;)</div><div class=\"line\">                &#125;,</div><div class=\"line\">                move: function () &#123;</div><div class=\"line\">                    console.log(&quot;move&quot;)</div><div class=\"line\">                &#125;,</div><div class=\"line\">                shoot: function () &#123;</div><div class=\"line\">                    console.log(&quot;shoot&quot;)</div><div class=\"line\">                &#125;,</div><div class=\"line\">                squat: function () &#123;</div><div class=\"line\">                    console.log(&quot;squat&quot;)</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;;</div><div class=\"line\">            /**</div><div class=\"line\">             * 创建组合类之动作控制类</div><div class=\"line\">             * @type &#123;&#123;change, goes&#125;&#125;</div><div class=\"line\">             */</div><div class=\"line\">            let &#123;change, goes&#125; = (function () &#123;</div><div class=\"line\">                class action &#123;</div><div class=\"line\">                    constructor() &#123;</div><div class=\"line\">                        this.change = function () &#123;</div><div class=\"line\">                            //参数转成数组</div><div class=\"line\">                            let arg = [].slice.call(arguments).sort();</div><div class=\"line\">                            that._currState = &#123;&#125;;</div><div class=\"line\">                            if (arg.length) &#123;</div><div class=\"line\">                                for (var i in arg) &#123;</div><div class=\"line\">                                    that._currState[arg[i]] = true;</div><div class=\"line\">                                &#125;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                            return that;</div><div class=\"line\">                        &#125;</div><div class=\"line\"></div><div class=\"line\">                        this.goes = function () &#123;</div><div class=\"line\">                            console.log(&quot;触发一次动作&quot;)</div><div class=\"line\">                            for (var i  in that._currState) &#123;</div><div class=\"line\">                                that.states[i] &amp;&amp; that.states[i]()</div><div class=\"line\">                            &#125;</div><div class=\"line\">                            return that;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\">                let _action = new action();</div><div class=\"line\">                return &#123;</div><div class=\"line\">                    change: _action.change,</div><div class=\"line\">                    goes: _action.goes</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;)();</div><div class=\"line\">            this.change = change;</div><div class=\"line\">            this.goes = goes;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return new State();</div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\">console.log(State.change(&apos;jump&apos;, &apos;shoot&apos;).goes().goes().change(&quot;move&quot;).goes());</div></pre></td></tr></table></figure>\n"},{"title":"mongodb-find&sort","date":"2016-09-10T16:00:00.000Z","_content":"\n> 查询指定的键\n\ndb.集合名称.find({查询条件},{指定键}) \n指定键：1表示显示，0表示不显示，_id默认显示\n\n```\n> db.student.find({},{name:1})\n{ \"_id\" : 1, \"name\" : \"zhangsan\" }\n{ \"_id\" : 2, \"name\" : \"lisi\" }\n{ \"_id\" : 3, \"name\" : \"wangwu\" }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\" }\n{ \"_id\" : 5, \"name\" : \"qianliu\" }\n{ \"_id\" : 6, \"name\" : \"sunba\" }\n> db.student.find({},{_id:0, age:0})\n{ \"name\" : \"zhangsan\", \"sex\" : 1 }\n{ \"name\" : \"lisi\" }\n{ \"name\" : \"wangwu\" }\n{ \"name\" : \"zhaoliu\" }\n{ \"name\" : \"qianliu\" }\n{ \"name\" : \"sunba\" }\n> db.student.find({},{_id:0, name:1})\n{ \"name\" : \"zhangsan\" }\n{ \"name\" : \"lisi\" }\n{ \"name\" : \"wangwu\" }\n{ \"name\" : \"zhaoliu\" }\n{ \"name\" : \"qianliu\" }\n{ \"name\" : \"sunba\" }\n```\n\n> db.集合名称.findOne({查询条件},{指定键}) \n\n查询出符合条件的第一条数据\n\n```\n> db.student.findOne()\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 27, \"sex\" : 1 }\ndb.集合名称.find({查询条件},{指定键}).limit(数字)查询前几条数据\n\n> db.student.find().limit(3)\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 27, \"sex\" : 1 }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\ndb.集合名称.find({查询条件},{指定键}).skip(数字)跳过前几条数据\n\n> db.student.find().skip(2)\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n{ \"_id\" : 7, \"name\" : 7, \"age\" : 70 }\n\n```\n\n>可以使用limit()和skip()实现分页\n\n```\n> db.student.find().skip(0).limit(3)\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 27, \"sex\" : 1 }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n> db.student.find().skip(3).limit(3)\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n> db.student.find().skip(6).limit(3)\n{ \"_id\" : 7, \"name\" : 7, \"age\" : 70 }\n```\n\n\n> db.集合名称.find().sort({键:数字})数字为1表示升序，数字为2表示降序\n\n> db.student.find().sort({age:1})\n\n```\n\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 27, \"sex\" : 1 }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 7, \"name\" : 7, \"age\" : 70 }\n```\n\n> db.student.find().sort({age:1, _id:-1})\n\n```\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 27, \"sex\" : 1 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 7, \"name\" : 7, \"age\" : 70 }\n```\n\n\n\n\n\n\n\n\n\n","source":"_posts/mongodb/mongodb-find&sort.md","raw":"---\ntitle: mongodb-find&sort\ndate: 2016-09-11\ncategories: \n- mongodb\n---\n\n> 查询指定的键\n\ndb.集合名称.find({查询条件},{指定键}) \n指定键：1表示显示，0表示不显示，_id默认显示\n\n```\n> db.student.find({},{name:1})\n{ \"_id\" : 1, \"name\" : \"zhangsan\" }\n{ \"_id\" : 2, \"name\" : \"lisi\" }\n{ \"_id\" : 3, \"name\" : \"wangwu\" }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\" }\n{ \"_id\" : 5, \"name\" : \"qianliu\" }\n{ \"_id\" : 6, \"name\" : \"sunba\" }\n> db.student.find({},{_id:0, age:0})\n{ \"name\" : \"zhangsan\", \"sex\" : 1 }\n{ \"name\" : \"lisi\" }\n{ \"name\" : \"wangwu\" }\n{ \"name\" : \"zhaoliu\" }\n{ \"name\" : \"qianliu\" }\n{ \"name\" : \"sunba\" }\n> db.student.find({},{_id:0, name:1})\n{ \"name\" : \"zhangsan\" }\n{ \"name\" : \"lisi\" }\n{ \"name\" : \"wangwu\" }\n{ \"name\" : \"zhaoliu\" }\n{ \"name\" : \"qianliu\" }\n{ \"name\" : \"sunba\" }\n```\n\n> db.集合名称.findOne({查询条件},{指定键}) \n\n查询出符合条件的第一条数据\n\n```\n> db.student.findOne()\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 27, \"sex\" : 1 }\ndb.集合名称.find({查询条件},{指定键}).limit(数字)查询前几条数据\n\n> db.student.find().limit(3)\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 27, \"sex\" : 1 }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\ndb.集合名称.find({查询条件},{指定键}).skip(数字)跳过前几条数据\n\n> db.student.find().skip(2)\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n{ \"_id\" : 7, \"name\" : 7, \"age\" : 70 }\n\n```\n\n>可以使用limit()和skip()实现分页\n\n```\n> db.student.find().skip(0).limit(3)\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 27, \"sex\" : 1 }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n> db.student.find().skip(3).limit(3)\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n> db.student.find().skip(6).limit(3)\n{ \"_id\" : 7, \"name\" : 7, \"age\" : 70 }\n```\n\n\n> db.集合名称.find().sort({键:数字})数字为1表示升序，数字为2表示降序\n\n> db.student.find().sort({age:1})\n\n```\n\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 27, \"sex\" : 1 }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 7, \"name\" : 7, \"age\" : 70 }\n```\n\n> db.student.find().sort({age:1, _id:-1})\n\n```\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 27, \"sex\" : 1 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 7, \"name\" : 7, \"age\" : 70 }\n```\n\n\n\n\n\n\n\n\n\n","slug":"mongodb/mongodb-find&sort","published":1,"updated":"2017-02-06T03:14:28.000Z","_id":"ciytg4h1a0052s10o2hsbkp0m","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>查询指定的键</p>\n</blockquote>\n<p>db.集合名称.find({查询条件},{指定键})<br>指定键：1表示显示，0表示不显示，_id默认显示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; db.student.find(&#123;&#125;,&#123;name:1&#125;)</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot; &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot; &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot; &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot; &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot; &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot; &#125;</div><div class=\"line\">&gt; db.student.find(&#123;&#125;,&#123;_id:0, age:0&#125;)</div><div class=\"line\">&#123; &quot;name&quot; : &quot;zhangsan&quot;, &quot;sex&quot; : 1 &#125;</div><div class=\"line\">&#123; &quot;name&quot; : &quot;lisi&quot; &#125;</div><div class=\"line\">&#123; &quot;name&quot; : &quot;wangwu&quot; &#125;</div><div class=\"line\">&#123; &quot;name&quot; : &quot;zhaoliu&quot; &#125;</div><div class=\"line\">&#123; &quot;name&quot; : &quot;qianliu&quot; &#125;</div><div class=\"line\">&#123; &quot;name&quot; : &quot;sunba&quot; &#125;</div><div class=\"line\">&gt; db.student.find(&#123;&#125;,&#123;_id:0, name:1&#125;)</div><div class=\"line\">&#123; &quot;name&quot; : &quot;zhangsan&quot; &#125;</div><div class=\"line\">&#123; &quot;name&quot; : &quot;lisi&quot; &#125;</div><div class=\"line\">&#123; &quot;name&quot; : &quot;wangwu&quot; &#125;</div><div class=\"line\">&#123; &quot;name&quot; : &quot;zhaoliu&quot; &#125;</div><div class=\"line\">&#123; &quot;name&quot; : &quot;qianliu&quot; &#125;</div><div class=\"line\">&#123; &quot;name&quot; : &quot;sunba&quot; &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>db.集合名称.findOne({查询条件},{指定键}) </p>\n</blockquote>\n<p>查询出符合条件的第一条数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; db.student.findOne()</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 27, &quot;sex&quot; : 1 &#125;</div><div class=\"line\">db.集合名称.find(&#123;查询条件&#125;,&#123;指定键&#125;).limit(数字)查询前几条数据</div><div class=\"line\"></div><div class=\"line\">&gt; db.student.find().limit(3)</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 27, &quot;sex&quot; : 1 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">db.集合名称.find(&#123;查询条件&#125;,&#123;指定键&#125;).skip(数字)跳过前几条数据</div><div class=\"line\"></div><div class=\"line\">&gt; db.student.find().skip(2)</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 7, &quot;name&quot; : 7, &quot;age&quot; : 70 &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>可以使用limit()和skip()实现分页</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; db.student.find().skip(0).limit(3)</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 27, &quot;sex&quot; : 1 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&gt; db.student.find().skip(3).limit(3)</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div><div class=\"line\">&gt; db.student.find().skip(6).limit(3)</div><div class=\"line\">&#123; &quot;_id&quot; : 7, &quot;name&quot; : 7, &quot;age&quot; : 70 &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>db.集合名称.find().sort({键:数字})数字为1表示升序，数字为2表示降序</p>\n<p>db.student.find().sort({age:1})</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 27, &quot;sex&quot; : 1 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 7, &quot;name&quot; : 7, &quot;age&quot; : 70 &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>db.student.find().sort({age:1, _id:-1})</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 27, &quot;sex&quot; : 1 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 7, &quot;name&quot; : 7, &quot;age&quot; : 70 &#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>查询指定的键</p>\n</blockquote>\n<p>db.集合名称.find({查询条件},{指定键})<br>指定键：1表示显示，0表示不显示，_id默认显示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; db.student.find(&#123;&#125;,&#123;name:1&#125;)</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot; &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot; &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot; &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot; &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot; &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot; &#125;</div><div class=\"line\">&gt; db.student.find(&#123;&#125;,&#123;_id:0, age:0&#125;)</div><div class=\"line\">&#123; &quot;name&quot; : &quot;zhangsan&quot;, &quot;sex&quot; : 1 &#125;</div><div class=\"line\">&#123; &quot;name&quot; : &quot;lisi&quot; &#125;</div><div class=\"line\">&#123; &quot;name&quot; : &quot;wangwu&quot; &#125;</div><div class=\"line\">&#123; &quot;name&quot; : &quot;zhaoliu&quot; &#125;</div><div class=\"line\">&#123; &quot;name&quot; : &quot;qianliu&quot; &#125;</div><div class=\"line\">&#123; &quot;name&quot; : &quot;sunba&quot; &#125;</div><div class=\"line\">&gt; db.student.find(&#123;&#125;,&#123;_id:0, name:1&#125;)</div><div class=\"line\">&#123; &quot;name&quot; : &quot;zhangsan&quot; &#125;</div><div class=\"line\">&#123; &quot;name&quot; : &quot;lisi&quot; &#125;</div><div class=\"line\">&#123; &quot;name&quot; : &quot;wangwu&quot; &#125;</div><div class=\"line\">&#123; &quot;name&quot; : &quot;zhaoliu&quot; &#125;</div><div class=\"line\">&#123; &quot;name&quot; : &quot;qianliu&quot; &#125;</div><div class=\"line\">&#123; &quot;name&quot; : &quot;sunba&quot; &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>db.集合名称.findOne({查询条件},{指定键}) </p>\n</blockquote>\n<p>查询出符合条件的第一条数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; db.student.findOne()</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 27, &quot;sex&quot; : 1 &#125;</div><div class=\"line\">db.集合名称.find(&#123;查询条件&#125;,&#123;指定键&#125;).limit(数字)查询前几条数据</div><div class=\"line\"></div><div class=\"line\">&gt; db.student.find().limit(3)</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 27, &quot;sex&quot; : 1 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">db.集合名称.find(&#123;查询条件&#125;,&#123;指定键&#125;).skip(数字)跳过前几条数据</div><div class=\"line\"></div><div class=\"line\">&gt; db.student.find().skip(2)</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 7, &quot;name&quot; : 7, &quot;age&quot; : 70 &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>可以使用limit()和skip()实现分页</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; db.student.find().skip(0).limit(3)</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 27, &quot;sex&quot; : 1 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&gt; db.student.find().skip(3).limit(3)</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div><div class=\"line\">&gt; db.student.find().skip(6).limit(3)</div><div class=\"line\">&#123; &quot;_id&quot; : 7, &quot;name&quot; : 7, &quot;age&quot; : 70 &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>db.集合名称.find().sort({键:数字})数字为1表示升序，数字为2表示降序</p>\n<p>db.student.find().sort({age:1})</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 27, &quot;sex&quot; : 1 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 7, &quot;name&quot; : 7, &quot;age&quot; : 70 &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>db.student.find().sort({age:1, _id:-1})</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 27, &quot;sex&quot; : 1 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 7, &quot;name&quot; : 7, &quot;age&quot; : 70 &#125;</div></pre></td></tr></table></figure>\n"},{"title":"mongodb-remove","date":"2016-09-10T16:00:00.000Z","_content":"\n> db.集合名称.remove({query}, justOne)\n> query：过滤条件，可选\n> justOne：是否只删除查询到的第一条数据，值为true或者1时，只删除一条数据，默认为false，可选。\n\n> 删除第一条\n\n```\n> db.student.remove({age:28}, true)\nWriteResult({ \"nRemoved\" : 1 })\n> db.student.find()\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 28 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n{ \"_id\" : 7, \"name\" : \"songjiu\", \"skill\" : [ \"mongodb\", \"java\" ] }\n```\n\n> 删除所有的数据\n\n```\n> db.student.remove({age:28})\nWriteResult({ \"nRemoved\" : 2 })\n> db.student.find()\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n{ \"_id\" : 7, \"name\" : \"songjiu\", \"skill\" : [ \"mongodb\", \"java\" ] }\n```\n\n> 删除集合所有{}\n\n```\n> db.student.remove({})\nWriteResult({ \"nRemoved\" : 4 })\n```\n\n\n\n\n\n\n","source":"_posts/mongodb/mongodb-remove.md","raw":"---\ntitle: mongodb-remove\ndate: 2016-09-11\ncategories: \n- mongodb\n---\n\n> db.集合名称.remove({query}, justOne)\n> query：过滤条件，可选\n> justOne：是否只删除查询到的第一条数据，值为true或者1时，只删除一条数据，默认为false，可选。\n\n> 删除第一条\n\n```\n> db.student.remove({age:28}, true)\nWriteResult({ \"nRemoved\" : 1 })\n> db.student.find()\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 28 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n{ \"_id\" : 7, \"name\" : \"songjiu\", \"skill\" : [ \"mongodb\", \"java\" ] }\n```\n\n> 删除所有的数据\n\n```\n> db.student.remove({age:28})\nWriteResult({ \"nRemoved\" : 2 })\n> db.student.find()\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n{ \"_id\" : 7, \"name\" : \"songjiu\", \"skill\" : [ \"mongodb\", \"java\" ] }\n```\n\n> 删除集合所有{}\n\n```\n> db.student.remove({})\nWriteResult({ \"nRemoved\" : 4 })\n```\n\n\n\n\n\n\n","slug":"mongodb/mongodb-remove","published":1,"updated":"2017-02-06T02:53:22.000Z","_id":"ciytg4h1b0053s10of44dplsf","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>db.集合名称.remove({query}, justOne)<br>query：过滤条件，可选<br>justOne：是否只删除查询到的第一条数据，值为true或者1时，只删除一条数据，默认为false，可选。</p>\n<p>删除第一条</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; db.student.remove(&#123;age:28&#125;, true)</div><div class=\"line\">WriteResult(&#123; &quot;nRemoved&quot; : 1 &#125;)</div><div class=\"line\">&gt; db.student.find()</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 7, &quot;name&quot; : &quot;songjiu&quot;, &quot;skill&quot; : [ &quot;mongodb&quot;, &quot;java&quot; ] &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>删除所有的数据</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; db.student.remove(&#123;age:28&#125;)</div><div class=\"line\">WriteResult(&#123; &quot;nRemoved&quot; : 2 &#125;)</div><div class=\"line\">&gt; db.student.find()</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 7, &quot;name&quot; : &quot;songjiu&quot;, &quot;skill&quot; : [ &quot;mongodb&quot;, &quot;java&quot; ] &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>删除集合所有{}</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; db.student.remove(&#123;&#125;)</div><div class=\"line\">WriteResult(&#123; &quot;nRemoved&quot; : 4 &#125;)</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>db.集合名称.remove({query}, justOne)<br>query：过滤条件，可选<br>justOne：是否只删除查询到的第一条数据，值为true或者1时，只删除一条数据，默认为false，可选。</p>\n<p>删除第一条</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; db.student.remove(&#123;age:28&#125;, true)</div><div class=\"line\">WriteResult(&#123; &quot;nRemoved&quot; : 1 &#125;)</div><div class=\"line\">&gt; db.student.find()</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 7, &quot;name&quot; : &quot;songjiu&quot;, &quot;skill&quot; : [ &quot;mongodb&quot;, &quot;java&quot; ] &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>删除所有的数据</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; db.student.remove(&#123;age:28&#125;)</div><div class=\"line\">WriteResult(&#123; &quot;nRemoved&quot; : 2 &#125;)</div><div class=\"line\">&gt; db.student.find()</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 7, &quot;name&quot; : &quot;songjiu&quot;, &quot;skill&quot; : [ &quot;mongodb&quot;, &quot;java&quot; ] &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>删除集合所有{}</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; db.student.remove(&#123;&#125;)</div><div class=\"line\">WriteResult(&#123; &quot;nRemoved&quot; : 4 &#125;)</div></pre></td></tr></table></figure>\n"},{"title":"mongodb-insert&save","date":"2016-09-10T16:00:00.000Z","_content":"\n> 拥有两种方法\n> 一旦数据中包含_id,insert不插入相同的值,save则更新数据\n\n```\n> db.student.insert({\"_id\": 1, \"name\":\"zhangsan\", \"age\": 28})\nWriteResult({ \"nInserted\" : 1 })\n> db.student.find()\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 28 }\n> db.student.insert({\"_id\": 1, \"name\":\"zhangsan\", \"age\": 27})\nWriteResult({\n        \"nInserted\" : 0,\n        \"writeError\" : {\n                \"code\" : 11000,\n                \"errmsg\" : \"E11000 duplicate key error collection: zyhdb.student index: _id_ dup key: { : 1.0 }\"\n        }\n})\n> db.student.find()\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 28 }\n> db.student.save({\"_id\": 1, \"name\":\"zhangsan\", \"age\": 27})\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.student.find()\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 27 }\n```\n\n> 批量插入\n\n```\n> db.student.insert([{\"_id\": 2, \"name\": \"lisi\"},{\"_id\": 3, \"name\": \"wangwu\"}, {\"_id\": 4, \"name\": \"zhaoliu\", \"age\": 28}])\nBulkWriteResult({\n\"writeErrors\" : [ ],\n\"writeConcernErrors\" : [ ],\n\"nInserted\" : 3,\n\"nUpserted\" : 0,\n\"nMatched\" : 0,\n\"nModified\" : 0,\n\"nRemoved\" : 0,\n\"upserted\" : [ ]\n})\n> db.student.find()\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 27 }\n{ \"_id\" : 2, \"name\" : \"lisi\" }\n{ \"_id\" : 3, \"name\" : \"wangwu\" }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n```\n\n> 循环插入\n\n```\n> for(var i=0; i<10; i++){db.fortest.insert({num: i})}\nWriteResult({ \"nInserted\" : 1 })\n> db.fortest.find()\n{ \"_id\" : ObjectId(\"57469e80142cea1d9aeabab5\"), \"num\" : 0 }\n{ \"_id\" : ObjectId(\"57469e80142cea1d9aeabab6\"), \"num\" : 1 }\n{ \"_id\" : ObjectId(\"57469e80142cea1d9aeabab7\"), \"num\" : 2 }\n{ \"_id\" : ObjectId(\"57469e80142cea1d9aeabab8\"), \"num\" : 3 }\n{ \"_id\" : ObjectId(\"57469e80142cea1d9aeabab9\"), \"num\" : 4 }\n{ \"_id\" : ObjectId(\"57469e80142cea1d9aeababa\"), \"num\" : 5 }\n{ \"_id\" : ObjectId(\"57469e80142cea1d9aeababb\"), \"num\" : 6 }\n{ \"_id\" : ObjectId(\"57469e80142cea1d9aeababc\"), \"num\" : 7 }\n{ \"_id\" : ObjectId(\"57469e80142cea1d9aeababd\"), \"num\" : 8 }\n{ \"_id\" : ObjectId(\"57469e80142cea1d9aeababe\"), \"num\" : 9 }\n```\n","source":"_posts/mongodb/mongodb-insert&save.md","raw":"---\ntitle: mongodb-insert&save\ndate: 2016-09-11\ncategories: \n- mongodb\n---\n\n> 拥有两种方法\n> 一旦数据中包含_id,insert不插入相同的值,save则更新数据\n\n```\n> db.student.insert({\"_id\": 1, \"name\":\"zhangsan\", \"age\": 28})\nWriteResult({ \"nInserted\" : 1 })\n> db.student.find()\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 28 }\n> db.student.insert({\"_id\": 1, \"name\":\"zhangsan\", \"age\": 27})\nWriteResult({\n        \"nInserted\" : 0,\n        \"writeError\" : {\n                \"code\" : 11000,\n                \"errmsg\" : \"E11000 duplicate key error collection: zyhdb.student index: _id_ dup key: { : 1.0 }\"\n        }\n})\n> db.student.find()\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 28 }\n> db.student.save({\"_id\": 1, \"name\":\"zhangsan\", \"age\": 27})\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.student.find()\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 27 }\n```\n\n> 批量插入\n\n```\n> db.student.insert([{\"_id\": 2, \"name\": \"lisi\"},{\"_id\": 3, \"name\": \"wangwu\"}, {\"_id\": 4, \"name\": \"zhaoliu\", \"age\": 28}])\nBulkWriteResult({\n\"writeErrors\" : [ ],\n\"writeConcernErrors\" : [ ],\n\"nInserted\" : 3,\n\"nUpserted\" : 0,\n\"nMatched\" : 0,\n\"nModified\" : 0,\n\"nRemoved\" : 0,\n\"upserted\" : [ ]\n})\n> db.student.find()\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 27 }\n{ \"_id\" : 2, \"name\" : \"lisi\" }\n{ \"_id\" : 3, \"name\" : \"wangwu\" }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n```\n\n> 循环插入\n\n```\n> for(var i=0; i<10; i++){db.fortest.insert({num: i})}\nWriteResult({ \"nInserted\" : 1 })\n> db.fortest.find()\n{ \"_id\" : ObjectId(\"57469e80142cea1d9aeabab5\"), \"num\" : 0 }\n{ \"_id\" : ObjectId(\"57469e80142cea1d9aeabab6\"), \"num\" : 1 }\n{ \"_id\" : ObjectId(\"57469e80142cea1d9aeabab7\"), \"num\" : 2 }\n{ \"_id\" : ObjectId(\"57469e80142cea1d9aeabab8\"), \"num\" : 3 }\n{ \"_id\" : ObjectId(\"57469e80142cea1d9aeabab9\"), \"num\" : 4 }\n{ \"_id\" : ObjectId(\"57469e80142cea1d9aeababa\"), \"num\" : 5 }\n{ \"_id\" : ObjectId(\"57469e80142cea1d9aeababb\"), \"num\" : 6 }\n{ \"_id\" : ObjectId(\"57469e80142cea1d9aeababc\"), \"num\" : 7 }\n{ \"_id\" : ObjectId(\"57469e80142cea1d9aeababd\"), \"num\" : 8 }\n{ \"_id\" : ObjectId(\"57469e80142cea1d9aeababe\"), \"num\" : 9 }\n```\n","slug":"mongodb/mongodb-insert&save","published":1,"updated":"2017-02-06T02:53:27.000Z","_id":"ciytg4h1c0054s10orlvjrhdh","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>拥有两种方法<br>一旦数据中包含_id,insert不插入相同的值,save则更新数据</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; db.student.insert(&#123;&quot;_id&quot;: 1, &quot;name&quot;:&quot;zhangsan&quot;, &quot;age&quot;: 28&#125;)</div><div class=\"line\">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</div><div class=\"line\">&gt; db.student.find()</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&gt; db.student.insert(&#123;&quot;_id&quot;: 1, &quot;name&quot;:&quot;zhangsan&quot;, &quot;age&quot;: 27&#125;)</div><div class=\"line\">WriteResult(&#123;</div><div class=\"line\">        &quot;nInserted&quot; : 0,</div><div class=\"line\">        &quot;writeError&quot; : &#123;</div><div class=\"line\">                &quot;code&quot; : 11000,</div><div class=\"line\">                &quot;errmsg&quot; : &quot;E11000 duplicate key error collection: zyhdb.student index: _id_ dup key: &#123; : 1.0 &#125;&quot;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">&gt; db.student.find()</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&gt; db.student.save(&#123;&quot;_id&quot;: 1, &quot;name&quot;:&quot;zhangsan&quot;, &quot;age&quot;: 27&#125;)</div><div class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</div><div class=\"line\">&gt; db.student.find()</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 27 &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>批量插入</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; db.student.insert([&#123;&quot;_id&quot;: 2, &quot;name&quot;: &quot;lisi&quot;&#125;,&#123;&quot;_id&quot;: 3, &quot;name&quot;: &quot;wangwu&quot;&#125;, &#123;&quot;_id&quot;: 4, &quot;name&quot;: &quot;zhaoliu&quot;, &quot;age&quot;: 28&#125;])</div><div class=\"line\">BulkWriteResult(&#123;</div><div class=\"line\">&quot;writeErrors&quot; : [ ],</div><div class=\"line\">&quot;writeConcernErrors&quot; : [ ],</div><div class=\"line\">&quot;nInserted&quot; : 3,</div><div class=\"line\">&quot;nUpserted&quot; : 0,</div><div class=\"line\">&quot;nMatched&quot; : 0,</div><div class=\"line\">&quot;nModified&quot; : 0,</div><div class=\"line\">&quot;nRemoved&quot; : 0,</div><div class=\"line\">&quot;upserted&quot; : [ ]</div><div class=\"line\">&#125;)</div><div class=\"line\">&gt; db.student.find()</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot; &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot; &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>循环插入</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; for(var i=0; i&lt;10; i++)&#123;db.fortest.insert(&#123;num: i&#125;)&#125;</div><div class=\"line\">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</div><div class=\"line\">&gt; db.fortest.find()</div><div class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;57469e80142cea1d9aeabab5&quot;), &quot;num&quot; : 0 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;57469e80142cea1d9aeabab6&quot;), &quot;num&quot; : 1 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;57469e80142cea1d9aeabab7&quot;), &quot;num&quot; : 2 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;57469e80142cea1d9aeabab8&quot;), &quot;num&quot; : 3 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;57469e80142cea1d9aeabab9&quot;), &quot;num&quot; : 4 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;57469e80142cea1d9aeababa&quot;), &quot;num&quot; : 5 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;57469e80142cea1d9aeababb&quot;), &quot;num&quot; : 6 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;57469e80142cea1d9aeababc&quot;), &quot;num&quot; : 7 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;57469e80142cea1d9aeababd&quot;), &quot;num&quot; : 8 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;57469e80142cea1d9aeababe&quot;), &quot;num&quot; : 9 &#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>拥有两种方法<br>一旦数据中包含_id,insert不插入相同的值,save则更新数据</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; db.student.insert(&#123;&quot;_id&quot;: 1, &quot;name&quot;:&quot;zhangsan&quot;, &quot;age&quot;: 28&#125;)</div><div class=\"line\">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</div><div class=\"line\">&gt; db.student.find()</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&gt; db.student.insert(&#123;&quot;_id&quot;: 1, &quot;name&quot;:&quot;zhangsan&quot;, &quot;age&quot;: 27&#125;)</div><div class=\"line\">WriteResult(&#123;</div><div class=\"line\">        &quot;nInserted&quot; : 0,</div><div class=\"line\">        &quot;writeError&quot; : &#123;</div><div class=\"line\">                &quot;code&quot; : 11000,</div><div class=\"line\">                &quot;errmsg&quot; : &quot;E11000 duplicate key error collection: zyhdb.student index: _id_ dup key: &#123; : 1.0 &#125;&quot;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">&gt; db.student.find()</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&gt; db.student.save(&#123;&quot;_id&quot;: 1, &quot;name&quot;:&quot;zhangsan&quot;, &quot;age&quot;: 27&#125;)</div><div class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</div><div class=\"line\">&gt; db.student.find()</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 27 &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>批量插入</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; db.student.insert([&#123;&quot;_id&quot;: 2, &quot;name&quot;: &quot;lisi&quot;&#125;,&#123;&quot;_id&quot;: 3, &quot;name&quot;: &quot;wangwu&quot;&#125;, &#123;&quot;_id&quot;: 4, &quot;name&quot;: &quot;zhaoliu&quot;, &quot;age&quot;: 28&#125;])</div><div class=\"line\">BulkWriteResult(&#123;</div><div class=\"line\">&quot;writeErrors&quot; : [ ],</div><div class=\"line\">&quot;writeConcernErrors&quot; : [ ],</div><div class=\"line\">&quot;nInserted&quot; : 3,</div><div class=\"line\">&quot;nUpserted&quot; : 0,</div><div class=\"line\">&quot;nMatched&quot; : 0,</div><div class=\"line\">&quot;nModified&quot; : 0,</div><div class=\"line\">&quot;nRemoved&quot; : 0,</div><div class=\"line\">&quot;upserted&quot; : [ ]</div><div class=\"line\">&#125;)</div><div class=\"line\">&gt; db.student.find()</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot; &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot; &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>循环插入</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; for(var i=0; i&lt;10; i++)&#123;db.fortest.insert(&#123;num: i&#125;)&#125;</div><div class=\"line\">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</div><div class=\"line\">&gt; db.fortest.find()</div><div class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;57469e80142cea1d9aeabab5&quot;), &quot;num&quot; : 0 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;57469e80142cea1d9aeabab6&quot;), &quot;num&quot; : 1 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;57469e80142cea1d9aeabab7&quot;), &quot;num&quot; : 2 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;57469e80142cea1d9aeabab8&quot;), &quot;num&quot; : 3 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;57469e80142cea1d9aeabab9&quot;), &quot;num&quot; : 4 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;57469e80142cea1d9aeababa&quot;), &quot;num&quot; : 5 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;57469e80142cea1d9aeababb&quot;), &quot;num&quot; : 6 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;57469e80142cea1d9aeababc&quot;), &quot;num&quot; : 7 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;57469e80142cea1d9aeababd&quot;), &quot;num&quot; : 8 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;57469e80142cea1d9aeababe&quot;), &quot;num&quot; : 9 &#125;</div></pre></td></tr></table></figure>\n"},{"title":"mongodb-update","date":"2016-09-10T16:00:00.000Z","_content":"\n> db.集合名称.update({query},{update},upsert, multi}) \n> 过滤条件;\n> 修改内容;\n> 是否插入数据(若不存在),默认false;\n> 是否只查询条件的第一条,默认false;\n\n```\n> db.student.update({_id:1}, {name:\"zhang\"})\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.student.find()\n{ \"_id\" : 1, \"name\" : \"zhang\" }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n```\n\n\n> 更新/添加指定条件的某键;\n> $set\n\n```\n> db.student.update({_id: 1},{$set:{name:\"zhangsan\", age: 26}})\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.student.find()\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 26 }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n```\n\n> 删除指定条件的某键\n> $unset\n\n```\n> db.student.update({_id:7},{$unset:{age:1}})\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.student.find()\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 26 }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n{ \"_id\" : 7, \"name\" : \"songjiu\" }\n```\n\n> 在原来的基础上的运算\n> $inc\n\n```\n> db.student.update({_id:7}, {$inc:{age:-1}})\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.student.find()\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 26 }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n{ \"_id\" : 7, \"name\" : \"songjiu\", \"age\" : 31 }\n\n```\n\n# 数组\n\n>$push:当数据中不存在键时，创建数组类型的键并插入该值;如果存在该键，并且该键是数组类型时，则在此数>组类型的数据上追加;如果存在该键，并且该键不是数组类型时，会报错。\n>$pushAll:批量往数组中追加\n>$addToSet:数组中有该值时不追加，没有该值时追加\n\n```\n\n> db.student.update({_id: 7},{$push:{skill:\"java\"}})\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.student.find()\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 26 }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n{ \"_id\" : 7, \"name\" : \"songjiu\", \"skill\" : [ \"java\" ] }\n> db.student.update({_id: 7},{$push:{skill:\"mongodb\"}})\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.student.find()\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 26 }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n{ \"_id\" : 7, \"name\" : \"songjiu\", \"skill\" : [ \"java\", \"mongodb\" ] }\n> db.student.update({_id: 7},{$push:{name:\"111\"}})\nWriteResult({\n\"nMatched\" : 0,\n\"nUpserted\" : 0,\n\"nModified\" : 0,\n\"writeError\" : {\n\"code\" : 16837,\n\"errmsg\" : \"The field 'name' must be an array but is of type String in document {_id: 7.0}\"\n}\n})\n> db.student.update({_id: 7},{$pushAll:{skill:[\"js\",\"C++\",\"java\"]}})\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.student.find()\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 26 }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n{ \"_id\" : 7, \"name\" : \"songjiu\", \"skill\" : [ \"java\", \"mongodb\", \"js\", \"C++\", \"java\" ] }\n> db.student.update({_id:7},{$addToSet:{skill:\"mongodb\"}})\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 0 })\n> db.student.find()\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 26 }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n{ \"_id\" : 7, \"name\" : \"songjiu\", \"skill\" : [ \"java\", \"mongodb\", \"js\", \"C++\", \"java\" ] }\n\n```\n\n> $pop:删除数组的第一个或最后一个元素，值为-1时是删除第一个元素，值为1时是删除最后一个元素。\n> $pull:删除数组中的某一个指定的数值\n> $pullAll:删除数组中多个指定的数值\n\n```\n> db.student.update({_id:7},{$pop:{skill:1}})\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.student.find()\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 26 }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n{ \"_id\" : 7, \"name\" : \"songjiu\", \"skill\" : [ \"java\", \"mongodb\", \"js\", \"C++\" ] }\n> db.student.update({_id:7},{$pop:{skill:-1}})\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.student.find()\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 26 }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n{ \"_id\" : 7, \"name\" : \"songjiu\", \"skill\" : [ \"mongodb\", \"js\", \"C++\" ] }\n> db.student.update({_id:7},{$pull:{skill:\"js\"}})\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.student.find()\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 26 }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n{ \"_id\" : 7, \"name\" : \"songjiu\", \"skill\" : [ \"mongodb\", \"C++\" ] }\n> db.student.update({_id:7},{$pullAll:{skill:[\"js\"]}})\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 0 })\n> db.student.find()\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 26 }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n{ \"_id\" : 7, \"name\" : \"songjiu\", \"skill\" : [ \"mongodb\", \"C++\" ] }\n> db.student.update({_id:7},{$pullAll:{skill:[\"mongodb\",\"C++\"]}})\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.student.find()\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 26 }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n{ \"_id\" : 7, \"name\" : \"songjiu\", \"skill\" : [ ] }\n\n```\n\n> id不能转换\n\n```\n\n> db.student.update({_id:1},{_id:0, name:\"zhangsanzhangsan\"})\nWriteResult({\n\"nMatched\" : 0,\n\"nUpserted\" : 0,\n\"nModified\" : 0,\n\"writeError\" : {\n\"code\" : 16837,\n\"errmsg\" : \"The _id field cannot be changed from {_id: 1.0} to {_id: 0.0}.\"\n}\n})\n> db.student.find()\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 26 }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/mongodb/mongodb-update.md","raw":"---\ntitle: mongodb-update\ndate: 2016-09-11\ncategories: \n- mongodb\n---\n\n> db.集合名称.update({query},{update},upsert, multi}) \n> 过滤条件;\n> 修改内容;\n> 是否插入数据(若不存在),默认false;\n> 是否只查询条件的第一条,默认false;\n\n```\n> db.student.update({_id:1}, {name:\"zhang\"})\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.student.find()\n{ \"_id\" : 1, \"name\" : \"zhang\" }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n```\n\n\n> 更新/添加指定条件的某键;\n> $set\n\n```\n> db.student.update({_id: 1},{$set:{name:\"zhangsan\", age: 26}})\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.student.find()\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 26 }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n```\n\n> 删除指定条件的某键\n> $unset\n\n```\n> db.student.update({_id:7},{$unset:{age:1}})\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.student.find()\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 26 }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n{ \"_id\" : 7, \"name\" : \"songjiu\" }\n```\n\n> 在原来的基础上的运算\n> $inc\n\n```\n> db.student.update({_id:7}, {$inc:{age:-1}})\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.student.find()\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 26 }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n{ \"_id\" : 7, \"name\" : \"songjiu\", \"age\" : 31 }\n\n```\n\n# 数组\n\n>$push:当数据中不存在键时，创建数组类型的键并插入该值;如果存在该键，并且该键是数组类型时，则在此数>组类型的数据上追加;如果存在该键，并且该键不是数组类型时，会报错。\n>$pushAll:批量往数组中追加\n>$addToSet:数组中有该值时不追加，没有该值时追加\n\n```\n\n> db.student.update({_id: 7},{$push:{skill:\"java\"}})\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.student.find()\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 26 }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n{ \"_id\" : 7, \"name\" : \"songjiu\", \"skill\" : [ \"java\" ] }\n> db.student.update({_id: 7},{$push:{skill:\"mongodb\"}})\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.student.find()\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 26 }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n{ \"_id\" : 7, \"name\" : \"songjiu\", \"skill\" : [ \"java\", \"mongodb\" ] }\n> db.student.update({_id: 7},{$push:{name:\"111\"}})\nWriteResult({\n\"nMatched\" : 0,\n\"nUpserted\" : 0,\n\"nModified\" : 0,\n\"writeError\" : {\n\"code\" : 16837,\n\"errmsg\" : \"The field 'name' must be an array but is of type String in document {_id: 7.0}\"\n}\n})\n> db.student.update({_id: 7},{$pushAll:{skill:[\"js\",\"C++\",\"java\"]}})\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.student.find()\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 26 }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n{ \"_id\" : 7, \"name\" : \"songjiu\", \"skill\" : [ \"java\", \"mongodb\", \"js\", \"C++\", \"java\" ] }\n> db.student.update({_id:7},{$addToSet:{skill:\"mongodb\"}})\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 0 })\n> db.student.find()\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 26 }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n{ \"_id\" : 7, \"name\" : \"songjiu\", \"skill\" : [ \"java\", \"mongodb\", \"js\", \"C++\", \"java\" ] }\n\n```\n\n> $pop:删除数组的第一个或最后一个元素，值为-1时是删除第一个元素，值为1时是删除最后一个元素。\n> $pull:删除数组中的某一个指定的数值\n> $pullAll:删除数组中多个指定的数值\n\n```\n> db.student.update({_id:7},{$pop:{skill:1}})\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.student.find()\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 26 }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n{ \"_id\" : 7, \"name\" : \"songjiu\", \"skill\" : [ \"java\", \"mongodb\", \"js\", \"C++\" ] }\n> db.student.update({_id:7},{$pop:{skill:-1}})\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.student.find()\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 26 }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n{ \"_id\" : 7, \"name\" : \"songjiu\", \"skill\" : [ \"mongodb\", \"js\", \"C++\" ] }\n> db.student.update({_id:7},{$pull:{skill:\"js\"}})\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.student.find()\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 26 }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n{ \"_id\" : 7, \"name\" : \"songjiu\", \"skill\" : [ \"mongodb\", \"C++\" ] }\n> db.student.update({_id:7},{$pullAll:{skill:[\"js\"]}})\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 0 })\n> db.student.find()\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 26 }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n{ \"_id\" : 7, \"name\" : \"songjiu\", \"skill\" : [ \"mongodb\", \"C++\" ] }\n> db.student.update({_id:7},{$pullAll:{skill:[\"mongodb\",\"C++\"]}})\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.student.find()\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 26 }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n{ \"_id\" : 7, \"name\" : \"songjiu\", \"skill\" : [ ] }\n\n```\n\n> id不能转换\n\n```\n\n> db.student.update({_id:1},{_id:0, name:\"zhangsanzhangsan\"})\nWriteResult({\n\"nMatched\" : 0,\n\"nUpserted\" : 0,\n\"nModified\" : 0,\n\"writeError\" : {\n\"code\" : 16837,\n\"errmsg\" : \"The _id field cannot be changed from {_id: 1.0} to {_id: 0.0}.\"\n}\n})\n> db.student.find()\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 26 }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"mongodb/mongodb-update","published":1,"updated":"2017-02-06T02:53:17.000Z","_id":"ciytg4h1e0055s10ozn1q497n","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>db.集合名称.update({query},{update},upsert, multi})<br>过滤条件;<br>修改内容;<br>是否插入数据(若不存在),默认false;<br>是否只查询条件的第一条,默认false;</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; db.student.update(&#123;_id:1&#125;, &#123;name:&quot;zhang&quot;&#125;)</div><div class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</div><div class=\"line\">&gt; db.student.find()</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhang&quot; &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>更新/添加指定条件的某键;<br>$set</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; db.student.update(&#123;_id: 1&#125;,&#123;$set:&#123;name:&quot;zhangsan&quot;, age: 26&#125;&#125;)</div><div class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</div><div class=\"line\">&gt; db.student.find()</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 26 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>删除指定条件的某键<br>$unset</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; db.student.update(&#123;_id:7&#125;,&#123;$unset:&#123;age:1&#125;&#125;)</div><div class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</div><div class=\"line\">&gt; db.student.find()</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 26 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 7, &quot;name&quot; : &quot;songjiu&quot; &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>在原来的基础上的运算<br>$inc</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; db.student.update(&#123;_id:7&#125;, &#123;$inc:&#123;age:-1&#125;&#125;)</div><div class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</div><div class=\"line\">&gt; db.student.find()</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 26 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 7, &quot;name&quot; : &quot;songjiu&quot;, &quot;age&quot; : 31 &#125;</div></pre></td></tr></table></figure>\n<h1 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h1><blockquote>\n<p>$push:当数据中不存在键时，创建数组类型的键并插入该值;如果存在该键，并且该键是数组类型时，则在此数&gt;组类型的数据上追加;如果存在该键，并且该键不是数组类型时，会报错。<br>$pushAll:批量往数组中追加<br>$addToSet:数组中有该值时不追加，没有该值时追加</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&gt; db.student.update(&#123;_id: 7&#125;,&#123;$push:&#123;skill:&quot;java&quot;&#125;&#125;)</div><div class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</div><div class=\"line\">&gt; db.student.find()</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 26 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 7, &quot;name&quot; : &quot;songjiu&quot;, &quot;skill&quot; : [ &quot;java&quot; ] &#125;</div><div class=\"line\">&gt; db.student.update(&#123;_id: 7&#125;,&#123;$push:&#123;skill:&quot;mongodb&quot;&#125;&#125;)</div><div class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</div><div class=\"line\">&gt; db.student.find()</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 26 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 7, &quot;name&quot; : &quot;songjiu&quot;, &quot;skill&quot; : [ &quot;java&quot;, &quot;mongodb&quot; ] &#125;</div><div class=\"line\">&gt; db.student.update(&#123;_id: 7&#125;,&#123;$push:&#123;name:&quot;111&quot;&#125;&#125;)</div><div class=\"line\">WriteResult(&#123;</div><div class=\"line\">&quot;nMatched&quot; : 0,</div><div class=\"line\">&quot;nUpserted&quot; : 0,</div><div class=\"line\">&quot;nModified&quot; : 0,</div><div class=\"line\">&quot;writeError&quot; : &#123;</div><div class=\"line\">&quot;code&quot; : 16837,</div><div class=\"line\">&quot;errmsg&quot; : &quot;The field &apos;name&apos; must be an array but is of type String in document &#123;_id: 7.0&#125;&quot;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">&gt; db.student.update(&#123;_id: 7&#125;,&#123;$pushAll:&#123;skill:[&quot;js&quot;,&quot;C++&quot;,&quot;java&quot;]&#125;&#125;)</div><div class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</div><div class=\"line\">&gt; db.student.find()</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 26 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 7, &quot;name&quot; : &quot;songjiu&quot;, &quot;skill&quot; : [ &quot;java&quot;, &quot;mongodb&quot;, &quot;js&quot;, &quot;C++&quot;, &quot;java&quot; ] &#125;</div><div class=\"line\">&gt; db.student.update(&#123;_id:7&#125;,&#123;$addToSet:&#123;skill:&quot;mongodb&quot;&#125;&#125;)</div><div class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 0 &#125;)</div><div class=\"line\">&gt; db.student.find()</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 26 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 7, &quot;name&quot; : &quot;songjiu&quot;, &quot;skill&quot; : [ &quot;java&quot;, &quot;mongodb&quot;, &quot;js&quot;, &quot;C++&quot;, &quot;java&quot; ] &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>$pop:删除数组的第一个或最后一个元素，值为-1时是删除第一个元素，值为1时是删除最后一个元素。<br>$pull:删除数组中的某一个指定的数值<br>$pullAll:删除数组中多个指定的数值</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; db.student.update(&#123;_id:7&#125;,&#123;$pop:&#123;skill:1&#125;&#125;)</div><div class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</div><div class=\"line\">&gt; db.student.find()</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 26 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 7, &quot;name&quot; : &quot;songjiu&quot;, &quot;skill&quot; : [ &quot;java&quot;, &quot;mongodb&quot;, &quot;js&quot;, &quot;C++&quot; ] &#125;</div><div class=\"line\">&gt; db.student.update(&#123;_id:7&#125;,&#123;$pop:&#123;skill:-1&#125;&#125;)</div><div class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</div><div class=\"line\">&gt; db.student.find()</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 26 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 7, &quot;name&quot; : &quot;songjiu&quot;, &quot;skill&quot; : [ &quot;mongodb&quot;, &quot;js&quot;, &quot;C++&quot; ] &#125;</div><div class=\"line\">&gt; db.student.update(&#123;_id:7&#125;,&#123;$pull:&#123;skill:&quot;js&quot;&#125;&#125;)</div><div class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</div><div class=\"line\">&gt; db.student.find()</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 26 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 7, &quot;name&quot; : &quot;songjiu&quot;, &quot;skill&quot; : [ &quot;mongodb&quot;, &quot;C++&quot; ] &#125;</div><div class=\"line\">&gt; db.student.update(&#123;_id:7&#125;,&#123;$pullAll:&#123;skill:[&quot;js&quot;]&#125;&#125;)</div><div class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 0 &#125;)</div><div class=\"line\">&gt; db.student.find()</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 26 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 7, &quot;name&quot; : &quot;songjiu&quot;, &quot;skill&quot; : [ &quot;mongodb&quot;, &quot;C++&quot; ] &#125;</div><div class=\"line\">&gt; db.student.update(&#123;_id:7&#125;,&#123;$pullAll:&#123;skill:[&quot;mongodb&quot;,&quot;C++&quot;]&#125;&#125;)</div><div class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</div><div class=\"line\">&gt; db.student.find()</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 26 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 7, &quot;name&quot; : &quot;songjiu&quot;, &quot;skill&quot; : [ ] &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>id不能转换</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&gt; db.student.update(&#123;_id:1&#125;,&#123;_id:0, name:&quot;zhangsanzhangsan&quot;&#125;)</div><div class=\"line\">WriteResult(&#123;</div><div class=\"line\">&quot;nMatched&quot; : 0,</div><div class=\"line\">&quot;nUpserted&quot; : 0,</div><div class=\"line\">&quot;nModified&quot; : 0,</div><div class=\"line\">&quot;writeError&quot; : &#123;</div><div class=\"line\">&quot;code&quot; : 16837,</div><div class=\"line\">&quot;errmsg&quot; : &quot;The _id field cannot be changed from &#123;_id: 1.0&#125; to &#123;_id: 0.0&#125;.&quot;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">&gt; db.student.find()</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 26 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>db.集合名称.update({query},{update},upsert, multi})<br>过滤条件;<br>修改内容;<br>是否插入数据(若不存在),默认false;<br>是否只查询条件的第一条,默认false;</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; db.student.update(&#123;_id:1&#125;, &#123;name:&quot;zhang&quot;&#125;)</div><div class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</div><div class=\"line\">&gt; db.student.find()</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhang&quot; &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>更新/添加指定条件的某键;<br>$set</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; db.student.update(&#123;_id: 1&#125;,&#123;$set:&#123;name:&quot;zhangsan&quot;, age: 26&#125;&#125;)</div><div class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</div><div class=\"line\">&gt; db.student.find()</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 26 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>删除指定条件的某键<br>$unset</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; db.student.update(&#123;_id:7&#125;,&#123;$unset:&#123;age:1&#125;&#125;)</div><div class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</div><div class=\"line\">&gt; db.student.find()</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 26 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 7, &quot;name&quot; : &quot;songjiu&quot; &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>在原来的基础上的运算<br>$inc</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; db.student.update(&#123;_id:7&#125;, &#123;$inc:&#123;age:-1&#125;&#125;)</div><div class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</div><div class=\"line\">&gt; db.student.find()</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 26 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 7, &quot;name&quot; : &quot;songjiu&quot;, &quot;age&quot; : 31 &#125;</div></pre></td></tr></table></figure>\n<h1 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h1><blockquote>\n<p>$push:当数据中不存在键时，创建数组类型的键并插入该值;如果存在该键，并且该键是数组类型时，则在此数&gt;组类型的数据上追加;如果存在该键，并且该键不是数组类型时，会报错。<br>$pushAll:批量往数组中追加<br>$addToSet:数组中有该值时不追加，没有该值时追加</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&gt; db.student.update(&#123;_id: 7&#125;,&#123;$push:&#123;skill:&quot;java&quot;&#125;&#125;)</div><div class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</div><div class=\"line\">&gt; db.student.find()</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 26 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 7, &quot;name&quot; : &quot;songjiu&quot;, &quot;skill&quot; : [ &quot;java&quot; ] &#125;</div><div class=\"line\">&gt; db.student.update(&#123;_id: 7&#125;,&#123;$push:&#123;skill:&quot;mongodb&quot;&#125;&#125;)</div><div class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</div><div class=\"line\">&gt; db.student.find()</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 26 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 7, &quot;name&quot; : &quot;songjiu&quot;, &quot;skill&quot; : [ &quot;java&quot;, &quot;mongodb&quot; ] &#125;</div><div class=\"line\">&gt; db.student.update(&#123;_id: 7&#125;,&#123;$push:&#123;name:&quot;111&quot;&#125;&#125;)</div><div class=\"line\">WriteResult(&#123;</div><div class=\"line\">&quot;nMatched&quot; : 0,</div><div class=\"line\">&quot;nUpserted&quot; : 0,</div><div class=\"line\">&quot;nModified&quot; : 0,</div><div class=\"line\">&quot;writeError&quot; : &#123;</div><div class=\"line\">&quot;code&quot; : 16837,</div><div class=\"line\">&quot;errmsg&quot; : &quot;The field &apos;name&apos; must be an array but is of type String in document &#123;_id: 7.0&#125;&quot;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">&gt; db.student.update(&#123;_id: 7&#125;,&#123;$pushAll:&#123;skill:[&quot;js&quot;,&quot;C++&quot;,&quot;java&quot;]&#125;&#125;)</div><div class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</div><div class=\"line\">&gt; db.student.find()</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 26 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 7, &quot;name&quot; : &quot;songjiu&quot;, &quot;skill&quot; : [ &quot;java&quot;, &quot;mongodb&quot;, &quot;js&quot;, &quot;C++&quot;, &quot;java&quot; ] &#125;</div><div class=\"line\">&gt; db.student.update(&#123;_id:7&#125;,&#123;$addToSet:&#123;skill:&quot;mongodb&quot;&#125;&#125;)</div><div class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 0 &#125;)</div><div class=\"line\">&gt; db.student.find()</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 26 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 7, &quot;name&quot; : &quot;songjiu&quot;, &quot;skill&quot; : [ &quot;java&quot;, &quot;mongodb&quot;, &quot;js&quot;, &quot;C++&quot;, &quot;java&quot; ] &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>$pop:删除数组的第一个或最后一个元素，值为-1时是删除第一个元素，值为1时是删除最后一个元素。<br>$pull:删除数组中的某一个指定的数值<br>$pullAll:删除数组中多个指定的数值</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; db.student.update(&#123;_id:7&#125;,&#123;$pop:&#123;skill:1&#125;&#125;)</div><div class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</div><div class=\"line\">&gt; db.student.find()</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 26 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 7, &quot;name&quot; : &quot;songjiu&quot;, &quot;skill&quot; : [ &quot;java&quot;, &quot;mongodb&quot;, &quot;js&quot;, &quot;C++&quot; ] &#125;</div><div class=\"line\">&gt; db.student.update(&#123;_id:7&#125;,&#123;$pop:&#123;skill:-1&#125;&#125;)</div><div class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</div><div class=\"line\">&gt; db.student.find()</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 26 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 7, &quot;name&quot; : &quot;songjiu&quot;, &quot;skill&quot; : [ &quot;mongodb&quot;, &quot;js&quot;, &quot;C++&quot; ] &#125;</div><div class=\"line\">&gt; db.student.update(&#123;_id:7&#125;,&#123;$pull:&#123;skill:&quot;js&quot;&#125;&#125;)</div><div class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</div><div class=\"line\">&gt; db.student.find()</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 26 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 7, &quot;name&quot; : &quot;songjiu&quot;, &quot;skill&quot; : [ &quot;mongodb&quot;, &quot;C++&quot; ] &#125;</div><div class=\"line\">&gt; db.student.update(&#123;_id:7&#125;,&#123;$pullAll:&#123;skill:[&quot;js&quot;]&#125;&#125;)</div><div class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 0 &#125;)</div><div class=\"line\">&gt; db.student.find()</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 26 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 7, &quot;name&quot; : &quot;songjiu&quot;, &quot;skill&quot; : [ &quot;mongodb&quot;, &quot;C++&quot; ] &#125;</div><div class=\"line\">&gt; db.student.update(&#123;_id:7&#125;,&#123;$pullAll:&#123;skill:[&quot;mongodb&quot;,&quot;C++&quot;]&#125;&#125;)</div><div class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</div><div class=\"line\">&gt; db.student.find()</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 26 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 7, &quot;name&quot; : &quot;songjiu&quot;, &quot;skill&quot; : [ ] &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>id不能转换</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&gt; db.student.update(&#123;_id:1&#125;,&#123;_id:0, name:&quot;zhangsanzhangsan&quot;&#125;)</div><div class=\"line\">WriteResult(&#123;</div><div class=\"line\">&quot;nMatched&quot; : 0,</div><div class=\"line\">&quot;nUpserted&quot; : 0,</div><div class=\"line\">&quot;nModified&quot; : 0,</div><div class=\"line\">&quot;writeError&quot; : &#123;</div><div class=\"line\">&quot;code&quot; : 16837,</div><div class=\"line\">&quot;errmsg&quot; : &quot;The _id field cannot be changed from &#123;_id: 1.0&#125; to &#123;_id: 0.0&#125;.&quot;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">&gt; db.student.find()</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 26 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div></pre></td></tr></table></figure>\n"},{"title":"mongodb-初识","date":"2016-09-10T16:00:00.000Z","_content":"\n> mongodb 基本命令\n\n> show dbs or db\n> 当前数据库\n\n> use dbs \n> 切换指定数据库,若进行过操纵则自动创建该数据库 \n\n> show collections\n> 当前数据库的所有集合\n\n> db.stats()\n> 当前数据库的统计信息\n\n> db.getCollectionNames()\n> 当前数据库的集合名称列表\n\n```\ndb.getCollection(       \ndb.getLogComponents(    \ndb.getQueryOptions(     \ndb.getSlaveOk(\ndb.getCollectionInfos(  \ndb.getMongo(            \ndb.getReplicationInfo(  \ndb.getUser(\ndb.getCollectionNames(  \ndb.getName(             \ndb.getRole(             \ndb.getUsers(\ndb.getLastError(        \ndb.getPrevError(        \ndb.getRoles(            \ndb.getWriteConcern(\ndb.getLastErrorCmd(     \ndb.getProfilingLevel(   \ndb.getSiblingDB(\ndb.getLastErrorObj(     \ndb.getProfilingStatus(  \ndb.getSisterDB(\n```\n\n> db.createCollection()\n> 创建集合\n\n> db.mycoll.drop()\n> 删除集合\n\n> db.storeCollection.save()\n> 更新记录\n\n> db.storeCollection.findOne()\n> 查询一条记录\n\n> db.storeColletion.find()\n> 查询多条记录\n\n> db.sotreColletion.remove()\n> 删除记录\n\n> db.dropDatabase()\n> 删除当前的数据库,但上下文还是当前的\n\n\n下面是其他删除的数据\n\n```\ndb.dropAllRoles(  db.dropAllUsers(  db.dropDatabase(  db.dropRole(      db.dropUser(\n```\n\n> db.serverStatus()\n> 当前服务器的状态,查看是否存在问题,便于修复\n\n> mongodb 符号&查询\n\n> 查询方式\n\n```\n$lt:< \n$lte:<= \n$gt:> \n$gte:>= \n$ne:!=\n```\n\n```\n> db.student.find({age:{$lt:30}})\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 27, \"sex\" : 1 }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n> db.student.find({age:{$ne:27}})\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n```\n\n\n> $in:包含$nin:不包含\n\n```\n> db.student.find({age:{$in:[27,28]}})\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 27, \"sex\" : 1 }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n> db.student.find({age:{$nin:[27,28]}})\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n\n```\n\n> $or:或者\n\n```\n> db.student.find({$or:[{age:{$lt:29}}, {name:\"sunba\"}]})\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 27, \"sex\" : 1 }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n```\n\n> null:空值\n\n```\n> db.student.find({sex: null})\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n```\n\n> $type:键是某种类型的 \n> double:1 \n> string:2 \n> ...\n\n```\n\n> db.student.insert({_id:7, name:7, age:70})\nWriteResult({ \"nInserted\" : 1 })\n> db.student.find({name: {$type: 2}})\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 27, \"sex\" : 1 }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n> db.student.find({name: {$type: 1}})\n{ \"_id\" : 7, \"name\" : 7, \"age\" : 70 }\n```\n\n> 正则表达式\n\n```\n> db.student.find({name: /si\\b/})\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n```\n\n","source":"_posts/mongodb/mongodb-初识.md","raw":"---\ntitle: mongodb-初识\ndate: 2016-09-11\ncategories: \n- mongodb\n---\n\n> mongodb 基本命令\n\n> show dbs or db\n> 当前数据库\n\n> use dbs \n> 切换指定数据库,若进行过操纵则自动创建该数据库 \n\n> show collections\n> 当前数据库的所有集合\n\n> db.stats()\n> 当前数据库的统计信息\n\n> db.getCollectionNames()\n> 当前数据库的集合名称列表\n\n```\ndb.getCollection(       \ndb.getLogComponents(    \ndb.getQueryOptions(     \ndb.getSlaveOk(\ndb.getCollectionInfos(  \ndb.getMongo(            \ndb.getReplicationInfo(  \ndb.getUser(\ndb.getCollectionNames(  \ndb.getName(             \ndb.getRole(             \ndb.getUsers(\ndb.getLastError(        \ndb.getPrevError(        \ndb.getRoles(            \ndb.getWriteConcern(\ndb.getLastErrorCmd(     \ndb.getProfilingLevel(   \ndb.getSiblingDB(\ndb.getLastErrorObj(     \ndb.getProfilingStatus(  \ndb.getSisterDB(\n```\n\n> db.createCollection()\n> 创建集合\n\n> db.mycoll.drop()\n> 删除集合\n\n> db.storeCollection.save()\n> 更新记录\n\n> db.storeCollection.findOne()\n> 查询一条记录\n\n> db.storeColletion.find()\n> 查询多条记录\n\n> db.sotreColletion.remove()\n> 删除记录\n\n> db.dropDatabase()\n> 删除当前的数据库,但上下文还是当前的\n\n\n下面是其他删除的数据\n\n```\ndb.dropAllRoles(  db.dropAllUsers(  db.dropDatabase(  db.dropRole(      db.dropUser(\n```\n\n> db.serverStatus()\n> 当前服务器的状态,查看是否存在问题,便于修复\n\n> mongodb 符号&查询\n\n> 查询方式\n\n```\n$lt:< \n$lte:<= \n$gt:> \n$gte:>= \n$ne:!=\n```\n\n```\n> db.student.find({age:{$lt:30}})\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 27, \"sex\" : 1 }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n> db.student.find({age:{$ne:27}})\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n```\n\n\n> $in:包含$nin:不包含\n\n```\n> db.student.find({age:{$in:[27,28]}})\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 27, \"sex\" : 1 }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n> db.student.find({age:{$nin:[27,28]}})\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n\n```\n\n> $or:或者\n\n```\n> db.student.find({$or:[{age:{$lt:29}}, {name:\"sunba\"}]})\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 27, \"sex\" : 1 }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n```\n\n> null:空值\n\n```\n> db.student.find({sex: null})\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n```\n\n> $type:键是某种类型的 \n> double:1 \n> string:2 \n> ...\n\n```\n\n> db.student.insert({_id:7, name:7, age:70})\nWriteResult({ \"nInserted\" : 1 })\n> db.student.find({name: {$type: 2}})\n{ \"_id\" : 1, \"name\" : \"zhangsan\", \"age\" : 27, \"sex\" : 1 }\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n{ \"_id\" : 3, \"name\" : \"wangwu\", \"age\" : 30 }\n{ \"_id\" : 4, \"name\" : \"zhaoliu\", \"age\" : 28 }\n{ \"_id\" : 5, \"name\" : \"qianliu\", \"age\" : 33 }\n{ \"_id\" : 6, \"name\" : \"sunba\", \"age\" : 32 }\n> db.student.find({name: {$type: 1}})\n{ \"_id\" : 7, \"name\" : 7, \"age\" : 70 }\n```\n\n> 正则表达式\n\n```\n> db.student.find({name: /si\\b/})\n{ \"_id\" : 2, \"name\" : \"lisi\", \"age\" : 27 }\n```\n\n","slug":"mongodb/mongodb-初识","published":1,"updated":"2017-02-06T03:14:55.000Z","_id":"ciytg4h1f0056s10o2ye5jb7w","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>mongodb 基本命令</p>\n<p>show dbs or db<br>当前数据库</p>\n<p>use dbs<br>切换指定数据库,若进行过操纵则自动创建该数据库 </p>\n<p>show collections<br>当前数据库的所有集合</p>\n<p>db.stats()<br>当前数据库的统计信息</p>\n<p>db.getCollectionNames()<br>当前数据库的集合名称列表</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.getCollection(       </div><div class=\"line\">db.getLogComponents(    </div><div class=\"line\">db.getQueryOptions(     </div><div class=\"line\">db.getSlaveOk(</div><div class=\"line\">db.getCollectionInfos(  </div><div class=\"line\">db.getMongo(            </div><div class=\"line\">db.getReplicationInfo(  </div><div class=\"line\">db.getUser(</div><div class=\"line\">db.getCollectionNames(  </div><div class=\"line\">db.getName(             </div><div class=\"line\">db.getRole(             </div><div class=\"line\">db.getUsers(</div><div class=\"line\">db.getLastError(        </div><div class=\"line\">db.getPrevError(        </div><div class=\"line\">db.getRoles(            </div><div class=\"line\">db.getWriteConcern(</div><div class=\"line\">db.getLastErrorCmd(     </div><div class=\"line\">db.getProfilingLevel(   </div><div class=\"line\">db.getSiblingDB(</div><div class=\"line\">db.getLastErrorObj(     </div><div class=\"line\">db.getProfilingStatus(  </div><div class=\"line\">db.getSisterDB(</div></pre></td></tr></table></figure>\n<blockquote>\n<p>db.createCollection()<br>创建集合</p>\n<p>db.mycoll.drop()<br>删除集合</p>\n<p>db.storeCollection.save()<br>更新记录</p>\n<p>db.storeCollection.findOne()<br>查询一条记录</p>\n<p>db.storeColletion.find()<br>查询多条记录</p>\n<p>db.sotreColletion.remove()<br>删除记录</p>\n<p>db.dropDatabase()<br>删除当前的数据库,但上下文还是当前的</p>\n</blockquote>\n<p>下面是其他删除的数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.dropAllRoles(  db.dropAllUsers(  db.dropDatabase(  db.dropRole(      db.dropUser(</div></pre></td></tr></table></figure>\n<blockquote>\n<p>db.serverStatus()<br>当前服务器的状态,查看是否存在问题,便于修复</p>\n<p>mongodb 符号&amp;查询</p>\n<p>查询方式</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$lt:&lt; </div><div class=\"line\">$lte:&lt;= </div><div class=\"line\">$gt:&gt; </div><div class=\"line\">$gte:&gt;= </div><div class=\"line\">$ne:!=</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; db.student.find(&#123;age:&#123;$lt:30&#125;&#125;)</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 27, &quot;sex&quot; : 1 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&gt; db.student.find(&#123;age:&#123;$ne:27&#125;&#125;)</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>$in:包含$nin:不包含</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; db.student.find(&#123;age:&#123;$in:[27,28]&#125;&#125;)</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 27, &quot;sex&quot; : 1 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&gt; db.student.find(&#123;age:&#123;$nin:[27,28]&#125;&#125;)</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>$or:或者</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; db.student.find(&#123;$or:[&#123;age:&#123;$lt:29&#125;&#125;, &#123;name:&quot;sunba&quot;&#125;]&#125;)</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 27, &quot;sex&quot; : 1 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>null:空值</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; db.student.find(&#123;sex: null&#125;)</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>$type:键是某种类型的<br>double:1<br>string:2<br>…</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&gt; db.student.insert(&#123;_id:7, name:7, age:70&#125;)</div><div class=\"line\">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</div><div class=\"line\">&gt; db.student.find(&#123;name: &#123;$type: 2&#125;&#125;)</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 27, &quot;sex&quot; : 1 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div><div class=\"line\">&gt; db.student.find(&#123;name: &#123;$type: 1&#125;&#125;)</div><div class=\"line\">&#123; &quot;_id&quot; : 7, &quot;name&quot; : 7, &quot;age&quot; : 70 &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>正则表达式</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; db.student.find(&#123;name: /si\\b/&#125;)</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>mongodb 基本命令</p>\n<p>show dbs or db<br>当前数据库</p>\n<p>use dbs<br>切换指定数据库,若进行过操纵则自动创建该数据库 </p>\n<p>show collections<br>当前数据库的所有集合</p>\n<p>db.stats()<br>当前数据库的统计信息</p>\n<p>db.getCollectionNames()<br>当前数据库的集合名称列表</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.getCollection(       </div><div class=\"line\">db.getLogComponents(    </div><div class=\"line\">db.getQueryOptions(     </div><div class=\"line\">db.getSlaveOk(</div><div class=\"line\">db.getCollectionInfos(  </div><div class=\"line\">db.getMongo(            </div><div class=\"line\">db.getReplicationInfo(  </div><div class=\"line\">db.getUser(</div><div class=\"line\">db.getCollectionNames(  </div><div class=\"line\">db.getName(             </div><div class=\"line\">db.getRole(             </div><div class=\"line\">db.getUsers(</div><div class=\"line\">db.getLastError(        </div><div class=\"line\">db.getPrevError(        </div><div class=\"line\">db.getRoles(            </div><div class=\"line\">db.getWriteConcern(</div><div class=\"line\">db.getLastErrorCmd(     </div><div class=\"line\">db.getProfilingLevel(   </div><div class=\"line\">db.getSiblingDB(</div><div class=\"line\">db.getLastErrorObj(     </div><div class=\"line\">db.getProfilingStatus(  </div><div class=\"line\">db.getSisterDB(</div></pre></td></tr></table></figure>\n<blockquote>\n<p>db.createCollection()<br>创建集合</p>\n<p>db.mycoll.drop()<br>删除集合</p>\n<p>db.storeCollection.save()<br>更新记录</p>\n<p>db.storeCollection.findOne()<br>查询一条记录</p>\n<p>db.storeColletion.find()<br>查询多条记录</p>\n<p>db.sotreColletion.remove()<br>删除记录</p>\n<p>db.dropDatabase()<br>删除当前的数据库,但上下文还是当前的</p>\n</blockquote>\n<p>下面是其他删除的数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.dropAllRoles(  db.dropAllUsers(  db.dropDatabase(  db.dropRole(      db.dropUser(</div></pre></td></tr></table></figure>\n<blockquote>\n<p>db.serverStatus()<br>当前服务器的状态,查看是否存在问题,便于修复</p>\n<p>mongodb 符号&amp;查询</p>\n<p>查询方式</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$lt:&lt; </div><div class=\"line\">$lte:&lt;= </div><div class=\"line\">$gt:&gt; </div><div class=\"line\">$gte:&gt;= </div><div class=\"line\">$ne:!=</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; db.student.find(&#123;age:&#123;$lt:30&#125;&#125;)</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 27, &quot;sex&quot; : 1 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&gt; db.student.find(&#123;age:&#123;$ne:27&#125;&#125;)</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>$in:包含$nin:不包含</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; db.student.find(&#123;age:&#123;$in:[27,28]&#125;&#125;)</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 27, &quot;sex&quot; : 1 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&gt; db.student.find(&#123;age:&#123;$nin:[27,28]&#125;&#125;)</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>$or:或者</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; db.student.find(&#123;$or:[&#123;age:&#123;$lt:29&#125;&#125;, &#123;name:&quot;sunba&quot;&#125;]&#125;)</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 27, &quot;sex&quot; : 1 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>null:空值</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; db.student.find(&#123;sex: null&#125;)</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>$type:键是某种类型的<br>double:1<br>string:2<br>…</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&gt; db.student.insert(&#123;_id:7, name:7, age:70&#125;)</div><div class=\"line\">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</div><div class=\"line\">&gt; db.student.find(&#123;name: &#123;$type: 2&#125;&#125;)</div><div class=\"line\">&#123; &quot;_id&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 27, &quot;sex&quot; : 1 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 3, &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 30 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 4, &quot;name&quot; : &quot;zhaoliu&quot;, &quot;age&quot; : 28 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 5, &quot;name&quot; : &quot;qianliu&quot;, &quot;age&quot; : 33 &#125;</div><div class=\"line\">&#123; &quot;_id&quot; : 6, &quot;name&quot; : &quot;sunba&quot;, &quot;age&quot; : 32 &#125;</div><div class=\"line\">&gt; db.student.find(&#123;name: &#123;$type: 1&#125;&#125;)</div><div class=\"line\">&#123; &quot;_id&quot; : 7, &quot;name&quot; : 7, &quot;age&quot; : 70 &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>正则表达式</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; db.student.find(&#123;name: /si\\b/&#125;)</div><div class=\"line\">&#123; &quot;_id&quot; : 2, &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 27 &#125;</div></pre></td></tr></table></figure>\n"},{"title":"mongodb-索引","date":"2016-09-10T16:00:00.000Z","_content":"\n> db.page.ensureIndex()\n> 创建索引,升序:1,降序:-1\n\n> db.page.Indexes()\n> 查询索引\n\n> db.mycoll.dropIndex() or db.mycoll.dropIndexes()\n> 删除索引\n\n> db.page.reIndex()\n> 重建索引\n","source":"_posts/mongodb/mongodb-索引.md","raw":"---\ntitle: mongodb-索引\ndate: 2016-09-11\ncategories: \n- mongodb\n---\n\n> db.page.ensureIndex()\n> 创建索引,升序:1,降序:-1\n\n> db.page.Indexes()\n> 查询索引\n\n> db.mycoll.dropIndex() or db.mycoll.dropIndexes()\n> 删除索引\n\n> db.page.reIndex()\n> 重建索引\n","slug":"mongodb/mongodb-索引","published":1,"updated":"2017-02-06T03:15:07.000Z","_id":"ciytg4h1h0057s10oaqfvr9r7","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>db.page.ensureIndex()<br>创建索引,升序:1,降序:-1</p>\n<p>db.page.Indexes()<br>查询索引</p>\n<p>db.mycoll.dropIndex() or db.mycoll.dropIndexes()<br>删除索引</p>\n<p>db.page.reIndex()<br>重建索引</p>\n</blockquote>\n","excerpt":"","more":"<blockquote>\n<p>db.page.ensureIndex()<br>创建索引,升序:1,降序:-1</p>\n<p>db.page.Indexes()<br>查询索引</p>\n<p>db.mycoll.dropIndex() or db.mycoll.dropIndexes()<br>删除索引</p>\n<p>db.page.reIndex()<br>重建索引</p>\n</blockquote>\n"},{"title":"brew-安装-mysql-启动","date":"2016-09-10T16:00:00.000Z","_content":"\n> 出现的问题如下:ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/tmp/mysql.sock' (2)\n\n> 另外启动mysql\n\nbrew services start mysql\n\n> mysql.server  {start|stop|restart|reload|force-reload|status}\n","source":"_posts/Mysql/brew-安装-mysql-启动.md","raw":"---\ntitle: brew-安装-mysql-启动\ndate: 2016-09-11\ncategories: \n- mysql\n---\n\n> 出现的问题如下:ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/tmp/mysql.sock' (2)\n\n> 另外启动mysql\n\nbrew services start mysql\n\n> mysql.server  {start|stop|restart|reload|force-reload|status}\n","slug":"Mysql/brew-安装-mysql-启动","published":1,"updated":"2017-02-06T02:53:58.000Z","_id":"ciytg4jjs0058s10olxkh4h48","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>出现的问题如下:ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/tmp/mysql.sock’ (2)</p>\n<p>另外启动mysql</p>\n</blockquote>\n<p>brew services start mysql</p>\n<blockquote>\n<p>mysql.server  {start|stop|restart|reload|force-reload|status}</p>\n</blockquote>\n","excerpt":"","more":"<blockquote>\n<p>出现的问题如下:ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/tmp/mysql.sock’ (2)</p>\n<p>另外启动mysql</p>\n</blockquote>\n<p>brew services start mysql</p>\n<blockquote>\n<p>mysql.server  {start|stop|restart|reload|force-reload|status}</p>\n</blockquote>\n"},{"title":"nginx-开发理解","date":"2016-09-10T16:00:00.000Z","_content":"\n> 安装 epel\n\n```\n\nsudo yum install epel-release\n\n```\n\n> 安装 nginx\n\n```\n\nsudo yum install nginx\n\n```\n\n> 启动\n\n```\n\nsudo /etc/init.d/nginx start\n\n```\n\n> 查看 worker_process 数目\n\n```\n\ngrep ^processor /proc/cpuinfo | wc -l\n\n```\n\n> 启动\n\n```\n\nnginx\n\n```\n\n> 重启\n\n```\n\nsudo nginx -s reload\n\n```\n\n> 删除\n\n```\n\npkill nginx \n\n```\n\n> 安装依赖(默认目录)-->http://nginx.org/en/download.html\n\n```\nyum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel\n```\n\n> 了解四个部分\n\n```\nmain（全局设置）、server（主机设置）、upstream（上游服务器设置，主要为反向代理、负载均衡相关配置）和 location（URL匹配特定位置后的设置）\n```\n\n> main\n\n```\n影响所有的配置\n```\n\n> server \n\n```\n域名-IP-端口\n```\n\n> upstream\n\n```\n反向代理和负载均衡\n```\n\n> location\n\n``` \n网页的配置\n```\n\n\n\n```\n\n\n\n-------------main\n# 查看配置文件是否正确\nsudo nginx -t\n\n# 查看默认的配置\ncat /usr/local/etc/nginx/nginx.conf.default\n\n# user 管理用户 用户组\nwhoami\ngroups\n\n# worker_processes 占用内核的数量\nsysctl -n hw.ncpu\n\n# error_log 路径 模式\nmac 路径:/usr/local/var/log/nginx/error.log\ncentos 路径: /var/log/nginx/error.log\n模式类型 : debug/info/notice/warn/error/crit (越不详细)\n\n# pid 路径\nmac 路径:/usr/local/var/run/nginx.pid\ncentos 路径:/var/run/nginx.pid\n\n---------------main\n\n---------------events\n\n# worker_connections number\n若提示 worker_connections exceed open file resource limit: 256,可以在main的部分添加 worker_rlimit_nofile 2048;\n\n---------------events\n\n---------------http\nhttp {\n \t# 关闭错误页面的nginx版本数字，提高安全性\n    server_tokens off;\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    #access_log  logs/access.log  main;\n\n    #高效文件传输模式,是否调用sedfile函数输出文件,减少上下文切换,若下载等应用盘则off\n    sendfile        on;\n\n    #tcp_nopush     on;\n\n    #长连接超时时间\n    keepalive_timeout  65;\n\n    #send_timeout : 响应客户端超时的时间;\n\n    #启动gzip,为了减少网路传输\n    gzip on;\n    #允许压缩的页面的最小字节数,小于1k的可能越压越大\n    gzip_min_length 1k;\n    #数据流\n    gzip_buffers    4 16k;\n    #协议的版本,支持早期的不支持gzip的浏览器\n    gzip_http_version 1.0;\n    #压缩比,越小越快,越大越耗能;\n    gzip_comp_level 6;\n    #压缩的类型\n    gzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;\n    #响应头加上vary\n    gzip_vary on;\n\n    # http_proxy 设置\n    # 请求文件字节数的大小和缓存区\n    client_max_body_size   10m;\n    client_body_buffer_size   128k;\n\n    #proxy 时间控制\n    proxy_connect_timeout   75;\n    proxy_send_timeout   75;\n    proxy_read_timeout   75;\n\n    #proxy 缓存设置\n    proxy_buffer_size   4k;\n    proxy_buffers   4 32k;\n    proxy_busy_buffers_size   64k;\n\n    #proxy 临时文件大小\n    proxy_temp_file_write_size  64k;\n    \n    # 确认路径三 centos的路径在 /etc/nginx/\n    proxy_temp_path   /usr/local/etc/nginx/proxy_temp 1 2;\n    \n    # 引入其他的server\n\n    include servers/*;\n}\n---------------http\n\n # 关闭错误页面的nginx版本数字，提高安全性\n server_tokens off;\n\n\n\n```\n","source":"_posts/nginx/nginx-开发理解.md","raw":"---\ntitle: nginx-开发理解\ndate: 2016-09-11\ncategories: \n- nginx\n---\n\n> 安装 epel\n\n```\n\nsudo yum install epel-release\n\n```\n\n> 安装 nginx\n\n```\n\nsudo yum install nginx\n\n```\n\n> 启动\n\n```\n\nsudo /etc/init.d/nginx start\n\n```\n\n> 查看 worker_process 数目\n\n```\n\ngrep ^processor /proc/cpuinfo | wc -l\n\n```\n\n> 启动\n\n```\n\nnginx\n\n```\n\n> 重启\n\n```\n\nsudo nginx -s reload\n\n```\n\n> 删除\n\n```\n\npkill nginx \n\n```\n\n> 安装依赖(默认目录)-->http://nginx.org/en/download.html\n\n```\nyum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel\n```\n\n> 了解四个部分\n\n```\nmain（全局设置）、server（主机设置）、upstream（上游服务器设置，主要为反向代理、负载均衡相关配置）和 location（URL匹配特定位置后的设置）\n```\n\n> main\n\n```\n影响所有的配置\n```\n\n> server \n\n```\n域名-IP-端口\n```\n\n> upstream\n\n```\n反向代理和负载均衡\n```\n\n> location\n\n``` \n网页的配置\n```\n\n\n\n```\n\n\n\n-------------main\n# 查看配置文件是否正确\nsudo nginx -t\n\n# 查看默认的配置\ncat /usr/local/etc/nginx/nginx.conf.default\n\n# user 管理用户 用户组\nwhoami\ngroups\n\n# worker_processes 占用内核的数量\nsysctl -n hw.ncpu\n\n# error_log 路径 模式\nmac 路径:/usr/local/var/log/nginx/error.log\ncentos 路径: /var/log/nginx/error.log\n模式类型 : debug/info/notice/warn/error/crit (越不详细)\n\n# pid 路径\nmac 路径:/usr/local/var/run/nginx.pid\ncentos 路径:/var/run/nginx.pid\n\n---------------main\n\n---------------events\n\n# worker_connections number\n若提示 worker_connections exceed open file resource limit: 256,可以在main的部分添加 worker_rlimit_nofile 2048;\n\n---------------events\n\n---------------http\nhttp {\n \t# 关闭错误页面的nginx版本数字，提高安全性\n    server_tokens off;\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    #access_log  logs/access.log  main;\n\n    #高效文件传输模式,是否调用sedfile函数输出文件,减少上下文切换,若下载等应用盘则off\n    sendfile        on;\n\n    #tcp_nopush     on;\n\n    #长连接超时时间\n    keepalive_timeout  65;\n\n    #send_timeout : 响应客户端超时的时间;\n\n    #启动gzip,为了减少网路传输\n    gzip on;\n    #允许压缩的页面的最小字节数,小于1k的可能越压越大\n    gzip_min_length 1k;\n    #数据流\n    gzip_buffers    4 16k;\n    #协议的版本,支持早期的不支持gzip的浏览器\n    gzip_http_version 1.0;\n    #压缩比,越小越快,越大越耗能;\n    gzip_comp_level 6;\n    #压缩的类型\n    gzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;\n    #响应头加上vary\n    gzip_vary on;\n\n    # http_proxy 设置\n    # 请求文件字节数的大小和缓存区\n    client_max_body_size   10m;\n    client_body_buffer_size   128k;\n\n    #proxy 时间控制\n    proxy_connect_timeout   75;\n    proxy_send_timeout   75;\n    proxy_read_timeout   75;\n\n    #proxy 缓存设置\n    proxy_buffer_size   4k;\n    proxy_buffers   4 32k;\n    proxy_busy_buffers_size   64k;\n\n    #proxy 临时文件大小\n    proxy_temp_file_write_size  64k;\n    \n    # 确认路径三 centos的路径在 /etc/nginx/\n    proxy_temp_path   /usr/local/etc/nginx/proxy_temp 1 2;\n    \n    # 引入其他的server\n\n    include servers/*;\n}\n---------------http\n\n # 关闭错误页面的nginx版本数字，提高安全性\n server_tokens off;\n\n\n\n```\n","slug":"nginx/nginx-开发理解","published":1,"updated":"2017-02-06T02:54:29.000Z","_id":"ciytg4m770059s10o2k6r7050","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>安装 epel</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">sudo yum install epel-release</div></pre></td></tr></table></figure>\n<blockquote>\n<p>安装 nginx</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">sudo yum install nginx</div></pre></td></tr></table></figure>\n<blockquote>\n<p>启动</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">sudo /etc/init.d/nginx start</div></pre></td></tr></table></figure>\n<blockquote>\n<p>查看 worker_process 数目</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">grep ^processor /proc/cpuinfo | wc -l</div></pre></td></tr></table></figure>\n<blockquote>\n<p>启动</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">nginx</div></pre></td></tr></table></figure>\n<blockquote>\n<p>重启</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">sudo nginx -s reload</div></pre></td></tr></table></figure>\n<blockquote>\n<p>删除</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">pkill nginx</div></pre></td></tr></table></figure>\n<blockquote>\n<p>安装依赖(默认目录)–&gt;<a href=\"http://nginx.org/en/download.html\" target=\"_blank\" rel=\"external\">http://nginx.org/en/download.html</a></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel</div></pre></td></tr></table></figure>\n<blockquote>\n<p>了解四个部分</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">main（全局设置）、server（主机设置）、upstream（上游服务器设置，主要为反向代理、负载均衡相关配置）和 location（URL匹配特定位置后的设置）</div></pre></td></tr></table></figure>\n<blockquote>\n<p>main</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">影响所有的配置</div></pre></td></tr></table></figure>\n<blockquote>\n<p>server </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">域名-IP-端口</div></pre></td></tr></table></figure>\n<blockquote>\n<p>upstream</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">反向代理和负载均衡</div></pre></td></tr></table></figure>\n<blockquote>\n<p>location</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">网页的配置</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">-------------main</div><div class=\"line\"># 查看配置文件是否正确</div><div class=\"line\">sudo nginx -t</div><div class=\"line\"></div><div class=\"line\"># 查看默认的配置</div><div class=\"line\">cat /usr/local/etc/nginx/nginx.conf.default</div><div class=\"line\"></div><div class=\"line\"># user 管理用户 用户组</div><div class=\"line\">whoami</div><div class=\"line\">groups</div><div class=\"line\"></div><div class=\"line\"># worker_processes 占用内核的数量</div><div class=\"line\">sysctl -n hw.ncpu</div><div class=\"line\"></div><div class=\"line\"># error_log 路径 模式</div><div class=\"line\">mac 路径:/usr/local/var/log/nginx/error.log</div><div class=\"line\">centos 路径: /var/log/nginx/error.log</div><div class=\"line\">模式类型 : debug/info/notice/warn/error/crit (越不详细)</div><div class=\"line\"></div><div class=\"line\"># pid 路径</div><div class=\"line\">mac 路径:/usr/local/var/run/nginx.pid</div><div class=\"line\">centos 路径:/var/run/nginx.pid</div><div class=\"line\"></div><div class=\"line\">---------------main</div><div class=\"line\"></div><div class=\"line\">---------------events</div><div class=\"line\"></div><div class=\"line\"># worker_connections number</div><div class=\"line\">若提示 worker_connections exceed open file resource limit: 256,可以在main的部分添加 worker_rlimit_nofile 2048;</div><div class=\"line\"></div><div class=\"line\">---------------events</div><div class=\"line\"></div><div class=\"line\">---------------http</div><div class=\"line\">http &#123;</div><div class=\"line\"> \t# 关闭错误页面的nginx版本数字，提高安全性</div><div class=\"line\">    server_tokens off;</div><div class=\"line\">    include       mime.types;</div><div class=\"line\">    default_type  application/octet-stream;</div><div class=\"line\"></div><div class=\"line\">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</div><div class=\"line\">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</div><div class=\"line\">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</div><div class=\"line\"></div><div class=\"line\">    #access_log  logs/access.log  main;</div><div class=\"line\"></div><div class=\"line\">    #高效文件传输模式,是否调用sedfile函数输出文件,减少上下文切换,若下载等应用盘则off</div><div class=\"line\">    sendfile        on;</div><div class=\"line\"></div><div class=\"line\">    #tcp_nopush     on;</div><div class=\"line\"></div><div class=\"line\">    #长连接超时时间</div><div class=\"line\">    keepalive_timeout  65;</div><div class=\"line\"></div><div class=\"line\">    #send_timeout : 响应客户端超时的时间;</div><div class=\"line\"></div><div class=\"line\">    #启动gzip,为了减少网路传输</div><div class=\"line\">    gzip on;</div><div class=\"line\">    #允许压缩的页面的最小字节数,小于1k的可能越压越大</div><div class=\"line\">    gzip_min_length 1k;</div><div class=\"line\">    #数据流</div><div class=\"line\">    gzip_buffers    4 16k;</div><div class=\"line\">    #协议的版本,支持早期的不支持gzip的浏览器</div><div class=\"line\">    gzip_http_version 1.0;</div><div class=\"line\">    #压缩比,越小越快,越大越耗能;</div><div class=\"line\">    gzip_comp_level 6;</div><div class=\"line\">    #压缩的类型</div><div class=\"line\">    gzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;</div><div class=\"line\">    #响应头加上vary</div><div class=\"line\">    gzip_vary on;</div><div class=\"line\"></div><div class=\"line\">    # http_proxy 设置</div><div class=\"line\">    # 请求文件字节数的大小和缓存区</div><div class=\"line\">    client_max_body_size   10m;</div><div class=\"line\">    client_body_buffer_size   128k;</div><div class=\"line\"></div><div class=\"line\">    #proxy 时间控制</div><div class=\"line\">    proxy_connect_timeout   75;</div><div class=\"line\">    proxy_send_timeout   75;</div><div class=\"line\">    proxy_read_timeout   75;</div><div class=\"line\"></div><div class=\"line\">    #proxy 缓存设置</div><div class=\"line\">    proxy_buffer_size   4k;</div><div class=\"line\">    proxy_buffers   4 32k;</div><div class=\"line\">    proxy_busy_buffers_size   64k;</div><div class=\"line\"></div><div class=\"line\">    #proxy 临时文件大小</div><div class=\"line\">    proxy_temp_file_write_size  64k;</div><div class=\"line\">    </div><div class=\"line\">    # 确认路径三 centos的路径在 /etc/nginx/</div><div class=\"line\">    proxy_temp_path   /usr/local/etc/nginx/proxy_temp 1 2;</div><div class=\"line\">    </div><div class=\"line\">    # 引入其他的server</div><div class=\"line\"></div><div class=\"line\">    include servers/*;</div><div class=\"line\">&#125;</div><div class=\"line\">---------------http</div><div class=\"line\"></div><div class=\"line\"> # 关闭错误页面的nginx版本数字，提高安全性</div><div class=\"line\"> server_tokens off;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>安装 epel</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">sudo yum install epel-release</div></pre></td></tr></table></figure>\n<blockquote>\n<p>安装 nginx</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">sudo yum install nginx</div></pre></td></tr></table></figure>\n<blockquote>\n<p>启动</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">sudo /etc/init.d/nginx start</div></pre></td></tr></table></figure>\n<blockquote>\n<p>查看 worker_process 数目</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">grep ^processor /proc/cpuinfo | wc -l</div></pre></td></tr></table></figure>\n<blockquote>\n<p>启动</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">nginx</div></pre></td></tr></table></figure>\n<blockquote>\n<p>重启</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">sudo nginx -s reload</div></pre></td></tr></table></figure>\n<blockquote>\n<p>删除</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">pkill nginx</div></pre></td></tr></table></figure>\n<blockquote>\n<p>安装依赖(默认目录)–&gt;<a href=\"http://nginx.org/en/download.html\">http://nginx.org/en/download.html</a></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel</div></pre></td></tr></table></figure>\n<blockquote>\n<p>了解四个部分</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">main（全局设置）、server（主机设置）、upstream（上游服务器设置，主要为反向代理、负载均衡相关配置）和 location（URL匹配特定位置后的设置）</div></pre></td></tr></table></figure>\n<blockquote>\n<p>main</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">影响所有的配置</div></pre></td></tr></table></figure>\n<blockquote>\n<p>server </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">域名-IP-端口</div></pre></td></tr></table></figure>\n<blockquote>\n<p>upstream</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">反向代理和负载均衡</div></pre></td></tr></table></figure>\n<blockquote>\n<p>location</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">网页的配置</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">-------------main</div><div class=\"line\"># 查看配置文件是否正确</div><div class=\"line\">sudo nginx -t</div><div class=\"line\"></div><div class=\"line\"># 查看默认的配置</div><div class=\"line\">cat /usr/local/etc/nginx/nginx.conf.default</div><div class=\"line\"></div><div class=\"line\"># user 管理用户 用户组</div><div class=\"line\">whoami</div><div class=\"line\">groups</div><div class=\"line\"></div><div class=\"line\"># worker_processes 占用内核的数量</div><div class=\"line\">sysctl -n hw.ncpu</div><div class=\"line\"></div><div class=\"line\"># error_log 路径 模式</div><div class=\"line\">mac 路径:/usr/local/var/log/nginx/error.log</div><div class=\"line\">centos 路径: /var/log/nginx/error.log</div><div class=\"line\">模式类型 : debug/info/notice/warn/error/crit (越不详细)</div><div class=\"line\"></div><div class=\"line\"># pid 路径</div><div class=\"line\">mac 路径:/usr/local/var/run/nginx.pid</div><div class=\"line\">centos 路径:/var/run/nginx.pid</div><div class=\"line\"></div><div class=\"line\">---------------main</div><div class=\"line\"></div><div class=\"line\">---------------events</div><div class=\"line\"></div><div class=\"line\"># worker_connections number</div><div class=\"line\">若提示 worker_connections exceed open file resource limit: 256,可以在main的部分添加 worker_rlimit_nofile 2048;</div><div class=\"line\"></div><div class=\"line\">---------------events</div><div class=\"line\"></div><div class=\"line\">---------------http</div><div class=\"line\">http &#123;</div><div class=\"line\"> \t# 关闭错误页面的nginx版本数字，提高安全性</div><div class=\"line\">    server_tokens off;</div><div class=\"line\">    include       mime.types;</div><div class=\"line\">    default_type  application/octet-stream;</div><div class=\"line\"></div><div class=\"line\">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</div><div class=\"line\">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</div><div class=\"line\">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</div><div class=\"line\"></div><div class=\"line\">    #access_log  logs/access.log  main;</div><div class=\"line\"></div><div class=\"line\">    #高效文件传输模式,是否调用sedfile函数输出文件,减少上下文切换,若下载等应用盘则off</div><div class=\"line\">    sendfile        on;</div><div class=\"line\"></div><div class=\"line\">    #tcp_nopush     on;</div><div class=\"line\"></div><div class=\"line\">    #长连接超时时间</div><div class=\"line\">    keepalive_timeout  65;</div><div class=\"line\"></div><div class=\"line\">    #send_timeout : 响应客户端超时的时间;</div><div class=\"line\"></div><div class=\"line\">    #启动gzip,为了减少网路传输</div><div class=\"line\">    gzip on;</div><div class=\"line\">    #允许压缩的页面的最小字节数,小于1k的可能越压越大</div><div class=\"line\">    gzip_min_length 1k;</div><div class=\"line\">    #数据流</div><div class=\"line\">    gzip_buffers    4 16k;</div><div class=\"line\">    #协议的版本,支持早期的不支持gzip的浏览器</div><div class=\"line\">    gzip_http_version 1.0;</div><div class=\"line\">    #压缩比,越小越快,越大越耗能;</div><div class=\"line\">    gzip_comp_level 6;</div><div class=\"line\">    #压缩的类型</div><div class=\"line\">    gzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;</div><div class=\"line\">    #响应头加上vary</div><div class=\"line\">    gzip_vary on;</div><div class=\"line\"></div><div class=\"line\">    # http_proxy 设置</div><div class=\"line\">    # 请求文件字节数的大小和缓存区</div><div class=\"line\">    client_max_body_size   10m;</div><div class=\"line\">    client_body_buffer_size   128k;</div><div class=\"line\"></div><div class=\"line\">    #proxy 时间控制</div><div class=\"line\">    proxy_connect_timeout   75;</div><div class=\"line\">    proxy_send_timeout   75;</div><div class=\"line\">    proxy_read_timeout   75;</div><div class=\"line\"></div><div class=\"line\">    #proxy 缓存设置</div><div class=\"line\">    proxy_buffer_size   4k;</div><div class=\"line\">    proxy_buffers   4 32k;</div><div class=\"line\">    proxy_busy_buffers_size   64k;</div><div class=\"line\"></div><div class=\"line\">    #proxy 临时文件大小</div><div class=\"line\">    proxy_temp_file_write_size  64k;</div><div class=\"line\">    </div><div class=\"line\">    # 确认路径三 centos的路径在 /etc/nginx/</div><div class=\"line\">    proxy_temp_path   /usr/local/etc/nginx/proxy_temp 1 2;</div><div class=\"line\">    </div><div class=\"line\">    # 引入其他的server</div><div class=\"line\"></div><div class=\"line\">    include servers/*;</div><div class=\"line\">&#125;</div><div class=\"line\">---------------http</div><div class=\"line\"></div><div class=\"line\"> # 关闭错误页面的nginx版本数字，提高安全性</div><div class=\"line\"> server_tokens off;</div></pre></td></tr></table></figure>\n"},{"title":"alfred-workflows-多风格的编码变量-插件","date":"2016-09-10T16:00:00.000Z","_content":"\n昨晚有空写了个 alfred workflows JS 版...\n\nhttps://github.com/xudaolong/CodeVar\n\n# CodeVar \n开发基于 `Javascript`、 `alfy`、`有道翻译api`;\n\n# 使用\n下载workflows文件并运行;\n接下来的版本会提供`词根`、`其他变量风格`进行更新;如果有时间的话...谢谢使用...\n\n# 效果 \n> 小驼峰命名法:xt\n\n![](http://upload-images.jianshu.io/upload_images/80378-f37759d79bcc12af.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 大驼峰命名法:dt\n\n![](http://upload-images.jianshu.io/upload_images/80378-5235d82c156a0d93.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 下划线命名法:xh\n\n![](http://upload-images.jianshu.io/upload_images/80378-6a166f53520b2376.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 常量命名法:cl\n\n![](http://upload-images.jianshu.io/upload_images/80378-e974402e1d657deb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n","source":"_posts/OSX/alfred-workflows-多风格的编码变量-插件---.md","raw":"---\ntitle: alfred-workflows-多风格的编码变量-插件\ndate: 2016-09-11\ncategories: \n- osx\n---\n\n昨晚有空写了个 alfred workflows JS 版...\n\nhttps://github.com/xudaolong/CodeVar\n\n# CodeVar \n开发基于 `Javascript`、 `alfy`、`有道翻译api`;\n\n# 使用\n下载workflows文件并运行;\n接下来的版本会提供`词根`、`其他变量风格`进行更新;如果有时间的话...谢谢使用...\n\n# 效果 \n> 小驼峰命名法:xt\n\n![](http://upload-images.jianshu.io/upload_images/80378-f37759d79bcc12af.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 大驼峰命名法:dt\n\n![](http://upload-images.jianshu.io/upload_images/80378-5235d82c156a0d93.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 下划线命名法:xh\n\n![](http://upload-images.jianshu.io/upload_images/80378-6a166f53520b2376.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 常量命名法:cl\n\n![](http://upload-images.jianshu.io/upload_images/80378-e974402e1d657deb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n","slug":"OSX/alfred-workflows-多风格的编码变量-插件---","published":1,"updated":"2017-02-06T03:01:02.000Z","_id":"ciytg4rtq005es10o7jt7lrww","comments":1,"layout":"post","photos":[],"link":"","content":"<p>昨晚有空写了个 alfred workflows JS 版…</p>\n<p><a href=\"https://github.com/xudaolong/CodeVar\" target=\"_blank\" rel=\"external\">https://github.com/xudaolong/CodeVar</a></p>\n<h1 id=\"CodeVar\"><a href=\"#CodeVar\" class=\"headerlink\" title=\"CodeVar\"></a>CodeVar</h1><p>开发基于 <code>Javascript</code>、 <code>alfy</code>、<code>有道翻译api</code>;</p>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>下载workflows文件并运行;<br>接下来的版本会提供<code>词根</code>、<code>其他变量风格</code>进行更新;如果有时间的话…谢谢使用…</p>\n<h1 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h1><blockquote>\n<p>小驼峰命名法:xt</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-f37759d79bcc12af.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<blockquote>\n<p>大驼峰命名法:dt</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-5235d82c156a0d93.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<blockquote>\n<p>下划线命名法:xh</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-6a166f53520b2376.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<blockquote>\n<p>常量命名法:cl</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-e974402e1d657deb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n","excerpt":"","more":"<p>昨晚有空写了个 alfred workflows JS 版…</p>\n<p><a href=\"https://github.com/xudaolong/CodeVar\">https://github.com/xudaolong/CodeVar</a></p>\n<h1 id=\"CodeVar\"><a href=\"#CodeVar\" class=\"headerlink\" title=\"CodeVar\"></a>CodeVar</h1><p>开发基于 <code>Javascript</code>、 <code>alfy</code>、<code>有道翻译api</code>;</p>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>下载workflows文件并运行;<br>接下来的版本会提供<code>词根</code>、<code>其他变量风格</code>进行更新;如果有时间的话…谢谢使用…</p>\n<h1 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h1><blockquote>\n<p>小驼峰命名法:xt</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-f37759d79bcc12af.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<blockquote>\n<p>大驼峰命名法:dt</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-5235d82c156a0d93.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<blockquote>\n<p>下划线命名法:xh</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-6a166f53520b2376.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<blockquote>\n<p>常量命名法:cl</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-e974402e1d657deb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n"},{"title":"mac-http-proxy","date":"2016-09-10T16:00:00.000Z","_content":"\n\n==> Pouring privoxy-3.0.24.el_capitan.bottle.1.tar.gz\n==> Caveats\nTo have launchd start privoxy now and restart at login:\n  brew services start privoxy\nOr, if you don't want/need a background service you can just run:\n  privoxy /usr/local/etc/privoxy/config\n==> Summary\n🍺  /usr/local/Cellar/privoxy/3.0.24: 51 files, 1.6M\n\n启动 http代理\n\n/usr/local/Cellar/privoxy/3.0.24/sbin/privoxy /usr/local/etc/privoxy/config \n\n\n# 测试是否抵达地址\n\ncurl --connect-timeout 2 -x 127.0.0.1:8118 http://www.baidu.com\n\n\n\n\n","source":"_posts/OSX/mac-http-proxy.md","raw":"---\ntitle: mac-http-proxy\ndate: 2016-09-11\ncategories: \n- osx\n---\n\n\n==> Pouring privoxy-3.0.24.el_capitan.bottle.1.tar.gz\n==> Caveats\nTo have launchd start privoxy now and restart at login:\n  brew services start privoxy\nOr, if you don't want/need a background service you can just run:\n  privoxy /usr/local/etc/privoxy/config\n==> Summary\n🍺  /usr/local/Cellar/privoxy/3.0.24: 51 files, 1.6M\n\n启动 http代理\n\n/usr/local/Cellar/privoxy/3.0.24/sbin/privoxy /usr/local/etc/privoxy/config \n\n\n# 测试是否抵达地址\n\ncurl --connect-timeout 2 -x 127.0.0.1:8118 http://www.baidu.com\n\n\n\n\n","slug":"OSX/mac-http-proxy","published":1,"updated":"2017-02-06T03:00:56.000Z","_id":"ciytg4rtr005fs10oe6ameax6","comments":1,"layout":"post","photos":[],"link":"","content":"<p>==&gt; Pouring privoxy-3.0.24.el_capitan.bottle.1.tar.gz<br>==&gt; Caveats<br>To have launchd start privoxy now and restart at login:<br>  brew services start privoxy<br>Or, if you don’t want/need a background service you can just run:<br>  privoxy /usr/local/etc/privoxy/config<br>==&gt; Summary<br>🍺  /usr/local/Cellar/privoxy/3.0.24: 51 files, 1.6M</p>\n<p>启动 http代理</p>\n<p>/usr/local/Cellar/privoxy/3.0.24/sbin/privoxy /usr/local/etc/privoxy/config </p>\n<h1 id=\"测试是否抵达地址\"><a href=\"#测试是否抵达地址\" class=\"headerlink\" title=\"测试是否抵达地址\"></a>测试是否抵达地址</h1><p>curl –connect-timeout 2 -x 127.0.0.1:8118 <a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"external\">http://www.baidu.com</a></p>\n","excerpt":"","more":"<p>==&gt; Pouring privoxy-3.0.24.el_capitan.bottle.1.tar.gz<br>==&gt; Caveats<br>To have launchd start privoxy now and restart at login:<br>  brew services start privoxy<br>Or, if you don’t want/need a background service you can just run:<br>  privoxy /usr/local/etc/privoxy/config<br>==&gt; Summary<br>🍺  /usr/local/Cellar/privoxy/3.0.24: 51 files, 1.6M</p>\n<p>启动 http代理</p>\n<p>/usr/local/Cellar/privoxy/3.0.24/sbin/privoxy /usr/local/etc/privoxy/config </p>\n<h1 id=\"测试是否抵达地址\"><a href=\"#测试是否抵达地址\" class=\"headerlink\" title=\"测试是否抵达地址\"></a>测试是否抵达地址</h1><p>curl –connect-timeout 2 -x 127.0.0.1:8118 <a href=\"http://www.baidu.com\">http://www.baidu.com</a></p>\n"},{"title":"brew-java-安装","date":"2016-09-10T16:00:00.000Z","_content":"\n```\n\nbrew update\nbrew tap caskroom/cask\nbrew install brew-cask\nbrew cask info java7\n\nbrew cask install java7\n\n```\n","source":"_posts/OSX/brew-java-安装.md","raw":"---\ntitle: brew-java-安装\ndate: 2016-09-11\ncategories: \n- osx\n---\n\n```\n\nbrew update\nbrew tap caskroom/cask\nbrew install brew-cask\nbrew cask info java7\n\nbrew cask install java7\n\n```\n","slug":"OSX/brew-java-安装","published":1,"updated":"2017-02-06T03:00:56.000Z","_id":"ciytg4rtr005gs10og7437z8a","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">brew update</div><div class=\"line\">brew tap caskroom/cask</div><div class=\"line\">brew install brew-cask</div><div class=\"line\">brew cask info java7</div><div class=\"line\"></div><div class=\"line\">brew cask install java7</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">brew update</div><div class=\"line\">brew tap caskroom/cask</div><div class=\"line\">brew install brew-cask</div><div class=\"line\">brew cask info java7</div><div class=\"line\"></div><div class=\"line\">brew cask install java7</div></pre></td></tr></table></figure>\n"},{"title":"mac-切换root用户","date":"2016-09-10T16:00:00.000Z","_content":"\n\n# sudo -i\n","source":"_posts/OSX/mac-切换root用户.md","raw":"---\ntitle: mac-切换root用户\ndate: 2016-09-11\ncategories: \n- osx\n---\n\n\n# sudo -i\n","slug":"OSX/mac-切换root用户","published":1,"updated":"2017-02-06T03:00:46.000Z","_id":"ciytg4rts005hs10ohs9dxs5f","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"sudo-i\"><a href=\"#sudo-i\" class=\"headerlink\" title=\"sudo -i\"></a>sudo -i</h1>","excerpt":"","more":"<h1 id=\"sudo-i\"><a href=\"#sudo-i\" class=\"headerlink\" title=\"sudo -i\"></a>sudo -i</h1>"},{"title":"mac-日常遇到的命令记录","date":"2016-09-10T16:00:00.000Z","_content":"\n\n> mac 查看进程的端口号\n\n``` ps aux | grep process_name ```\n\n> mac 路径记录\n\n``` \n\nbrew 安装路径 : /usr/local/Cellar/;\nbrew 软连接 : /usr/local/;\nmac 开机启动文档: ~/Library/LaunchAgents;\n\n```\n\n> mac 删除非空文件\n\n```\n\nsudo rm -rf node_modules/\nsudo rmdir -p node_modules/\n\n```\n","source":"_posts/OSX/mac-日常遇到的命令记录.md","raw":"---\ntitle: mac-日常遇到的命令记录\ndate: 2016-09-11\ncategories: \n- osx\n---\n\n\n> mac 查看进程的端口号\n\n``` ps aux | grep process_name ```\n\n> mac 路径记录\n\n``` \n\nbrew 安装路径 : /usr/local/Cellar/;\nbrew 软连接 : /usr/local/;\nmac 开机启动文档: ~/Library/LaunchAgents;\n\n```\n\n> mac 删除非空文件\n\n```\n\nsudo rm -rf node_modules/\nsudo rmdir -p node_modules/\n\n```\n","slug":"OSX/mac-日常遇到的命令记录","published":1,"updated":"2017-02-06T03:00:28.000Z","_id":"ciytg4rtt005is10of3e1ejzl","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>mac 查看进程的端口号</p>\n</blockquote>\n<figure class=\"highlight ps\"><figcaption><span>aux | grep process_name ```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&gt; mac 路径记录</div><div class=\"line\"></div><div class=\"line\">``` </div><div class=\"line\"></div><div class=\"line\">brew 安装路径 : /usr/local/Cellar/;</div><div class=\"line\">brew 软连接 : /usr/local/;</div><div class=\"line\">mac 开机启动文档: ~/Library/LaunchAgents;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>mac 删除非空文件</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">sudo rm -rf node_modules/</div><div class=\"line\">sudo rmdir -p node_modules/</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>mac 查看进程的端口号</p>\n</blockquote>\n<figure class=\"highlight ps\"><figcaption><span>aux | grep process_name ```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&gt; mac 路径记录</div><div class=\"line\"></div><div class=\"line\">``` </div><div class=\"line\"></div><div class=\"line\">brew 安装路径 : /usr/local/Cellar/;</div><div class=\"line\">brew 软连接 : /usr/local/;</div><div class=\"line\">mac 开机启动文档: ~/Library/LaunchAgents;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>mac 删除非空文件</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">sudo rm -rf node_modules/</div><div class=\"line\">sudo rmdir -p node_modules/</div></pre></td></tr></table></figure>\n"},{"title":"mac-终端-用-proxychains-ng-走-shadowsocks","date":"2016-09-10T16:00:00.000Z","_content":"\n\n> 安装 proxychains-ng \n\n```\nbrew install proxychains-ng\n```\n\n> 配置 /usr/local/etc/proxychains.conf\n\n```\nsocks5  127.0.0.1 1080\n```\n","source":"_posts/OSX/mac-终端-用-proxychains-ng-走-shadowsocks.md","raw":"---\ntitle: mac-终端-用-proxychains-ng-走-shadowsocks\ndate: 2016-09-11\ncategories: \n- osx\n---\n\n\n> 安装 proxychains-ng \n\n```\nbrew install proxychains-ng\n```\n\n> 配置 /usr/local/etc/proxychains.conf\n\n```\nsocks5  127.0.0.1 1080\n```\n","slug":"OSX/mac-终端-用-proxychains-ng-走-shadowsocks","published":1,"updated":"2017-02-06T03:00:17.000Z","_id":"ciytg4rtt005js10oo9dpzklv","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>安装 proxychains-ng </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install proxychains-ng</div></pre></td></tr></table></figure>\n<blockquote>\n<p>配置 /usr/local/etc/proxychains.conf</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">socks5  127.0.0.1 1080</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>安装 proxychains-ng </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install proxychains-ng</div></pre></td></tr></table></figure>\n<blockquote>\n<p>配置 /usr/local/etc/proxychains.conf</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">socks5  127.0.0.1 1080</div></pre></td></tr></table></figure>\n"},{"title":"mac-系统文件夹的含义","date":"2016-09-10T16:00:00.000Z","_content":"\n\n1)     bin---------储存有基本的UNIX指令\n2)     sbin--------UNIX 系统指令的储存地方, 是比较进阶的指令\n3)     etc---------系统设定档桉储存地方\n4)     var---------改动频繁的档桉, 都置放于此, 例如各log档桉\n5)     tmp--------系统的暂存档\n6)     usr---------UNIX的使用者专用档桉夹\n","source":"_posts/OSX/mac-系统文件夹的含义.md","raw":"---\ntitle: mac-系统文件夹的含义\ndate: 2016-09-11\ncategories: \n- osx\n---\n\n\n1)     bin---------储存有基本的UNIX指令\n2)     sbin--------UNIX 系统指令的储存地方, 是比较进阶的指令\n3)     etc---------系统设定档桉储存地方\n4)     var---------改动频繁的档桉, 都置放于此, 例如各log档桉\n5)     tmp--------系统的暂存档\n6)     usr---------UNIX的使用者专用档桉夹\n","slug":"OSX/mac-系统文件夹的含义","published":1,"updated":"2017-02-06T03:00:23.000Z","_id":"ciytg4rtw005ks10on7p2qz7j","comments":1,"layout":"post","photos":[],"link":"","content":"<p>1)     bin———储存有基本的UNIX指令<br>2)     sbin——–UNIX 系统指令的储存地方, 是比较进阶的指令<br>3)     etc———系统设定档桉储存地方<br>4)     var———改动频繁的档桉, 都置放于此, 例如各log档桉<br>5)     tmp——–系统的暂存档<br>6)     usr———UNIX的使用者专用档桉夹</p>\n","excerpt":"","more":"<p>1)     bin———储存有基本的UNIX指令<br>2)     sbin——–UNIX 系统指令的储存地方, 是比较进阶的指令<br>3)     etc———系统设定档桉储存地方<br>4)     var———改动频繁的档桉, 都置放于此, 例如各log档桉<br>5)     tmp——–系统的暂存档<br>6)     usr———UNIX的使用者专用档桉夹</p>\n"},{"title":"mac-切换到子用户","date":"2016-09-10T16:00:00.000Z","_content":"\n\n# su -l username\n","source":"_posts/OSX/mac-切换到子用户.md","raw":"---\ntitle: mac-切换到子用户\ndate: 2016-09-11\ncategories: \n- osx\n---\n\n\n# su -l username\n","slug":"OSX/mac-切换到子用户","published":1,"updated":"2017-02-06T03:00:39.000Z","_id":"ciytg4ru1005ls10onhf5o25z","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"su-l-username\"><a href=\"#su-l-username\" class=\"headerlink\" title=\"su -l username\"></a>su -l username</h1>","excerpt":"","more":"<h1 id=\"su-l-username\"><a href=\"#su-l-username\" class=\"headerlink\" title=\"su -l username\"></a>su -l username</h1>"},{"title":"mac-访问-Windows-共享文件夹","date":"2016-09-10T16:00:00.000Z","_content":"\n\nsmb://Windows主机的IP地址\n","source":"_posts/OSX/mac-访问-Windows-共享文件夹.md","raw":"---\ntitle: mac-访问-Windows-共享文件夹\ndate: 2016-09-11\ncategories: \n- osx\n---\n\n\nsmb://Windows主机的IP地址\n","slug":"OSX/mac-访问-Windows-共享文件夹","published":1,"updated":"2017-02-06T03:00:12.000Z","_id":"ciytg4ru3005ms10o5st8mucv","comments":1,"layout":"post","photos":[],"link":"","content":"<p>smb://Windows主机的IP地址</p>\n","excerpt":"","more":"<p>smb://Windows主机的IP地址</p>\n"},{"title":"mongodb-开机启动","date":"2016-09-10T16:00:00.000Z","_content":"\n\nbrew services start mongodb\n","source":"_posts/OSX/mongodb-开机启动.md","raw":"---\ntitle: mongodb-开机启动\ndate: 2016-09-11\ncategories: \n- osx\n---\n\n\nbrew services start mongodb\n","slug":"OSX/mongodb-开机启动","published":1,"updated":"2017-02-06T03:00:08.000Z","_id":"ciytg4ru6005ns10o21w4kdio","comments":1,"layout":"post","photos":[],"link":"","content":"<p>brew services start mongodb</p>\n","excerpt":"","more":"<p>brew services start mongodb</p>\n"},{"title":"rn-mac-android-开发日常记录","date":"2016-09-10T16:00:00.000Z","_content":"\n> react-native 调试参考\n\nhttp://blog.csdn.net/quanqinyang/article/details/52215652\n\n>知识点\n\n1.React Native中的尺寸都是无单位的，表示的是与设备像素密度无关的逻辑像素点。\n```\n<View>\n\t<View style={{width: 50, height: 50, backgroundColor: 'powderblue'}} />\n\t<View style={{width: 100, height: 100, backgroundColor: 'skyblue'}} />\n\t<View style={{width: 150, height: 150, backgroundColor: 'steelblue'}}/>\n</View>\n```\n\n2.使用``flex: 1``来指定某个组件扩张以撑满所有剩余的空间。如果有多个并列的子组件使用了``flex: 1``，则这些子组件会``平分``父容器中剩余的空间。如果这些并列的子组件的flex值不一样，则谁的值更大，谁占据剩余空间的比例就更大（即占据剩余空间的比等于并列组件间flex值的比）默认: ``横向并列``\n```\n<View style={{flex: 1}}>\n\t<View style={{flex: 1, backgroundColor: 'powderblue'}}/>\n\t<View style={{flex: 2, backgroundColor: 'skyblue'}}/>\n\t<View style={{flex: 3, backgroundColor: 'steelblue'}}/>\n</View>\n```\n\n![](http://upload-images.jianshu.io/upload_images/80378-3c707360d005ae8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n3.关于Flexbox\n``flexDirection``、``alignItems``和``justifyContent``:\nReact Native中的Flexbox的工作原理和web上的CSS基本一致，当然也存在少许差异。首先是默认值不同：**flexDirection**的默认值是column而不是row，**alignItems**的默认值是stretch而不是flex - start，以及flex只能指定一个数字值。\n\n\n![flexDirection](http://upload-images.jianshu.io/upload_images/80378-8854621e184fde69.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![flexWarp](http://upload-images.jianshu.io/upload_images/80378-3e01d184f940c2d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![justifyContent](http://upload-images.jianshu.io/upload_images/80378-393e92ff31c22867.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![alignItems](http://upload-images.jianshu.io/upload_images/80378-8bba57f0041fae31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![alignContent](http://upload-images.jianshu.io/upload_images/80378-1b41103e2f83d4b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n具体的样式列表:\nhttp://reactnative.cn/docs/0.37/layout-props.html\n\n> 双数据的绑定:主要解决的是该变量增加和删除带来的重复地对相关组件的渲染的影响.\n\n> 关于TextInput:\n\n``onChangeText``、``onSubmitEditing``、``onSubmitEditing``...\n更多查看:http://reactnative.cn/docs/0.37/textinput.html\n\n> android 模拟器 获取不了网络/没有wifi\n\n```\nadb shell\ngetprop\n```\n\n然后发现:模拟器的DNS地址\n![](http://upload-images.jianshu.io/upload_images/80378-22de6a6484530f18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](http://upload-images.jianshu.io/upload_images/80378-44d740474d8e6ad3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n进行设置:**在模拟器的Setting->无线网络设置里，把“启用数据流量”勾选上，让模拟器的TopTar上出现3G图标**,另外在重启模拟器后设置的property会丢失，就需要重新设置一遍，可以使用下面的方法解决：\n\n找到你的SDK目录，里面有个system-images文件夹，这里保存着系统镜像文件，用文本编辑器打开里面的build.prop文件，在里面加上**net.dns1=DNS**\n\n```\n/Users/macbook/Library/Android/sdk/system-images/android-23/google_apis/x86\n```\n","source":"_posts/react-native/rn-mac-android-开发日常记录.md","raw":"---\ntitle: rn-mac-android-开发日常记录\ndate: 2016-09-11\ncategories: \n- react-native\n---\n\n> react-native 调试参考\n\nhttp://blog.csdn.net/quanqinyang/article/details/52215652\n\n>知识点\n\n1.React Native中的尺寸都是无单位的，表示的是与设备像素密度无关的逻辑像素点。\n```\n<View>\n\t<View style={{width: 50, height: 50, backgroundColor: 'powderblue'}} />\n\t<View style={{width: 100, height: 100, backgroundColor: 'skyblue'}} />\n\t<View style={{width: 150, height: 150, backgroundColor: 'steelblue'}}/>\n</View>\n```\n\n2.使用``flex: 1``来指定某个组件扩张以撑满所有剩余的空间。如果有多个并列的子组件使用了``flex: 1``，则这些子组件会``平分``父容器中剩余的空间。如果这些并列的子组件的flex值不一样，则谁的值更大，谁占据剩余空间的比例就更大（即占据剩余空间的比等于并列组件间flex值的比）默认: ``横向并列``\n```\n<View style={{flex: 1}}>\n\t<View style={{flex: 1, backgroundColor: 'powderblue'}}/>\n\t<View style={{flex: 2, backgroundColor: 'skyblue'}}/>\n\t<View style={{flex: 3, backgroundColor: 'steelblue'}}/>\n</View>\n```\n\n![](http://upload-images.jianshu.io/upload_images/80378-3c707360d005ae8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n3.关于Flexbox\n``flexDirection``、``alignItems``和``justifyContent``:\nReact Native中的Flexbox的工作原理和web上的CSS基本一致，当然也存在少许差异。首先是默认值不同：**flexDirection**的默认值是column而不是row，**alignItems**的默认值是stretch而不是flex - start，以及flex只能指定一个数字值。\n\n\n![flexDirection](http://upload-images.jianshu.io/upload_images/80378-8854621e184fde69.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![flexWarp](http://upload-images.jianshu.io/upload_images/80378-3e01d184f940c2d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![justifyContent](http://upload-images.jianshu.io/upload_images/80378-393e92ff31c22867.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![alignItems](http://upload-images.jianshu.io/upload_images/80378-8bba57f0041fae31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![alignContent](http://upload-images.jianshu.io/upload_images/80378-1b41103e2f83d4b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n具体的样式列表:\nhttp://reactnative.cn/docs/0.37/layout-props.html\n\n> 双数据的绑定:主要解决的是该变量增加和删除带来的重复地对相关组件的渲染的影响.\n\n> 关于TextInput:\n\n``onChangeText``、``onSubmitEditing``、``onSubmitEditing``...\n更多查看:http://reactnative.cn/docs/0.37/textinput.html\n\n> android 模拟器 获取不了网络/没有wifi\n\n```\nadb shell\ngetprop\n```\n\n然后发现:模拟器的DNS地址\n![](http://upload-images.jianshu.io/upload_images/80378-22de6a6484530f18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](http://upload-images.jianshu.io/upload_images/80378-44d740474d8e6ad3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n进行设置:**在模拟器的Setting->无线网络设置里，把“启用数据流量”勾选上，让模拟器的TopTar上出现3G图标**,另外在重启模拟器后设置的property会丢失，就需要重新设置一遍，可以使用下面的方法解决：\n\n找到你的SDK目录，里面有个system-images文件夹，这里保存着系统镜像文件，用文本编辑器打开里面的build.prop文件，在里面加上**net.dns1=DNS**\n\n```\n/Users/macbook/Library/Android/sdk/system-images/android-23/google_apis/x86\n```\n","slug":"react-native/rn-mac-android-开发日常记录","published":1,"updated":"2017-02-06T03:01:48.000Z","_id":"ciytg4u3s005os10o15p18ztx","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>react-native 调试参考</p>\n</blockquote>\n<p><a href=\"http://blog.csdn.net/quanqinyang/article/details/52215652\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/quanqinyang/article/details/52215652</a></p>\n<blockquote>\n<p>知识点</p>\n</blockquote>\n<p>1.React Native中的尺寸都是无单位的，表示的是与设备像素密度无关的逻辑像素点。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;View&gt;</div><div class=\"line\">\t&lt;View style=&#123;&#123;width: 50, height: 50, backgroundColor: &apos;powderblue&apos;&#125;&#125; /&gt;</div><div class=\"line\">\t&lt;View style=&#123;&#123;width: 100, height: 100, backgroundColor: &apos;skyblue&apos;&#125;&#125; /&gt;</div><div class=\"line\">\t&lt;View style=&#123;&#123;width: 150, height: 150, backgroundColor: &apos;steelblue&apos;&#125;&#125;/&gt;</div><div class=\"line\">&lt;/View&gt;</div></pre></td></tr></table></figure></p>\n<p>2.使用<code>flex: 1</code>来指定某个组件扩张以撑满所有剩余的空间。如果有多个并列的子组件使用了<code>flex: 1</code>，则这些子组件会<code>平分</code>父容器中剩余的空间。如果这些并列的子组件的flex值不一样，则谁的值更大，谁占据剩余空间的比例就更大（即占据剩余空间的比等于并列组件间flex值的比）默认: <code>横向并列</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;View style=&#123;&#123;flex: 1&#125;&#125;&gt;</div><div class=\"line\">\t&lt;View style=&#123;&#123;flex: 1, backgroundColor: &apos;powderblue&apos;&#125;&#125;/&gt;</div><div class=\"line\">\t&lt;View style=&#123;&#123;flex: 2, backgroundColor: &apos;skyblue&apos;&#125;&#125;/&gt;</div><div class=\"line\">\t&lt;View style=&#123;&#123;flex: 3, backgroundColor: &apos;steelblue&apos;&#125;&#125;/&gt;</div><div class=\"line\">&lt;/View&gt;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-3c707360d005ae8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>3.关于Flexbox<br><code>flexDirection</code>、<code>alignItems</code>和<code>justifyContent</code>:<br>React Native中的Flexbox的工作原理和web上的CSS基本一致，当然也存在少许差异。首先是默认值不同：<strong>flexDirection</strong>的默认值是column而不是row，<strong>alignItems</strong>的默认值是stretch而不是flex - start，以及flex只能指定一个数字值。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-8854621e184fde69.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"flexDirection\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-3e01d184f940c2d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"flexWarp\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-393e92ff31c22867.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"justifyContent\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-8bba57f0041fae31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"alignItems\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-1b41103e2f83d4b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"alignContent\"></p>\n<p>具体的样式列表:<br><a href=\"http://reactnative.cn/docs/0.37/layout-props.html\" target=\"_blank\" rel=\"external\">http://reactnative.cn/docs/0.37/layout-props.html</a></p>\n<blockquote>\n<p>双数据的绑定:主要解决的是该变量增加和删除带来的重复地对相关组件的渲染的影响.</p>\n<p>关于TextInput:</p>\n</blockquote>\n<p><code>onChangeText</code>、<code>onSubmitEditing</code>、<code>onSubmitEditing</code>…<br>更多查看:<a href=\"http://reactnative.cn/docs/0.37/textinput.html\" target=\"_blank\" rel=\"external\">http://reactnative.cn/docs/0.37/textinput.html</a></p>\n<blockquote>\n<p>android 模拟器 获取不了网络/没有wifi</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell</div><div class=\"line\">getprop</div></pre></td></tr></table></figure>\n<p>然后发现:模拟器的DNS地址<br><img src=\"http://upload-images.jianshu.io/upload_images/80378-22de6a6484530f18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-44d740474d8e6ad3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>进行设置:<strong>在模拟器的Setting-&gt;无线网络设置里，把“启用数据流量”勾选上，让模拟器的TopTar上出现3G图标</strong>,另外在重启模拟器后设置的property会丢失，就需要重新设置一遍，可以使用下面的方法解决：</p>\n<p>找到你的SDK目录，里面有个system-images文件夹，这里保存着系统镜像文件，用文本编辑器打开里面的build.prop文件，在里面加上<strong>net.dns1=DNS</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/Users/macbook/Library/Android/sdk/system-images/android-23/google_apis/x86</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>react-native 调试参考</p>\n</blockquote>\n<p><a href=\"http://blog.csdn.net/quanqinyang/article/details/52215652\">http://blog.csdn.net/quanqinyang/article/details/52215652</a></p>\n<blockquote>\n<p>知识点</p>\n</blockquote>\n<p>1.React Native中的尺寸都是无单位的，表示的是与设备像素密度无关的逻辑像素点。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;View&gt;</div><div class=\"line\">\t&lt;View style=&#123;&#123;width: 50, height: 50, backgroundColor: &apos;powderblue&apos;&#125;&#125; /&gt;</div><div class=\"line\">\t&lt;View style=&#123;&#123;width: 100, height: 100, backgroundColor: &apos;skyblue&apos;&#125;&#125; /&gt;</div><div class=\"line\">\t&lt;View style=&#123;&#123;width: 150, height: 150, backgroundColor: &apos;steelblue&apos;&#125;&#125;/&gt;</div><div class=\"line\">&lt;/View&gt;</div></pre></td></tr></table></figure></p>\n<p>2.使用<code>flex: 1</code>来指定某个组件扩张以撑满所有剩余的空间。如果有多个并列的子组件使用了<code>flex: 1</code>，则这些子组件会<code>平分</code>父容器中剩余的空间。如果这些并列的子组件的flex值不一样，则谁的值更大，谁占据剩余空间的比例就更大（即占据剩余空间的比等于并列组件间flex值的比）默认: <code>横向并列</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;View style=&#123;&#123;flex: 1&#125;&#125;&gt;</div><div class=\"line\">\t&lt;View style=&#123;&#123;flex: 1, backgroundColor: &apos;powderblue&apos;&#125;&#125;/&gt;</div><div class=\"line\">\t&lt;View style=&#123;&#123;flex: 2, backgroundColor: &apos;skyblue&apos;&#125;&#125;/&gt;</div><div class=\"line\">\t&lt;View style=&#123;&#123;flex: 3, backgroundColor: &apos;steelblue&apos;&#125;&#125;/&gt;</div><div class=\"line\">&lt;/View&gt;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-3c707360d005ae8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>3.关于Flexbox<br><code>flexDirection</code>、<code>alignItems</code>和<code>justifyContent</code>:<br>React Native中的Flexbox的工作原理和web上的CSS基本一致，当然也存在少许差异。首先是默认值不同：<strong>flexDirection</strong>的默认值是column而不是row，<strong>alignItems</strong>的默认值是stretch而不是flex - start，以及flex只能指定一个数字值。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-8854621e184fde69.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"flexDirection\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-3e01d184f940c2d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"flexWarp\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-393e92ff31c22867.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"justifyContent\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-8bba57f0041fae31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"alignItems\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-1b41103e2f83d4b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"alignContent\"></p>\n<p>具体的样式列表:<br><a href=\"http://reactnative.cn/docs/0.37/layout-props.html\">http://reactnative.cn/docs/0.37/layout-props.html</a></p>\n<blockquote>\n<p>双数据的绑定:主要解决的是该变量增加和删除带来的重复地对相关组件的渲染的影响.</p>\n<p>关于TextInput:</p>\n</blockquote>\n<p><code>onChangeText</code>、<code>onSubmitEditing</code>、<code>onSubmitEditing</code>…<br>更多查看:<a href=\"http://reactnative.cn/docs/0.37/textinput.html\">http://reactnative.cn/docs/0.37/textinput.html</a></p>\n<blockquote>\n<p>android 模拟器 获取不了网络/没有wifi</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell</div><div class=\"line\">getprop</div></pre></td></tr></table></figure>\n<p>然后发现:模拟器的DNS地址<br><img src=\"http://upload-images.jianshu.io/upload_images/80378-22de6a6484530f18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-44d740474d8e6ad3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>进行设置:<strong>在模拟器的Setting-&gt;无线网络设置里，把“启用数据流量”勾选上，让模拟器的TopTar上出现3G图标</strong>,另外在重启模拟器后设置的property会丢失，就需要重新设置一遍，可以使用下面的方法解决：</p>\n<p>找到你的SDK目录，里面有个system-images文件夹，这里保存着系统镜像文件，用文本编辑器打开里面的build.prop文件，在里面加上<strong>net.dns1=DNS</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/Users/macbook/Library/Android/sdk/system-images/android-23/google_apis/x86</div></pre></td></tr></table></figure>\n"},{"title":"rn-mac-android-开发环境部署","date":"2016-09-10T16:00:00.000Z","_content":"\n> 参考资源\n\nhttp://facebook.github.io/react-native/docs/getting-started.html#content\nhttp://reactnative.cn/docs/0.37/getting-started.html\nhttp://blog.csdn.net/gz_jero/article/category/6223090\n\n\n> 遇到的问题如下:\n\n1. `adb command not found`:adb命令存在platform-tools中;\n\n解决:在.bash_profile 文件中配置如下.\n```\nexport ANDROID_HOME=~/Library/Android/sdk\nexport PATH=${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools\n```\n\n2.关于sdk的安装慢(使用shadowscoks),安装失败,建议直接使用sdk manager进行安装.\n```\n\nandroid sdk\n\n```\n\n3.关于选取sdk,选择\n\n![](http://upload-images.jianshu.io/upload_images/80378-5d0bab5baa5b17b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n可解决问题:No system images installed for this target\n```\nIf you see \"No system images installed for this target.\" under CPU/ABI, go back to your \"SDK Manager\" and click on \"Show Package Details\" under \"SDK Platforms\". You will then be able to install any missing system images, such as \"Google APIs Intel Atom (x86)\".\n```\n\n\n\n","source":"_posts/react-native/rn-mac-android-开发环境部署.md","raw":"---\ntitle: rn-mac-android-开发环境部署\ndate: 2016-09-11\ncategories: \n- react-native\n---\n\n> 参考资源\n\nhttp://facebook.github.io/react-native/docs/getting-started.html#content\nhttp://reactnative.cn/docs/0.37/getting-started.html\nhttp://blog.csdn.net/gz_jero/article/category/6223090\n\n\n> 遇到的问题如下:\n\n1. `adb command not found`:adb命令存在platform-tools中;\n\n解决:在.bash_profile 文件中配置如下.\n```\nexport ANDROID_HOME=~/Library/Android/sdk\nexport PATH=${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools\n```\n\n2.关于sdk的安装慢(使用shadowscoks),安装失败,建议直接使用sdk manager进行安装.\n```\n\nandroid sdk\n\n```\n\n3.关于选取sdk,选择\n\n![](http://upload-images.jianshu.io/upload_images/80378-5d0bab5baa5b17b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n可解决问题:No system images installed for this target\n```\nIf you see \"No system images installed for this target.\" under CPU/ABI, go back to your \"SDK Manager\" and click on \"Show Package Details\" under \"SDK Platforms\". You will then be able to install any missing system images, such as \"Google APIs Intel Atom (x86)\".\n```\n\n\n\n","slug":"react-native/rn-mac-android-开发环境部署","published":1,"updated":"2017-02-06T03:01:42.000Z","_id":"ciytg4u3u005ps10omr8enlnm","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>参考资源</p>\n</blockquote>\n<p><a href=\"http://facebook.github.io/react-native/docs/getting-started.html#content\" target=\"_blank\" rel=\"external\">http://facebook.github.io/react-native/docs/getting-started.html#content</a><br><a href=\"http://reactnative.cn/docs/0.37/getting-started.html\" target=\"_blank\" rel=\"external\">http://reactnative.cn/docs/0.37/getting-started.html</a><br><a href=\"http://blog.csdn.net/gz_jero/article/category/6223090\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/gz_jero/article/category/6223090</a></p>\n<blockquote>\n<p>遇到的问题如下:</p>\n</blockquote>\n<ol>\n<li><code>adb command not found</code>:adb命令存在platform-tools中;</li>\n</ol>\n<p>解决:在.bash_profile 文件中配置如下.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export ANDROID_HOME=~/Library/Android/sdk</div><div class=\"line\">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/tools:$&#123;ANDROID_HOME&#125;/platform-tools</div></pre></td></tr></table></figure></p>\n<p>2.关于sdk的安装慢(使用shadowscoks),安装失败,建议直接使用sdk manager进行安装.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">android sdk</div></pre></td></tr></table></figure></p>\n<p>3.关于选取sdk,选择</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-5d0bab5baa5b17b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>可解决问题:No system images installed for this target<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">If you see &quot;No system images installed for this target.&quot; under CPU/ABI, go back to your &quot;SDK Manager&quot; and click on &quot;Show Package Details&quot; under &quot;SDK Platforms&quot;. You will then be able to install any missing system images, such as &quot;Google APIs Intel Atom (x86)&quot;.</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<blockquote>\n<p>参考资源</p>\n</blockquote>\n<p><a href=\"http://facebook.github.io/react-native/docs/getting-started.html#content\">http://facebook.github.io/react-native/docs/getting-started.html#content</a><br><a href=\"http://reactnative.cn/docs/0.37/getting-started.html\">http://reactnative.cn/docs/0.37/getting-started.html</a><br><a href=\"http://blog.csdn.net/gz_jero/article/category/6223090\">http://blog.csdn.net/gz_jero/article/category/6223090</a></p>\n<blockquote>\n<p>遇到的问题如下:</p>\n</blockquote>\n<ol>\n<li><code>adb command not found</code>:adb命令存在platform-tools中;</li>\n</ol>\n<p>解决:在.bash_profile 文件中配置如下.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export ANDROID_HOME=~/Library/Android/sdk</div><div class=\"line\">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/tools:$&#123;ANDROID_HOME&#125;/platform-tools</div></pre></td></tr></table></figure></p>\n<p>2.关于sdk的安装慢(使用shadowscoks),安装失败,建议直接使用sdk manager进行安装.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">android sdk</div></pre></td></tr></table></figure></p>\n<p>3.关于选取sdk,选择</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-5d0bab5baa5b17b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>可解决问题:No system images installed for this target<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">If you see &quot;No system images installed for this target.&quot; under CPU/ABI, go back to your &quot;SDK Manager&quot; and click on &quot;Show Package Details&quot; under &quot;SDK Platforms&quot;. You will then be able to install any missing system images, such as &quot;Google APIs Intel Atom (x86)&quot;.</div></pre></td></tr></table></figure></p>\n"},{"title":"git 指令大全","date":"2016-09-10T16:00:00.000Z","_content":"\n> 查看已有的ssh\n\nls -al ~/.ssh\n\n> 生成ssh,可设置密码\n\nssh-keygen -t rsa -b 4096 -C \"xudaolong@vip.qq.com\"\n\n> 添加到ssh-agent代理,检测\n\neval \"$(ssh-agent -s)\"\n\n> 添加到指定的代理\n\n$ ssh-add ~/.ssh/id_rsa\n\n> 复制.pub的数据到指定的key\n> 提交暂存区到仓库区\n\n$ git commit -m [message]\n\n> 提交暂存区的指定文件到仓库区\n\n$ git commit [file1] [file2] ... -m [message]\n\n> 提交工作区自上次commit之后的变化，直接到仓库区\n\n$ git commit -a\n\n> 提交时显示所有diff信息\n\n$ git commit -v\n\n> 使用一次新的commit，替代上一次提交\n> 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n\n$ git commit --amend -m [message]\n\n> 重做上一次commit，并包括指定文件的新变化\n\n$ git commit --amend [file1] [file2] ...\n\n> 列出所有本地分支\n\n$ git branch\n\n> 列出所有远程分支\n\n$ git branch -r\n\n> 列出所有本地分支和远程分支\n\n$ git branch -a\n\n> 新建一个分支，但依然停留在当前分支\n\n$ git branch [branch-name]\n\n> 新建一个分支，并切换到该分支\n\n$ git checkout -b [branch]\n\n> 新建一个分支，指向指定commit\n\n$ git branch [branch] [commit]\n\n> 新建一个分支，与指定的远程分支建立追踪关系\n\n$ git branch --track [branch] [remote-branch]\n\n> 切换到指定分支，并更新工作区\n\n$ git checkout [branch-name]\n\n> 切换到上一个分支\n\n$ git checkout -\n\n> 建立追踪关系，在现有分支与指定的远程分支之间\n\n$ git branch --set-upstream [branch] [remote-branch]\n\n> 合并指定分支到当前分支\n\n$ git merge [branch]\n\n> 选择一个commit，合并进当前分支\n\n$ git cherry-pick [commit]\n\n> 删除分支\n\n$ git branch -d [branch-name]\n\n> 删除远程分支\n\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n\n> 生成一个可供发布的压缩包\n\n$ git archive\n\n> 添加指定文件到暂存区\n\n$ git add [file1] [file2] ...\n\n> 添加指定目录到暂存区，包括子目录\n\n$ git add [dir]\n\n> 添加当前目录的所有文件到暂存区\n\n$ git add .\n\n> 添加每个变化前，都会要求确认\n> 对于同一个文件的多处变化，可以实现分次提交\n\n$ git add -p\n\n> 删除工作区文件，并且将这次删除放入暂存区\n\n$ git rm [file1] [file2] ...\n\n> 停止追踪指定文件，但该文件会保留在工作区\n\n$ git rm --cached [file]\n\n> 改名文件，并且将这个改名放入暂存区\n\n$ git mv [file-original] [file-renamed]\n\n> Webstorm 自动生成\n\n```\n> Logs\nlogs\n*.log\nnpm-debug.log*\n\n> Runtime data\npids\n*.pid\n*.seed\n\n> Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n> Coverage directory used by tools like istanbul\ncoverage\n\n> nyc test coverage\n.nyc_output\n\n> Grunt intermediate storage (http://gruntjs.com/creating-plugins>storing-task-files)\n.grunt\n\n> node-waf configuration\n.lock-wscript\n\n> Compiled binary addons (http://nodejs.org/api/addons.html)\nbuild/Release\n\n> Dependency directories\nnode_modules\njspm_packages\n\n> Optional npm cache directory\n.npm\n\n> Optional REPL history\n.node_repl_history\n```\n\n> 恢复暂存区的指定文件到工作区\n\n$ git checkout [file]\n\n> 恢复某个commit的指定文件到暂存区和工作区\n\n$ git checkout [commit] [file]\n\n> 恢复暂存区的所有文件到工作区\n\n$ git checkout .\n\n> 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n\n$ git reset [file]\n\n> 重置暂存区与工作区，与上一次commit保持一致\n\n$ git reset --hard\n\n> 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n\n$ git reset [commit]\n\n> 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n\n$ git reset --hard [commit]\n\n> 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n\n$ git reset --keep [commit]\n\n> 新建一个commit，用来撤销指定commit\n> 后者的所有变化都将被前者抵消，并且应用到当前分支\n\n$ git revert [commit]\n\n> 暂时将未提交的变化移除，稍后再移入\n\n$ git stash\n$ git stash pop\n\n> 在当前目录新建一个Git代码库\n\n$ git init\n\n> 新建一个目录，将其初始化为Git代码库\n\n$ git init [project-name]\n\n> 下载一个项目和它的整个代码历史\n\n$ git clone [url]\n\n> 显示有变更的文件\n\n$ git status\n\n> 显示当前分支的版本历史\n\n$ git log\n\n> 显示commit历史，以及每次commit发生变更的文件\n\n$ git log --stat\n\n> 搜索提交历史，根据关键词\n\n$ git log -S [keyword]\n\n> 显示某个commit之后的所有变动，每个commit占据一行\n\n$ git log [tag] HEAD --pretty=format:%s\n\n> 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n\n$ git log [tag] HEAD --grep feature\n\n> 显示某个文件的版本历史，包括文件改名\n\n$ git log --follow [file]\n$ git whatchanged [file]\n\n> 显示指定文件相关的每一次diff\n\n$ git log -p [file]\n\n> 显示过去5次提交\n\n$ git log -5 --pretty --oneline\n\n> 显示所有提交过的用户，按提交次数排序\n\n$ git shortlog -sn\n\n> 显示指定文件是什么人在什么时间修改过\n\n$ git blame [file]\n\n> 显示暂存区和工作区的差异\n\n$ git diff\n\n> 显示暂存区和上一个commit的差异\n\n$ git diff --cached [file]\n\n> 显示工作区与当前分支最新commit之间的差异\n\n$ git diff HEAD\n\n> 显示两次提交之间的差异\n\n$ git diff [first-branch]...[second-branch]\n\n> 显示今天你写了多少行代码\n\n$ git diff --shortstat \"@{0 day ago}\"\n\n> 显示某次提交的元数据和内容变化\n\n$ git show [commit]\n\n> 显示某次提交发生变化的文件\n\n$ git show --name-only [commit]\n\n> 显示某次提交时，某个文件的内容\n\n$ git show [commit]:[filename]\n\n> 显示当前分支的最近几次提交\n\n$ git reflog\n\n> 列出所有tag\n\n$ git tag\n\n> 新建一个tag在当前commit\n\n$ git tag [tag]\n\n> 新建一个tag在指定commit\n\n$ git tag [tag] [commit]\n\n> 删除本地tag\n\n$ git tag -d [tag]\n\n> 删除远程tag\n\n$ git push origin :refs/tags/[tagName]\n\n> 查看tag信息\n\n$ git show [tag]\n\n> 提交指定tag\n\n$ git push [remote] [tag]\n\n> 提交所有tag\n\n$ git push [remote] --tags\n\n> 新建一个分支，指向某个tag\n\n$ git checkout -b [branch] [tag]\n\n> 下载远程仓库的所有变动\n\n$ git fetch [remote]\n\n> 显示所有远程仓库\n\n$ git remote -v\n\n> 显示某个远程仓库的信息\n\n$ git remote show [remote]\n\n> 增加一个新的远程仓库，并命名\n\n$ git remote add [shortname] [url]\n\n> 取回远程仓库的变化，并与本地分支合并\n\n$ git pull [remote] [branch]\n\n> 上传本地指定分支到远程仓库\n\n$ git push [remote] [branch]\n\n> 强行推送当前分支到远程仓库，即使有冲突\n\n$ git push [remote] --force\n\n> 推送所有分支到远程仓库\n\n$ git push [remote] --all\n\n> 显示当前的Git配置\n\n$ git config --list\n\n> 编辑Git配置文件\n\n$ git config -e [--global]\n\n> 设置提交代码时的用户信息\n\n$ git config [--global] user.name \"[name]\"\n$ git config [--global] user.email \"[email address]\"\n\n","source":"_posts/git/git 指令大全.md","raw":"---\ntitle: git 指令大全\ndate: 2016-09-11\ncategories: \n- git\n---\n\n> 查看已有的ssh\n\nls -al ~/.ssh\n\n> 生成ssh,可设置密码\n\nssh-keygen -t rsa -b 4096 -C \"xudaolong@vip.qq.com\"\n\n> 添加到ssh-agent代理,检测\n\neval \"$(ssh-agent -s)\"\n\n> 添加到指定的代理\n\n$ ssh-add ~/.ssh/id_rsa\n\n> 复制.pub的数据到指定的key\n> 提交暂存区到仓库区\n\n$ git commit -m [message]\n\n> 提交暂存区的指定文件到仓库区\n\n$ git commit [file1] [file2] ... -m [message]\n\n> 提交工作区自上次commit之后的变化，直接到仓库区\n\n$ git commit -a\n\n> 提交时显示所有diff信息\n\n$ git commit -v\n\n> 使用一次新的commit，替代上一次提交\n> 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n\n$ git commit --amend -m [message]\n\n> 重做上一次commit，并包括指定文件的新变化\n\n$ git commit --amend [file1] [file2] ...\n\n> 列出所有本地分支\n\n$ git branch\n\n> 列出所有远程分支\n\n$ git branch -r\n\n> 列出所有本地分支和远程分支\n\n$ git branch -a\n\n> 新建一个分支，但依然停留在当前分支\n\n$ git branch [branch-name]\n\n> 新建一个分支，并切换到该分支\n\n$ git checkout -b [branch]\n\n> 新建一个分支，指向指定commit\n\n$ git branch [branch] [commit]\n\n> 新建一个分支，与指定的远程分支建立追踪关系\n\n$ git branch --track [branch] [remote-branch]\n\n> 切换到指定分支，并更新工作区\n\n$ git checkout [branch-name]\n\n> 切换到上一个分支\n\n$ git checkout -\n\n> 建立追踪关系，在现有分支与指定的远程分支之间\n\n$ git branch --set-upstream [branch] [remote-branch]\n\n> 合并指定分支到当前分支\n\n$ git merge [branch]\n\n> 选择一个commit，合并进当前分支\n\n$ git cherry-pick [commit]\n\n> 删除分支\n\n$ git branch -d [branch-name]\n\n> 删除远程分支\n\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n\n> 生成一个可供发布的压缩包\n\n$ git archive\n\n> 添加指定文件到暂存区\n\n$ git add [file1] [file2] ...\n\n> 添加指定目录到暂存区，包括子目录\n\n$ git add [dir]\n\n> 添加当前目录的所有文件到暂存区\n\n$ git add .\n\n> 添加每个变化前，都会要求确认\n> 对于同一个文件的多处变化，可以实现分次提交\n\n$ git add -p\n\n> 删除工作区文件，并且将这次删除放入暂存区\n\n$ git rm [file1] [file2] ...\n\n> 停止追踪指定文件，但该文件会保留在工作区\n\n$ git rm --cached [file]\n\n> 改名文件，并且将这个改名放入暂存区\n\n$ git mv [file-original] [file-renamed]\n\n> Webstorm 自动生成\n\n```\n> Logs\nlogs\n*.log\nnpm-debug.log*\n\n> Runtime data\npids\n*.pid\n*.seed\n\n> Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n> Coverage directory used by tools like istanbul\ncoverage\n\n> nyc test coverage\n.nyc_output\n\n> Grunt intermediate storage (http://gruntjs.com/creating-plugins>storing-task-files)\n.grunt\n\n> node-waf configuration\n.lock-wscript\n\n> Compiled binary addons (http://nodejs.org/api/addons.html)\nbuild/Release\n\n> Dependency directories\nnode_modules\njspm_packages\n\n> Optional npm cache directory\n.npm\n\n> Optional REPL history\n.node_repl_history\n```\n\n> 恢复暂存区的指定文件到工作区\n\n$ git checkout [file]\n\n> 恢复某个commit的指定文件到暂存区和工作区\n\n$ git checkout [commit] [file]\n\n> 恢复暂存区的所有文件到工作区\n\n$ git checkout .\n\n> 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n\n$ git reset [file]\n\n> 重置暂存区与工作区，与上一次commit保持一致\n\n$ git reset --hard\n\n> 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n\n$ git reset [commit]\n\n> 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n\n$ git reset --hard [commit]\n\n> 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n\n$ git reset --keep [commit]\n\n> 新建一个commit，用来撤销指定commit\n> 后者的所有变化都将被前者抵消，并且应用到当前分支\n\n$ git revert [commit]\n\n> 暂时将未提交的变化移除，稍后再移入\n\n$ git stash\n$ git stash pop\n\n> 在当前目录新建一个Git代码库\n\n$ git init\n\n> 新建一个目录，将其初始化为Git代码库\n\n$ git init [project-name]\n\n> 下载一个项目和它的整个代码历史\n\n$ git clone [url]\n\n> 显示有变更的文件\n\n$ git status\n\n> 显示当前分支的版本历史\n\n$ git log\n\n> 显示commit历史，以及每次commit发生变更的文件\n\n$ git log --stat\n\n> 搜索提交历史，根据关键词\n\n$ git log -S [keyword]\n\n> 显示某个commit之后的所有变动，每个commit占据一行\n\n$ git log [tag] HEAD --pretty=format:%s\n\n> 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n\n$ git log [tag] HEAD --grep feature\n\n> 显示某个文件的版本历史，包括文件改名\n\n$ git log --follow [file]\n$ git whatchanged [file]\n\n> 显示指定文件相关的每一次diff\n\n$ git log -p [file]\n\n> 显示过去5次提交\n\n$ git log -5 --pretty --oneline\n\n> 显示所有提交过的用户，按提交次数排序\n\n$ git shortlog -sn\n\n> 显示指定文件是什么人在什么时间修改过\n\n$ git blame [file]\n\n> 显示暂存区和工作区的差异\n\n$ git diff\n\n> 显示暂存区和上一个commit的差异\n\n$ git diff --cached [file]\n\n> 显示工作区与当前分支最新commit之间的差异\n\n$ git diff HEAD\n\n> 显示两次提交之间的差异\n\n$ git diff [first-branch]...[second-branch]\n\n> 显示今天你写了多少行代码\n\n$ git diff --shortstat \"@{0 day ago}\"\n\n> 显示某次提交的元数据和内容变化\n\n$ git show [commit]\n\n> 显示某次提交发生变化的文件\n\n$ git show --name-only [commit]\n\n> 显示某次提交时，某个文件的内容\n\n$ git show [commit]:[filename]\n\n> 显示当前分支的最近几次提交\n\n$ git reflog\n\n> 列出所有tag\n\n$ git tag\n\n> 新建一个tag在当前commit\n\n$ git tag [tag]\n\n> 新建一个tag在指定commit\n\n$ git tag [tag] [commit]\n\n> 删除本地tag\n\n$ git tag -d [tag]\n\n> 删除远程tag\n\n$ git push origin :refs/tags/[tagName]\n\n> 查看tag信息\n\n$ git show [tag]\n\n> 提交指定tag\n\n$ git push [remote] [tag]\n\n> 提交所有tag\n\n$ git push [remote] --tags\n\n> 新建一个分支，指向某个tag\n\n$ git checkout -b [branch] [tag]\n\n> 下载远程仓库的所有变动\n\n$ git fetch [remote]\n\n> 显示所有远程仓库\n\n$ git remote -v\n\n> 显示某个远程仓库的信息\n\n$ git remote show [remote]\n\n> 增加一个新的远程仓库，并命名\n\n$ git remote add [shortname] [url]\n\n> 取回远程仓库的变化，并与本地分支合并\n\n$ git pull [remote] [branch]\n\n> 上传本地指定分支到远程仓库\n\n$ git push [remote] [branch]\n\n> 强行推送当前分支到远程仓库，即使有冲突\n\n$ git push [remote] --force\n\n> 推送所有分支到远程仓库\n\n$ git push [remote] --all\n\n> 显示当前的Git配置\n\n$ git config --list\n\n> 编辑Git配置文件\n\n$ git config -e [--global]\n\n> 设置提交代码时的用户信息\n\n$ git config [--global] user.name \"[name]\"\n$ git config [--global] user.email \"[email address]\"\n\n","slug":"git/git 指令大全","published":1,"updated":"2017-02-06T01:54:06.000Z","_id":"ciytgdrxb0068s10ooa6s9i0f","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>查看已有的ssh</p>\n</blockquote>\n<p>ls -al ~/.ssh</p>\n<blockquote>\n<p>生成ssh,可设置密码</p>\n</blockquote>\n<p>ssh-keygen -t rsa -b 4096 -C “xudaolong@vip.qq.com”</p>\n<blockquote>\n<p>添加到ssh-agent代理,检测</p>\n</blockquote>\n<p>eval “$(ssh-agent -s)”</p>\n<blockquote>\n<p>添加到指定的代理</p>\n</blockquote>\n<p>$ ssh-add ~/.ssh/id_rsa</p>\n<blockquote>\n<p>复制.pub的数据到指定的key<br>提交暂存区到仓库区</p>\n</blockquote>\n<p>$ git commit -m [message]</p>\n<blockquote>\n<p>提交暂存区的指定文件到仓库区</p>\n</blockquote>\n<p>$ git commit [file1] [file2] … -m [message]</p>\n<blockquote>\n<p>提交工作区自上次commit之后的变化，直接到仓库区</p>\n</blockquote>\n<p>$ git commit -a</p>\n<blockquote>\n<p>提交时显示所有diff信息</p>\n</blockquote>\n<p>$ git commit -v</p>\n<blockquote>\n<p>使用一次新的commit，替代上一次提交<br>如果代码没有任何新变化，则用来改写上一次commit的提交信息</p>\n</blockquote>\n<p>$ git commit –amend -m [message]</p>\n<blockquote>\n<p>重做上一次commit，并包括指定文件的新变化</p>\n</blockquote>\n<p>$ git commit –amend [file1] [file2] …</p>\n<blockquote>\n<p>列出所有本地分支</p>\n</blockquote>\n<p>$ git branch</p>\n<blockquote>\n<p>列出所有远程分支</p>\n</blockquote>\n<p>$ git branch -r</p>\n<blockquote>\n<p>列出所有本地分支和远程分支</p>\n</blockquote>\n<p>$ git branch -a</p>\n<blockquote>\n<p>新建一个分支，但依然停留在当前分支</p>\n</blockquote>\n<p>$ git branch [branch-name]</p>\n<blockquote>\n<p>新建一个分支，并切换到该分支</p>\n</blockquote>\n<p>$ git checkout -b [branch]</p>\n<blockquote>\n<p>新建一个分支，指向指定commit</p>\n</blockquote>\n<p>$ git branch [branch] [commit]</p>\n<blockquote>\n<p>新建一个分支，与指定的远程分支建立追踪关系</p>\n</blockquote>\n<p>$ git branch –track [branch] [remote-branch]</p>\n<blockquote>\n<p>切换到指定分支，并更新工作区</p>\n</blockquote>\n<p>$ git checkout [branch-name]</p>\n<blockquote>\n<p>切换到上一个分支</p>\n</blockquote>\n<p>$ git checkout -</p>\n<blockquote>\n<p>建立追踪关系，在现有分支与指定的远程分支之间</p>\n</blockquote>\n<p>$ git branch –set-upstream [branch] [remote-branch]</p>\n<blockquote>\n<p>合并指定分支到当前分支</p>\n</blockquote>\n<p>$ git merge [branch]</p>\n<blockquote>\n<p>选择一个commit，合并进当前分支</p>\n</blockquote>\n<p>$ git cherry-pick [commit]</p>\n<blockquote>\n<p>删除分支</p>\n</blockquote>\n<p>$ git branch -d [branch-name]</p>\n<blockquote>\n<p>删除远程分支</p>\n</blockquote>\n<p>$ git push origin –delete [branch-name]<br>$ git branch -dr [remote/branch]</p>\n<blockquote>\n<p>生成一个可供发布的压缩包</p>\n</blockquote>\n<p>$ git archive</p>\n<blockquote>\n<p>添加指定文件到暂存区</p>\n</blockquote>\n<p>$ git add [file1] [file2] …</p>\n<blockquote>\n<p>添加指定目录到暂存区，包括子目录</p>\n</blockquote>\n<p>$ git add [dir]</p>\n<blockquote>\n<p>添加当前目录的所有文件到暂存区</p>\n</blockquote>\n<p>$ git add .</p>\n<blockquote>\n<p>添加每个变化前，都会要求确认<br>对于同一个文件的多处变化，可以实现分次提交</p>\n</blockquote>\n<p>$ git add -p</p>\n<blockquote>\n<p>删除工作区文件，并且将这次删除放入暂存区</p>\n</blockquote>\n<p>$ git rm [file1] [file2] …</p>\n<blockquote>\n<p>停止追踪指定文件，但该文件会保留在工作区</p>\n</blockquote>\n<p>$ git rm –cached [file]</p>\n<blockquote>\n<p>改名文件，并且将这个改名放入暂存区</p>\n</blockquote>\n<p>$ git mv [file-original] [file-renamed]</p>\n<blockquote>\n<p>Webstorm 自动生成</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; Logs</div><div class=\"line\">logs</div><div class=\"line\">*.log</div><div class=\"line\">npm-debug.log*</div><div class=\"line\"></div><div class=\"line\">&gt; Runtime data</div><div class=\"line\">pids</div><div class=\"line\">*.pid</div><div class=\"line\">*.seed</div><div class=\"line\"></div><div class=\"line\">&gt; Directory for instrumented libs generated by jscoverage/JSCover</div><div class=\"line\">lib-cov</div><div class=\"line\"></div><div class=\"line\">&gt; Coverage directory used by tools like istanbul</div><div class=\"line\">coverage</div><div class=\"line\"></div><div class=\"line\">&gt; nyc test coverage</div><div class=\"line\">.nyc_output</div><div class=\"line\"></div><div class=\"line\">&gt; Grunt intermediate storage (http://gruntjs.com/creating-plugins&gt;storing-task-files)</div><div class=\"line\">.grunt</div><div class=\"line\"></div><div class=\"line\">&gt; node-waf configuration</div><div class=\"line\">.lock-wscript</div><div class=\"line\"></div><div class=\"line\">&gt; Compiled binary addons (http://nodejs.org/api/addons.html)</div><div class=\"line\">build/Release</div><div class=\"line\"></div><div class=\"line\">&gt; Dependency directories</div><div class=\"line\">node_modules</div><div class=\"line\">jspm_packages</div><div class=\"line\"></div><div class=\"line\">&gt; Optional npm cache directory</div><div class=\"line\">.npm</div><div class=\"line\"></div><div class=\"line\">&gt; Optional REPL history</div><div class=\"line\">.node_repl_history</div></pre></td></tr></table></figure>\n<blockquote>\n<p>恢复暂存区的指定文件到工作区</p>\n</blockquote>\n<p>$ git checkout [file]</p>\n<blockquote>\n<p>恢复某个commit的指定文件到暂存区和工作区</p>\n</blockquote>\n<p>$ git checkout [commit] [file]</p>\n<blockquote>\n<p>恢复暂存区的所有文件到工作区</p>\n</blockquote>\n<p>$ git checkout .</p>\n<blockquote>\n<p>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</p>\n</blockquote>\n<p>$ git reset [file]</p>\n<blockquote>\n<p>重置暂存区与工作区，与上一次commit保持一致</p>\n</blockquote>\n<p>$ git reset –hard</p>\n<blockquote>\n<p>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</p>\n</blockquote>\n<p>$ git reset [commit]</p>\n<blockquote>\n<p>重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</p>\n</blockquote>\n<p>$ git reset –hard [commit]</p>\n<blockquote>\n<p>重置当前HEAD为指定commit，但保持暂存区和工作区不变</p>\n</blockquote>\n<p>$ git reset –keep [commit]</p>\n<blockquote>\n<p>新建一个commit，用来撤销指定commit<br>后者的所有变化都将被前者抵消，并且应用到当前分支</p>\n</blockquote>\n<p>$ git revert [commit]</p>\n<blockquote>\n<p>暂时将未提交的变化移除，稍后再移入</p>\n</blockquote>\n<p>$ git stash<br>$ git stash pop</p>\n<blockquote>\n<p>在当前目录新建一个Git代码库</p>\n</blockquote>\n<p>$ git init</p>\n<blockquote>\n<p>新建一个目录，将其初始化为Git代码库</p>\n</blockquote>\n<p>$ git init [project-name]</p>\n<blockquote>\n<p>下载一个项目和它的整个代码历史</p>\n</blockquote>\n<p>$ git clone [url]</p>\n<blockquote>\n<p>显示有变更的文件</p>\n</blockquote>\n<p>$ git status</p>\n<blockquote>\n<p>显示当前分支的版本历史</p>\n</blockquote>\n<p>$ git log</p>\n<blockquote>\n<p>显示commit历史，以及每次commit发生变更的文件</p>\n</blockquote>\n<p>$ git log –stat</p>\n<blockquote>\n<p>搜索提交历史，根据关键词</p>\n</blockquote>\n<p>$ git log -S [keyword]</p>\n<blockquote>\n<p>显示某个commit之后的所有变动，每个commit占据一行</p>\n</blockquote>\n<p>$ git log [tag] HEAD –pretty=format:%s</p>\n<blockquote>\n<p>显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件</p>\n</blockquote>\n<p>$ git log [tag] HEAD –grep feature</p>\n<blockquote>\n<p>显示某个文件的版本历史，包括文件改名</p>\n</blockquote>\n<p>$ git log –follow [file]<br>$ git whatchanged [file]</p>\n<blockquote>\n<p>显示指定文件相关的每一次diff</p>\n</blockquote>\n<p>$ git log -p [file]</p>\n<blockquote>\n<p>显示过去5次提交</p>\n</blockquote>\n<p>$ git log -5 –pretty –oneline</p>\n<blockquote>\n<p>显示所有提交过的用户，按提交次数排序</p>\n</blockquote>\n<p>$ git shortlog -sn</p>\n<blockquote>\n<p>显示指定文件是什么人在什么时间修改过</p>\n</blockquote>\n<p>$ git blame [file]</p>\n<blockquote>\n<p>显示暂存区和工作区的差异</p>\n</blockquote>\n<p>$ git diff</p>\n<blockquote>\n<p>显示暂存区和上一个commit的差异</p>\n</blockquote>\n<p>$ git diff –cached [file]</p>\n<blockquote>\n<p>显示工作区与当前分支最新commit之间的差异</p>\n</blockquote>\n<p>$ git diff HEAD</p>\n<blockquote>\n<p>显示两次提交之间的差异</p>\n</blockquote>\n<p>$ git diff [first-branch]…[second-branch]</p>\n<blockquote>\n<p>显示今天你写了多少行代码</p>\n</blockquote>\n<p>$ git diff –shortstat “@{0 day ago}”</p>\n<blockquote>\n<p>显示某次提交的元数据和内容变化</p>\n</blockquote>\n<p>$ git show [commit]</p>\n<blockquote>\n<p>显示某次提交发生变化的文件</p>\n</blockquote>\n<p>$ git show –name-only [commit]</p>\n<blockquote>\n<p>显示某次提交时，某个文件的内容</p>\n</blockquote>\n<p>$ git show [commit]:[filename]</p>\n<blockquote>\n<p>显示当前分支的最近几次提交</p>\n</blockquote>\n<p>$ git reflog</p>\n<blockquote>\n<p>列出所有tag</p>\n</blockquote>\n<p>$ git tag</p>\n<blockquote>\n<p>新建一个tag在当前commit</p>\n</blockquote>\n<p>$ git tag [tag]</p>\n<blockquote>\n<p>新建一个tag在指定commit</p>\n</blockquote>\n<p>$ git tag [tag] [commit]</p>\n<blockquote>\n<p>删除本地tag</p>\n</blockquote>\n<p>$ git tag -d [tag]</p>\n<blockquote>\n<p>删除远程tag</p>\n</blockquote>\n<p>$ git push origin :refs/tags/[tagName]</p>\n<blockquote>\n<p>查看tag信息</p>\n</blockquote>\n<p>$ git show [tag]</p>\n<blockquote>\n<p>提交指定tag</p>\n</blockquote>\n<p>$ git push [remote] [tag]</p>\n<blockquote>\n<p>提交所有tag</p>\n</blockquote>\n<p>$ git push [remote] –tags</p>\n<blockquote>\n<p>新建一个分支，指向某个tag</p>\n</blockquote>\n<p>$ git checkout -b [branch] [tag]</p>\n<blockquote>\n<p>下载远程仓库的所有变动</p>\n</blockquote>\n<p>$ git fetch [remote]</p>\n<blockquote>\n<p>显示所有远程仓库</p>\n</blockquote>\n<p>$ git remote -v</p>\n<blockquote>\n<p>显示某个远程仓库的信息</p>\n</blockquote>\n<p>$ git remote show [remote]</p>\n<blockquote>\n<p>增加一个新的远程仓库，并命名</p>\n</blockquote>\n<p>$ git remote add [shortname] [url]</p>\n<blockquote>\n<p>取回远程仓库的变化，并与本地分支合并</p>\n</blockquote>\n<p>$ git pull [remote] [branch]</p>\n<blockquote>\n<p>上传本地指定分支到远程仓库</p>\n</blockquote>\n<p>$ git push [remote] [branch]</p>\n<blockquote>\n<p>强行推送当前分支到远程仓库，即使有冲突</p>\n</blockquote>\n<p>$ git push [remote] –force</p>\n<blockquote>\n<p>推送所有分支到远程仓库</p>\n</blockquote>\n<p>$ git push [remote] –all</p>\n<blockquote>\n<p>显示当前的Git配置</p>\n</blockquote>\n<p>$ git config –list</p>\n<blockquote>\n<p>编辑Git配置文件</p>\n</blockquote>\n<p>$ git config -e [–global]</p>\n<blockquote>\n<p>设置提交代码时的用户信息</p>\n</blockquote>\n<p>$ git config [–global] user.name “[name]”<br>$ git config [–global] user.email “[email address]”</p>\n","excerpt":"","more":"<blockquote>\n<p>查看已有的ssh</p>\n</blockquote>\n<p>ls -al ~/.ssh</p>\n<blockquote>\n<p>生成ssh,可设置密码</p>\n</blockquote>\n<p>ssh-keygen -t rsa -b 4096 -C “xudaolong@vip.qq.com”</p>\n<blockquote>\n<p>添加到ssh-agent代理,检测</p>\n</blockquote>\n<p>eval “$(ssh-agent -s)”</p>\n<blockquote>\n<p>添加到指定的代理</p>\n</blockquote>\n<p>$ ssh-add ~/.ssh/id_rsa</p>\n<blockquote>\n<p>复制.pub的数据到指定的key<br>提交暂存区到仓库区</p>\n</blockquote>\n<p>$ git commit -m [message]</p>\n<blockquote>\n<p>提交暂存区的指定文件到仓库区</p>\n</blockquote>\n<p>$ git commit [file1] [file2] … -m [message]</p>\n<blockquote>\n<p>提交工作区自上次commit之后的变化，直接到仓库区</p>\n</blockquote>\n<p>$ git commit -a</p>\n<blockquote>\n<p>提交时显示所有diff信息</p>\n</blockquote>\n<p>$ git commit -v</p>\n<blockquote>\n<p>使用一次新的commit，替代上一次提交<br>如果代码没有任何新变化，则用来改写上一次commit的提交信息</p>\n</blockquote>\n<p>$ git commit –amend -m [message]</p>\n<blockquote>\n<p>重做上一次commit，并包括指定文件的新变化</p>\n</blockquote>\n<p>$ git commit –amend [file1] [file2] …</p>\n<blockquote>\n<p>列出所有本地分支</p>\n</blockquote>\n<p>$ git branch</p>\n<blockquote>\n<p>列出所有远程分支</p>\n</blockquote>\n<p>$ git branch -r</p>\n<blockquote>\n<p>列出所有本地分支和远程分支</p>\n</blockquote>\n<p>$ git branch -a</p>\n<blockquote>\n<p>新建一个分支，但依然停留在当前分支</p>\n</blockquote>\n<p>$ git branch [branch-name]</p>\n<blockquote>\n<p>新建一个分支，并切换到该分支</p>\n</blockquote>\n<p>$ git checkout -b [branch]</p>\n<blockquote>\n<p>新建一个分支，指向指定commit</p>\n</blockquote>\n<p>$ git branch [branch] [commit]</p>\n<blockquote>\n<p>新建一个分支，与指定的远程分支建立追踪关系</p>\n</blockquote>\n<p>$ git branch –track [branch] [remote-branch]</p>\n<blockquote>\n<p>切换到指定分支，并更新工作区</p>\n</blockquote>\n<p>$ git checkout [branch-name]</p>\n<blockquote>\n<p>切换到上一个分支</p>\n</blockquote>\n<p>$ git checkout -</p>\n<blockquote>\n<p>建立追踪关系，在现有分支与指定的远程分支之间</p>\n</blockquote>\n<p>$ git branch –set-upstream [branch] [remote-branch]</p>\n<blockquote>\n<p>合并指定分支到当前分支</p>\n</blockquote>\n<p>$ git merge [branch]</p>\n<blockquote>\n<p>选择一个commit，合并进当前分支</p>\n</blockquote>\n<p>$ git cherry-pick [commit]</p>\n<blockquote>\n<p>删除分支</p>\n</blockquote>\n<p>$ git branch -d [branch-name]</p>\n<blockquote>\n<p>删除远程分支</p>\n</blockquote>\n<p>$ git push origin –delete [branch-name]<br>$ git branch -dr [remote/branch]</p>\n<blockquote>\n<p>生成一个可供发布的压缩包</p>\n</blockquote>\n<p>$ git archive</p>\n<blockquote>\n<p>添加指定文件到暂存区</p>\n</blockquote>\n<p>$ git add [file1] [file2] …</p>\n<blockquote>\n<p>添加指定目录到暂存区，包括子目录</p>\n</blockquote>\n<p>$ git add [dir]</p>\n<blockquote>\n<p>添加当前目录的所有文件到暂存区</p>\n</blockquote>\n<p>$ git add .</p>\n<blockquote>\n<p>添加每个变化前，都会要求确认<br>对于同一个文件的多处变化，可以实现分次提交</p>\n</blockquote>\n<p>$ git add -p</p>\n<blockquote>\n<p>删除工作区文件，并且将这次删除放入暂存区</p>\n</blockquote>\n<p>$ git rm [file1] [file2] …</p>\n<blockquote>\n<p>停止追踪指定文件，但该文件会保留在工作区</p>\n</blockquote>\n<p>$ git rm –cached [file]</p>\n<blockquote>\n<p>改名文件，并且将这个改名放入暂存区</p>\n</blockquote>\n<p>$ git mv [file-original] [file-renamed]</p>\n<blockquote>\n<p>Webstorm 自动生成</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; Logs</div><div class=\"line\">logs</div><div class=\"line\">*.log</div><div class=\"line\">npm-debug.log*</div><div class=\"line\"></div><div class=\"line\">&gt; Runtime data</div><div class=\"line\">pids</div><div class=\"line\">*.pid</div><div class=\"line\">*.seed</div><div class=\"line\"></div><div class=\"line\">&gt; Directory for instrumented libs generated by jscoverage/JSCover</div><div class=\"line\">lib-cov</div><div class=\"line\"></div><div class=\"line\">&gt; Coverage directory used by tools like istanbul</div><div class=\"line\">coverage</div><div class=\"line\"></div><div class=\"line\">&gt; nyc test coverage</div><div class=\"line\">.nyc_output</div><div class=\"line\"></div><div class=\"line\">&gt; Grunt intermediate storage (http://gruntjs.com/creating-plugins&gt;storing-task-files)</div><div class=\"line\">.grunt</div><div class=\"line\"></div><div class=\"line\">&gt; node-waf configuration</div><div class=\"line\">.lock-wscript</div><div class=\"line\"></div><div class=\"line\">&gt; Compiled binary addons (http://nodejs.org/api/addons.html)</div><div class=\"line\">build/Release</div><div class=\"line\"></div><div class=\"line\">&gt; Dependency directories</div><div class=\"line\">node_modules</div><div class=\"line\">jspm_packages</div><div class=\"line\"></div><div class=\"line\">&gt; Optional npm cache directory</div><div class=\"line\">.npm</div><div class=\"line\"></div><div class=\"line\">&gt; Optional REPL history</div><div class=\"line\">.node_repl_history</div></pre></td></tr></table></figure>\n<blockquote>\n<p>恢复暂存区的指定文件到工作区</p>\n</blockquote>\n<p>$ git checkout [file]</p>\n<blockquote>\n<p>恢复某个commit的指定文件到暂存区和工作区</p>\n</blockquote>\n<p>$ git checkout [commit] [file]</p>\n<blockquote>\n<p>恢复暂存区的所有文件到工作区</p>\n</blockquote>\n<p>$ git checkout .</p>\n<blockquote>\n<p>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</p>\n</blockquote>\n<p>$ git reset [file]</p>\n<blockquote>\n<p>重置暂存区与工作区，与上一次commit保持一致</p>\n</blockquote>\n<p>$ git reset –hard</p>\n<blockquote>\n<p>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</p>\n</blockquote>\n<p>$ git reset [commit]</p>\n<blockquote>\n<p>重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</p>\n</blockquote>\n<p>$ git reset –hard [commit]</p>\n<blockquote>\n<p>重置当前HEAD为指定commit，但保持暂存区和工作区不变</p>\n</blockquote>\n<p>$ git reset –keep [commit]</p>\n<blockquote>\n<p>新建一个commit，用来撤销指定commit<br>后者的所有变化都将被前者抵消，并且应用到当前分支</p>\n</blockquote>\n<p>$ git revert [commit]</p>\n<blockquote>\n<p>暂时将未提交的变化移除，稍后再移入</p>\n</blockquote>\n<p>$ git stash<br>$ git stash pop</p>\n<blockquote>\n<p>在当前目录新建一个Git代码库</p>\n</blockquote>\n<p>$ git init</p>\n<blockquote>\n<p>新建一个目录，将其初始化为Git代码库</p>\n</blockquote>\n<p>$ git init [project-name]</p>\n<blockquote>\n<p>下载一个项目和它的整个代码历史</p>\n</blockquote>\n<p>$ git clone [url]</p>\n<blockquote>\n<p>显示有变更的文件</p>\n</blockquote>\n<p>$ git status</p>\n<blockquote>\n<p>显示当前分支的版本历史</p>\n</blockquote>\n<p>$ git log</p>\n<blockquote>\n<p>显示commit历史，以及每次commit发生变更的文件</p>\n</blockquote>\n<p>$ git log –stat</p>\n<blockquote>\n<p>搜索提交历史，根据关键词</p>\n</blockquote>\n<p>$ git log -S [keyword]</p>\n<blockquote>\n<p>显示某个commit之后的所有变动，每个commit占据一行</p>\n</blockquote>\n<p>$ git log [tag] HEAD –pretty=format:%s</p>\n<blockquote>\n<p>显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件</p>\n</blockquote>\n<p>$ git log [tag] HEAD –grep feature</p>\n<blockquote>\n<p>显示某个文件的版本历史，包括文件改名</p>\n</blockquote>\n<p>$ git log –follow [file]<br>$ git whatchanged [file]</p>\n<blockquote>\n<p>显示指定文件相关的每一次diff</p>\n</blockquote>\n<p>$ git log -p [file]</p>\n<blockquote>\n<p>显示过去5次提交</p>\n</blockquote>\n<p>$ git log -5 –pretty –oneline</p>\n<blockquote>\n<p>显示所有提交过的用户，按提交次数排序</p>\n</blockquote>\n<p>$ git shortlog -sn</p>\n<blockquote>\n<p>显示指定文件是什么人在什么时间修改过</p>\n</blockquote>\n<p>$ git blame [file]</p>\n<blockquote>\n<p>显示暂存区和工作区的差异</p>\n</blockquote>\n<p>$ git diff</p>\n<blockquote>\n<p>显示暂存区和上一个commit的差异</p>\n</blockquote>\n<p>$ git diff –cached [file]</p>\n<blockquote>\n<p>显示工作区与当前分支最新commit之间的差异</p>\n</blockquote>\n<p>$ git diff HEAD</p>\n<blockquote>\n<p>显示两次提交之间的差异</p>\n</blockquote>\n<p>$ git diff [first-branch]…[second-branch]</p>\n<blockquote>\n<p>显示今天你写了多少行代码</p>\n</blockquote>\n<p>$ git diff –shortstat “@{0 day ago}”</p>\n<blockquote>\n<p>显示某次提交的元数据和内容变化</p>\n</blockquote>\n<p>$ git show [commit]</p>\n<blockquote>\n<p>显示某次提交发生变化的文件</p>\n</blockquote>\n<p>$ git show –name-only [commit]</p>\n<blockquote>\n<p>显示某次提交时，某个文件的内容</p>\n</blockquote>\n<p>$ git show [commit]:[filename]</p>\n<blockquote>\n<p>显示当前分支的最近几次提交</p>\n</blockquote>\n<p>$ git reflog</p>\n<blockquote>\n<p>列出所有tag</p>\n</blockquote>\n<p>$ git tag</p>\n<blockquote>\n<p>新建一个tag在当前commit</p>\n</blockquote>\n<p>$ git tag [tag]</p>\n<blockquote>\n<p>新建一个tag在指定commit</p>\n</blockquote>\n<p>$ git tag [tag] [commit]</p>\n<blockquote>\n<p>删除本地tag</p>\n</blockquote>\n<p>$ git tag -d [tag]</p>\n<blockquote>\n<p>删除远程tag</p>\n</blockquote>\n<p>$ git push origin :refs/tags/[tagName]</p>\n<blockquote>\n<p>查看tag信息</p>\n</blockquote>\n<p>$ git show [tag]</p>\n<blockquote>\n<p>提交指定tag</p>\n</blockquote>\n<p>$ git push [remote] [tag]</p>\n<blockquote>\n<p>提交所有tag</p>\n</blockquote>\n<p>$ git push [remote] –tags</p>\n<blockquote>\n<p>新建一个分支，指向某个tag</p>\n</blockquote>\n<p>$ git checkout -b [branch] [tag]</p>\n<blockquote>\n<p>下载远程仓库的所有变动</p>\n</blockquote>\n<p>$ git fetch [remote]</p>\n<blockquote>\n<p>显示所有远程仓库</p>\n</blockquote>\n<p>$ git remote -v</p>\n<blockquote>\n<p>显示某个远程仓库的信息</p>\n</blockquote>\n<p>$ git remote show [remote]</p>\n<blockquote>\n<p>增加一个新的远程仓库，并命名</p>\n</blockquote>\n<p>$ git remote add [shortname] [url]</p>\n<blockquote>\n<p>取回远程仓库的变化，并与本地分支合并</p>\n</blockquote>\n<p>$ git pull [remote] [branch]</p>\n<blockquote>\n<p>上传本地指定分支到远程仓库</p>\n</blockquote>\n<p>$ git push [remote] [branch]</p>\n<blockquote>\n<p>强行推送当前分支到远程仓库，即使有冲突</p>\n</blockquote>\n<p>$ git push [remote] –force</p>\n<blockquote>\n<p>推送所有分支到远程仓库</p>\n</blockquote>\n<p>$ git push [remote] –all</p>\n<blockquote>\n<p>显示当前的Git配置</p>\n</blockquote>\n<p>$ git config –list</p>\n<blockquote>\n<p>编辑Git配置文件</p>\n</blockquote>\n<p>$ git config -e [–global]</p>\n<blockquote>\n<p>设置提交代码时的用户信息</p>\n</blockquote>\n<p>$ git config [–global] user.name “[name]”<br>$ git config [–global] user.email “[email address]”</p>\n"},{"title":"java-castor-与XML的数据绑定","date":"2016-09-10T16:00:00.000Z","_content":"\n> 为什么使用XML的格式?\n主要因为XML的`约定`的语法比较丰富,比JSON中仅含的`Object`和`Array`.\n\n![来自知乎](http://upload-images.jianshu.io/upload_images/80378-2c182bb1661d8ac3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n> 关于Castor\n\n![expamle.java](http://upload-images.jianshu.io/upload_images/80378-f59defcbc8787817.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![result.png](http://upload-images.jianshu.io/upload_images/80378-aebad1834dad1e27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n另附 *Java ORM/持久层框架*\nhttps://www.oschina.net/project/tag/126/orm?sort=view&lang=19&os=36\n\n\n参考资源 \nhttps://castor-data-binding.github.io/castor/reference-guide/reference/xml/xml-properties.html\nhttp://www.ibm.com/developerworks/cn/xml/x-bindcastor/\nhttp://blog.csdn.net/p385579058/article/details/8237441\n","source":"_posts/java/java-castor-与XML的数据绑定.md","raw":"---\ntitle: java-castor-与XML的数据绑定\ndate: 2016-09-11\ncategories: \n- java\n---\n\n> 为什么使用XML的格式?\n主要因为XML的`约定`的语法比较丰富,比JSON中仅含的`Object`和`Array`.\n\n![来自知乎](http://upload-images.jianshu.io/upload_images/80378-2c182bb1661d8ac3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n> 关于Castor\n\n![expamle.java](http://upload-images.jianshu.io/upload_images/80378-f59defcbc8787817.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![result.png](http://upload-images.jianshu.io/upload_images/80378-aebad1834dad1e27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n另附 *Java ORM/持久层框架*\nhttps://www.oschina.net/project/tag/126/orm?sort=view&lang=19&os=36\n\n\n参考资源 \nhttps://castor-data-binding.github.io/castor/reference-guide/reference/xml/xml-properties.html\nhttp://www.ibm.com/developerworks/cn/xml/x-bindcastor/\nhttp://blog.csdn.net/p385579058/article/details/8237441\n","slug":"java/java-castor-与XML的数据绑定","published":1,"updated":"2017-02-06T02:11:42.000Z","_id":"ciytgopjh006ns10oc267prbg","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>为什么使用XML的格式?<br>主要因为XML的<code>约定</code>的语法比较丰富,比JSON中仅含的<code>Object</code>和<code>Array</code>.</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-2c182bb1661d8ac3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"来自知乎\"></p>\n<blockquote>\n<p>关于Castor</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-f59defcbc8787817.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"expamle.java\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-aebad1834dad1e27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"result.png\"></p>\n<p>另附 <em>Java ORM/持久层框架</em><br><a href=\"https://www.oschina.net/project/tag/126/orm?sort=view&amp;lang=19&amp;os=36\" target=\"_blank\" rel=\"external\">https://www.oschina.net/project/tag/126/orm?sort=view&amp;lang=19&amp;os=36</a></p>\n<p>参考资源<br><a href=\"https://castor-data-binding.github.io/castor/reference-guide/reference/xml/xml-properties.html\" target=\"_blank\" rel=\"external\">https://castor-data-binding.github.io/castor/reference-guide/reference/xml/xml-properties.html</a><br><a href=\"http://www.ibm.com/developerworks/cn/xml/x-bindcastor/\" target=\"_blank\" rel=\"external\">http://www.ibm.com/developerworks/cn/xml/x-bindcastor/</a><br><a href=\"http://blog.csdn.net/p385579058/article/details/8237441\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/p385579058/article/details/8237441</a></p>\n","excerpt":"","more":"<blockquote>\n<p>为什么使用XML的格式?<br>主要因为XML的<code>约定</code>的语法比较丰富,比JSON中仅含的<code>Object</code>和<code>Array</code>.</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-2c182bb1661d8ac3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"来自知乎\"></p>\n<blockquote>\n<p>关于Castor</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-f59defcbc8787817.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"expamle.java\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-aebad1834dad1e27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"result.png\"></p>\n<p>另附 <em>Java ORM/持久层框架</em><br><a href=\"https://www.oschina.net/project/tag/126/orm?sort=view&amp;lang=19&amp;os=36\">https://www.oschina.net/project/tag/126/orm?sort=view&amp;lang=19&amp;os=36</a></p>\n<p>参考资源<br><a href=\"https://castor-data-binding.github.io/castor/reference-guide/reference/xml/xml-properties.html\">https://castor-data-binding.github.io/castor/reference-guide/reference/xml/xml-properties.html</a><br><a href=\"http://www.ibm.com/developerworks/cn/xml/x-bindcastor/\">http://www.ibm.com/developerworks/cn/xml/x-bindcastor/</a><br><a href=\"http://blog.csdn.net/p385579058/article/details/8237441\">http://blog.csdn.net/p385579058/article/details/8237441</a></p>\n"},{"title":"java-fastjson-解析json配置文件","date":"2016-09-10T16:00:00.000Z","_content":"\n> 需要准备下面工具:\n\n```\n\nfastjson\ncommon-io(文件转化为Stirng)\n网址:http://www.bejson.com/json2javapojo/  (JSON字符串转换成Java实体类(POJO))\n\n```\n\n> json格式如下\n\n```\n\n{\n  \"QRratio\": {\n    \"x\": 111,\n    \"y\": 111,\n    \"width\": 4000,\n    \"height\": 4000\n  },\n  \"Interleaved2of5\": {\n    \"x\": 111,\n    \"y\": 111,\n    \"width\": 4000,\n    \"height\": 4000\n  },\n  \"comment\": \"不同分辨率的情况下获取的区域不一样\"\n}\n\n```\n\n> 生成Java实体类\n\n![bean.png](http://upload-images.jianshu.io/upload_images/80378-f4a3d68c1deb70c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 核心代码块\n\n```\n\n        //配置不同分辨率下不同的QR 和 25 码的配置文件\n        InputStream inputStream = new FileInputStream(\"config/billtype.conf.json\");\n        String text = IOUtils.toString(inputStream,\"utf8\");\n        Root root = JSON.parseObject(text,Root.class);\n\n```\n\n> 导包\n\n```\n\nimport com.alibaba.fastjson.JSON;\nimport com.xudaolong.bean.config.Root;\nimport org.apache.commons.io.IOUtils;\n\nimport java.io.File;\nimport java.io.FileInputStream;\n\n```\n","source":"_posts/java/java-fastjson-解析json配置文件.md","raw":"---\ntitle: java-fastjson-解析json配置文件\ndate: 2016-09-11\ncategories: \n- java\n---\n\n> 需要准备下面工具:\n\n```\n\nfastjson\ncommon-io(文件转化为Stirng)\n网址:http://www.bejson.com/json2javapojo/  (JSON字符串转换成Java实体类(POJO))\n\n```\n\n> json格式如下\n\n```\n\n{\n  \"QRratio\": {\n    \"x\": 111,\n    \"y\": 111,\n    \"width\": 4000,\n    \"height\": 4000\n  },\n  \"Interleaved2of5\": {\n    \"x\": 111,\n    \"y\": 111,\n    \"width\": 4000,\n    \"height\": 4000\n  },\n  \"comment\": \"不同分辨率的情况下获取的区域不一样\"\n}\n\n```\n\n> 生成Java实体类\n\n![bean.png](http://upload-images.jianshu.io/upload_images/80378-f4a3d68c1deb70c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 核心代码块\n\n```\n\n        //配置不同分辨率下不同的QR 和 25 码的配置文件\n        InputStream inputStream = new FileInputStream(\"config/billtype.conf.json\");\n        String text = IOUtils.toString(inputStream,\"utf8\");\n        Root root = JSON.parseObject(text,Root.class);\n\n```\n\n> 导包\n\n```\n\nimport com.alibaba.fastjson.JSON;\nimport com.xudaolong.bean.config.Root;\nimport org.apache.commons.io.IOUtils;\n\nimport java.io.File;\nimport java.io.FileInputStream;\n\n```\n","slug":"java/java-fastjson-解析json配置文件","published":1,"updated":"2017-02-06T02:13:46.000Z","_id":"ciytgopjt006os10otfqoeo98","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>需要准备下面工具:</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">fastjson</div><div class=\"line\">common-io(文件转化为Stirng)</div><div class=\"line\">网址:http://www.bejson.com/json2javapojo/  (JSON字符串转换成Java实体类(POJO))</div></pre></td></tr></table></figure>\n<blockquote>\n<p>json格式如下</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  &quot;QRratio&quot;: &#123;</div><div class=\"line\">    &quot;x&quot;: 111,</div><div class=\"line\">    &quot;y&quot;: 111,</div><div class=\"line\">    &quot;width&quot;: 4000,</div><div class=\"line\">    &quot;height&quot;: 4000</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &quot;Interleaved2of5&quot;: &#123;</div><div class=\"line\">    &quot;x&quot;: 111,</div><div class=\"line\">    &quot;y&quot;: 111,</div><div class=\"line\">    &quot;width&quot;: 4000,</div><div class=\"line\">    &quot;height&quot;: 4000</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &quot;comment&quot;: &quot;不同分辨率的情况下获取的区域不一样&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>生成Java实体类</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-f4a3d68c1deb70c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"bean.png\"></p>\n<blockquote>\n<p>核心代码块</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">//配置不同分辨率下不同的QR 和 25 码的配置文件</div><div class=\"line\">InputStream inputStream = new FileInputStream(&quot;config/billtype.conf.json&quot;);</div><div class=\"line\">String text = IOUtils.toString(inputStream,&quot;utf8&quot;);</div><div class=\"line\">Root root = JSON.parseObject(text,Root.class);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>导包</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">import com.alibaba.fastjson.JSON;</div><div class=\"line\">import com.xudaolong.bean.config.Root;</div><div class=\"line\">import org.apache.commons.io.IOUtils;</div><div class=\"line\"></div><div class=\"line\">import java.io.File;</div><div class=\"line\">import java.io.FileInputStream;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>需要准备下面工具:</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">fastjson</div><div class=\"line\">common-io(文件转化为Stirng)</div><div class=\"line\">网址:http://www.bejson.com/json2javapojo/  (JSON字符串转换成Java实体类(POJO))</div></pre></td></tr></table></figure>\n<blockquote>\n<p>json格式如下</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  &quot;QRratio&quot;: &#123;</div><div class=\"line\">    &quot;x&quot;: 111,</div><div class=\"line\">    &quot;y&quot;: 111,</div><div class=\"line\">    &quot;width&quot;: 4000,</div><div class=\"line\">    &quot;height&quot;: 4000</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &quot;Interleaved2of5&quot;: &#123;</div><div class=\"line\">    &quot;x&quot;: 111,</div><div class=\"line\">    &quot;y&quot;: 111,</div><div class=\"line\">    &quot;width&quot;: 4000,</div><div class=\"line\">    &quot;height&quot;: 4000</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &quot;comment&quot;: &quot;不同分辨率的情况下获取的区域不一样&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>生成Java实体类</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-f4a3d68c1deb70c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"bean.png\"></p>\n<blockquote>\n<p>核心代码块</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">//配置不同分辨率下不同的QR 和 25 码的配置文件</div><div class=\"line\">InputStream inputStream = new FileInputStream(&quot;config/billtype.conf.json&quot;);</div><div class=\"line\">String text = IOUtils.toString(inputStream,&quot;utf8&quot;);</div><div class=\"line\">Root root = JSON.parseObject(text,Root.class);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>导包</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">import com.alibaba.fastjson.JSON;</div><div class=\"line\">import com.xudaolong.bean.config.Root;</div><div class=\"line\">import org.apache.commons.io.IOUtils;</div><div class=\"line\"></div><div class=\"line\">import java.io.File;</div><div class=\"line\">import java.io.FileInputStream;</div></pre></td></tr></table></figure>\n"},{"title":"java-图片切割","date":"2016-09-10T16:00:00.000Z","_content":"\n > 工具类\n\n```\n\npackage com.xudaolong.Utils;\n\nimport javax.imageio.IIOImage;\nimport javax.imageio.ImageIO;\nimport javax.imageio.ImageReader;\nimport javax.imageio.ImageWriter;\nimport javax.imageio.stream.ImageInputStream;\nimport javax.imageio.stream.ImageOutputStream;\nimport java.awt.*;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.Iterator;\n\n\n/**\n * 图像裁剪以及压缩处理工具类\n * <p>\n * 主要针对动态的GIF格式图片裁剪之后，只出现一帧动态效果的现象提供解决方案\n * <p>\n * 提供依赖三方包解决方案（针对GIF格式数据特征一一解析，进行编码解码操作）\n * 提供基于JDK Image I/O 的解决方案(JDK探索失败)\n */\npublic class ImageCutterUtil {\n\n    public enum IMAGE_FORMAT {\n        BMP(\"bmp\"),\n        JPG(\"jpg\"),\n        WBMP(\"wbmp\"),\n        JPEG(\"jpeg\"),\n        PNG(\"png\"),\n        GIF(\"gif\");\n\n        private String value;\n\n        IMAGE_FORMAT(String value) {\n            this.value = value;\n        }\n\n        public String getValue() {\n            return value;\n        }\n\n        public void setValue(String value) {\n            this.value = value;\n        }\n    }\n\n\n    /**\n     * 获取图片格式\n     *\n     * @param file 图片文件\n     * @return 图片格式\n     */\n    public static String getImageFormatName(File file) throws IOException {\n        String formatName = null;\n\n        ImageInputStream iis = ImageIO.createImageInputStream(file);\n        Iterator<ImageReader> imageReader = ImageIO.getImageReaders(iis);\n        if (imageReader.hasNext()) {\n            ImageReader reader = imageReader.next();\n            formatName = reader.getFormatName();\n        }\n\n        return formatName;\n    }\n\n    /*********************** 基于JDK 解决方案     ********************************/\n\n    /**\n     * 读取图片\n     *\n     * @param file 图片文件\n     * @return 图片数据\n     * @throws IOException\n     */\n    public static BufferedImage[] readerImage(File file) throws IOException {\n        BufferedImage sourceImage = ImageIO.read(file);\n        BufferedImage[] images = null;\n        ImageInputStream iis = ImageIO.createImageInputStream(file);\n        Iterator<ImageReader> imageReaders = ImageIO.getImageReaders(iis);\n        if (imageReaders.hasNext()) {\n            ImageReader reader = imageReaders.next();\n            reader.setInput(iis);\n            int imageNumber = reader.getNumImages(true);\n            images = new BufferedImage[imageNumber];\n            for (int i = 0; i < imageNumber; i++) {\n                BufferedImage image = reader.read(i);\n                if (sourceImage.getWidth() > image.getWidth() || sourceImage.getHeight() > image.getHeight()) {\n                    image = zoom(image, sourceImage.getWidth(), sourceImage.getHeight());\n                }\n                images[i] = image;\n            }\n            reader.dispose();\n            iis.close();\n        }\n        return images;\n    }\n\n    /**\n     * 根据要求处理图片\n     *\n     * @param images 图片数组\n     * @param x      横向起始位置\n     * @param y      纵向起始位置\n     * @param width  宽度\n     * @param height 宽度\n     * @return 处理后的图片数组\n     * @throws Exception\n     */\n    public static BufferedImage[] processImage(BufferedImage[] images, int x, int y, int width, int height) throws Exception {\n        if (null == images) {\n            return images;\n        }\n        BufferedImage[] oldImages = images;\n        images = new BufferedImage[images.length];\n        for (int i = 0; i < oldImages.length; i++) {\n            BufferedImage image = oldImages[i];\n            images[i] = image.getSubimage(x, y, width, height);\n        }\n        return images;\n    }\n\n    /**\n     * 写入处理后的图片到file\n     * <p>\n     * 图片后缀根据图片格式生成\n     *\n     * @param images     处理后的图片数据\n     * @param formatName 图片格式\n     * @param file       写入文件对象\n     * @throws Exception\n     */\n    public static void writerImage(BufferedImage[] images, String formatName, File file) throws Exception {\n        Iterator<ImageWriter> imageWriters = ImageIO.getImageWritersByFormatName(formatName);\n        if (imageWriters.hasNext()) {\n            ImageWriter writer = imageWriters.next();\n            String fileName = file.getName();\n            int index = fileName.lastIndexOf(\".\");\n            if (index > 0) {\n                fileName = fileName.substring(0, index + 1) + formatName;\n            }\n            String pathPrefix = getFilePrefixPath(file.getPath());\n            File outFile = new File(pathPrefix + fileName);\n            ImageOutputStream ios = ImageIO.createImageOutputStream(outFile);\n            writer.setOutput(ios);\n\n            if (writer.canWriteSequence()) {\n                writer.prepareWriteSequence(null);\n                for (int i = 0; i < images.length; i++) {\n                    BufferedImage childImage = images[i];\n                    IIOImage image = new IIOImage(childImage, null, null);\n                    writer.writeToSequence(image, null);\n                }\n                writer.endWriteSequence();\n            } else {\n                for (int i = 0; i < images.length; i++) {\n                    writer.write(images[i]);\n                }\n            }\n\n            writer.dispose();\n            ios.close();\n        }\n    }\n\n    /**\n     * 剪切格式图片\n     * <p>\n     * 基于JDK Image I/O解决方案\n     *\n     * @param sourceFile 待剪切图片文件对象\n     * @param destFile   裁剪后保存文件对象\n     * @param x          剪切横向起始位置\n     * @param y          剪切纵向起始位置\n     * @param width      剪切宽度\n     * @param height     剪切宽度\n     * @throws Exception\n     */\n    public static void cutImage(File sourceFile, File destFile, int x, int y, int width, int height) throws Exception {\n        // 读取图片信息\n        BufferedImage[] images = readerImage(sourceFile);\n        // 处理图片\n        images = processImage(images, x, y, width, height);\n        // 获取文件后缀\n        String formatName = getImageFormatName(sourceFile);\n\n        destFile = new File(getPathWithoutSuffix(destFile.getPath()) + formatName);\n\n        // 写入处理后的图片到文件\n        writerImage(images, formatName, destFile);\n    }\n\n\n    /**\n     * 获取系统支持的图片格式\n     */\n    public static void getOSSupportsStandardImageFormat() {\n        String[] readerFormatName = ImageIO.getReaderFormatNames();\n        String[] readerSuffixName = ImageIO.getReaderFileSuffixes();\n        String[] readerMIMEType = ImageIO.getReaderMIMETypes();\n        System.out.println(\"========================= OS supports reader ========================\");\n        System.out.println(\"OS supports reader format name :  \" + Arrays.asList(readerFormatName));\n        System.out.println(\"OS supports reader suffix name :  \" + Arrays.asList(readerSuffixName));\n        System.out.println(\"OS supports reader MIME type :  \" + Arrays.asList(readerMIMEType));\n\n        String[] writerFormatName = ImageIO.getWriterFormatNames();\n        String[] writerSuffixName = ImageIO.getWriterFileSuffixes();\n        String[] writerMIMEType = ImageIO.getWriterMIMETypes();\n\n        System.out.println(\"========================= OS supports writer ========================\");\n        System.out.println(\"OS supports writer format name :  \" + Arrays.asList(writerFormatName));\n        System.out.println(\"OS supports writer suffix name :  \" + Arrays.asList(writerSuffixName));\n        System.out.println(\"OS supports writer MIME type :  \" + Arrays.asList(writerMIMEType));\n    }\n\n    /**\n     * 压缩图片\n     *\n     * @param sourceImage 待压缩图片\n     * @param width       压缩图片高度\n     * @param height      压缩图片宽度\n     */\n    private static BufferedImage zoom(BufferedImage sourceImage, int width, int height) {\n        BufferedImage zoomImage = new BufferedImage(width, height, sourceImage.getType());\n        Image image = sourceImage.getScaledInstance(width, height, Image.SCALE_SMOOTH);\n        Graphics gc = zoomImage.getGraphics();\n        gc.setColor(Color.WHITE);\n        gc.drawImage(image, 0, 0, null);\n        return zoomImage;\n    }\n\n    /**\n     * 获取某个文件的前缀路径\n     * <p>\n     * 不包含文件名的路径\n     *\n     * @param file 当前文件对象\n     * @return\n     * @throws IOException\n     */\n    public static String getFilePrefixPath(File file) throws IOException {\n        String path = null;\n        if (!file.exists()) {\n            throw new IOException(\"not found the file !\");\n        }\n        String fileName = file.getName();\n        path = file.getPath().replace(fileName, \"\");\n        return path;\n    }\n\n    /**\n     * 获取某个文件的前缀路径\n     * <p>\n     * 不包含文件名的路径\n     *\n     * @param path 当前文件路径\n     * @return 不包含文件名的路径\n     * @throws Exception\n     */\n    public static String getFilePrefixPath(String path) throws Exception {\n        if (null == path || path.isEmpty()) throw new Exception(\"文件路径为空！\");\n        int index = path.lastIndexOf(File.separator);\n        if (index > 0) {\n            path = path.substring(0, index + 1);\n        }\n        return path;\n    }\n\n    /**\n     * 获取不包含后缀的文件路径\n     *\n     * @param src\n     * @return\n     */\n    public static String getPathWithoutSuffix(String src) {\n        String path = src;\n        int index = path.lastIndexOf(\".\");\n        if (index > 0) {\n            path = path.substring(0, index + 1);\n        }\n        return path;\n    }\n\n    /**\n     * 获取文件名\n     *\n     * @param filePath 文件路径\n     * @return 文件名\n     * @throws IOException\n     */\n    public static String getFileName(String filePath) throws IOException {\n        File file = new File(filePath);\n        if (!file.exists()) {\n            throw new IOException(\"not found the file !\");\n        }\n        return file.getName();\n    }\n\n\n    /**\n     * @param args\n     * @throws Exception\n     */\n    public static void main(String[] args) throws Exception {\n        // 获取系统支持的图片格式\n//        ImageCutterUtil.getOSSupportsStandardImageFormat();\n\n        try {\n            // 起始坐标，剪切大小\n            int x = 14;\n            int y = 24;\n            int width = 62;\n            int height = 62;\n\n            // 参考图像大小\n            int clientWidth = 88;\n            int clientHeight = 88;\n\n\n            File file = new File(\"/Users/mac/IdeaProjects/QRdemo/resources/src/com/xudaolong/QR/TestQR/QR.jpg\");\n\n\n            BufferedImage image = ImageIO.read(file);\n\n            double destWidth = image.getWidth();\n            double destHeight = image.getHeight();\n\n            if (destWidth < width || destHeight < height)\n                throw new Exception(\"源图大小小于截取图片大小!\");\n\n            double widthRatio = destWidth / clientWidth;\n            double heightRatio = destHeight / clientHeight;\n\n            x = Double.valueOf(x * widthRatio).intValue();\n            y = Double.valueOf(y * heightRatio).intValue();\n            width = Double.valueOf(width * widthRatio).intValue();\n            height = Double.valueOf(height * heightRatio).intValue();\n\n            System.out.println(\"裁剪大小  x:\" + x + \",y:\" + y + \",width:\" + width + \",height:\" + height);\n\n            String formatName = getImageFormatName(file);\n            String pathSuffix = \".\" + formatName;\n            String pathPrefix = getFilePrefixPath(file);\n            String targetPath = pathPrefix + System.currentTimeMillis() + pathSuffix;\n\n            File destFile = new File(targetPath);\n\n            ImageCutterUtil.cutImage(file, destFile, x, y, width, height);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n\n```\n\n\n\n\n> 单方面测试\n\n```\n\n   public void cutQR(String sourcePath) {\n\n        try {\n            File file = new File(sourcePath);\n\n            BufferedImage image = ImageIO.read(file);\n\n            // 起始坐标，剪切大小\n            int x = 14;\n            int y = 25;\n            int width = 62;\n            int height = 62;\n            // 参考图像大小\n            int clientWidth = 88;\n            int clientHeight = 88;\n\n            double destWidth = image.getWidth();\n            double destHeight = image.getHeight();\n\n            if (destWidth < width || destHeight < height)\n                throw new Exception(\"源图大小小于截取图片大小!\");\n\n\n            double widthRatio = destWidth / clientWidth;\n            double heightRatio = destHeight / clientHeight;\n\n            //修改一下单位\n            x = Double.valueOf(x * widthRatio).intValue();\n            y = Double.valueOf(y * heightRatio).intValue();\n            width = Double.valueOf(width * widthRatio).intValue();\n            height = Double.valueOf(height * heightRatio).intValue();\n\n            System.out.println(\"裁剪大小  x:\" + x + \",y:\" + y + \",width:\" + width + \",height:\" + height);\n\n            //获取指定的名字\n//            String formatName = getImageFormatName(file);\n//            String pathSuffix = \".\" + formatName;\n//            String pathPrefix = getFilePrefixPath(file);\n//            String targetPath = pathPrefix + System.currentTimeMillis() + pathSuffix;\n\n            //最后一步进行裁剪到指定的名字\n\n            File destFile = new File(sourcePath);\n\n            ImageCutterUtil.cutImage(file, destFile, x, y, width, height);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n    }\n\n```\n","source":"_posts/java/java-图片切割.md","raw":"---\ntitle: java-图片切割\ndate: 2016-09-11\ncategories: \n- java\n---\n\n > 工具类\n\n```\n\npackage com.xudaolong.Utils;\n\nimport javax.imageio.IIOImage;\nimport javax.imageio.ImageIO;\nimport javax.imageio.ImageReader;\nimport javax.imageio.ImageWriter;\nimport javax.imageio.stream.ImageInputStream;\nimport javax.imageio.stream.ImageOutputStream;\nimport java.awt.*;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.Iterator;\n\n\n/**\n * 图像裁剪以及压缩处理工具类\n * <p>\n * 主要针对动态的GIF格式图片裁剪之后，只出现一帧动态效果的现象提供解决方案\n * <p>\n * 提供依赖三方包解决方案（针对GIF格式数据特征一一解析，进行编码解码操作）\n * 提供基于JDK Image I/O 的解决方案(JDK探索失败)\n */\npublic class ImageCutterUtil {\n\n    public enum IMAGE_FORMAT {\n        BMP(\"bmp\"),\n        JPG(\"jpg\"),\n        WBMP(\"wbmp\"),\n        JPEG(\"jpeg\"),\n        PNG(\"png\"),\n        GIF(\"gif\");\n\n        private String value;\n\n        IMAGE_FORMAT(String value) {\n            this.value = value;\n        }\n\n        public String getValue() {\n            return value;\n        }\n\n        public void setValue(String value) {\n            this.value = value;\n        }\n    }\n\n\n    /**\n     * 获取图片格式\n     *\n     * @param file 图片文件\n     * @return 图片格式\n     */\n    public static String getImageFormatName(File file) throws IOException {\n        String formatName = null;\n\n        ImageInputStream iis = ImageIO.createImageInputStream(file);\n        Iterator<ImageReader> imageReader = ImageIO.getImageReaders(iis);\n        if (imageReader.hasNext()) {\n            ImageReader reader = imageReader.next();\n            formatName = reader.getFormatName();\n        }\n\n        return formatName;\n    }\n\n    /*********************** 基于JDK 解决方案     ********************************/\n\n    /**\n     * 读取图片\n     *\n     * @param file 图片文件\n     * @return 图片数据\n     * @throws IOException\n     */\n    public static BufferedImage[] readerImage(File file) throws IOException {\n        BufferedImage sourceImage = ImageIO.read(file);\n        BufferedImage[] images = null;\n        ImageInputStream iis = ImageIO.createImageInputStream(file);\n        Iterator<ImageReader> imageReaders = ImageIO.getImageReaders(iis);\n        if (imageReaders.hasNext()) {\n            ImageReader reader = imageReaders.next();\n            reader.setInput(iis);\n            int imageNumber = reader.getNumImages(true);\n            images = new BufferedImage[imageNumber];\n            for (int i = 0; i < imageNumber; i++) {\n                BufferedImage image = reader.read(i);\n                if (sourceImage.getWidth() > image.getWidth() || sourceImage.getHeight() > image.getHeight()) {\n                    image = zoom(image, sourceImage.getWidth(), sourceImage.getHeight());\n                }\n                images[i] = image;\n            }\n            reader.dispose();\n            iis.close();\n        }\n        return images;\n    }\n\n    /**\n     * 根据要求处理图片\n     *\n     * @param images 图片数组\n     * @param x      横向起始位置\n     * @param y      纵向起始位置\n     * @param width  宽度\n     * @param height 宽度\n     * @return 处理后的图片数组\n     * @throws Exception\n     */\n    public static BufferedImage[] processImage(BufferedImage[] images, int x, int y, int width, int height) throws Exception {\n        if (null == images) {\n            return images;\n        }\n        BufferedImage[] oldImages = images;\n        images = new BufferedImage[images.length];\n        for (int i = 0; i < oldImages.length; i++) {\n            BufferedImage image = oldImages[i];\n            images[i] = image.getSubimage(x, y, width, height);\n        }\n        return images;\n    }\n\n    /**\n     * 写入处理后的图片到file\n     * <p>\n     * 图片后缀根据图片格式生成\n     *\n     * @param images     处理后的图片数据\n     * @param formatName 图片格式\n     * @param file       写入文件对象\n     * @throws Exception\n     */\n    public static void writerImage(BufferedImage[] images, String formatName, File file) throws Exception {\n        Iterator<ImageWriter> imageWriters = ImageIO.getImageWritersByFormatName(formatName);\n        if (imageWriters.hasNext()) {\n            ImageWriter writer = imageWriters.next();\n            String fileName = file.getName();\n            int index = fileName.lastIndexOf(\".\");\n            if (index > 0) {\n                fileName = fileName.substring(0, index + 1) + formatName;\n            }\n            String pathPrefix = getFilePrefixPath(file.getPath());\n            File outFile = new File(pathPrefix + fileName);\n            ImageOutputStream ios = ImageIO.createImageOutputStream(outFile);\n            writer.setOutput(ios);\n\n            if (writer.canWriteSequence()) {\n                writer.prepareWriteSequence(null);\n                for (int i = 0; i < images.length; i++) {\n                    BufferedImage childImage = images[i];\n                    IIOImage image = new IIOImage(childImage, null, null);\n                    writer.writeToSequence(image, null);\n                }\n                writer.endWriteSequence();\n            } else {\n                for (int i = 0; i < images.length; i++) {\n                    writer.write(images[i]);\n                }\n            }\n\n            writer.dispose();\n            ios.close();\n        }\n    }\n\n    /**\n     * 剪切格式图片\n     * <p>\n     * 基于JDK Image I/O解决方案\n     *\n     * @param sourceFile 待剪切图片文件对象\n     * @param destFile   裁剪后保存文件对象\n     * @param x          剪切横向起始位置\n     * @param y          剪切纵向起始位置\n     * @param width      剪切宽度\n     * @param height     剪切宽度\n     * @throws Exception\n     */\n    public static void cutImage(File sourceFile, File destFile, int x, int y, int width, int height) throws Exception {\n        // 读取图片信息\n        BufferedImage[] images = readerImage(sourceFile);\n        // 处理图片\n        images = processImage(images, x, y, width, height);\n        // 获取文件后缀\n        String formatName = getImageFormatName(sourceFile);\n\n        destFile = new File(getPathWithoutSuffix(destFile.getPath()) + formatName);\n\n        // 写入处理后的图片到文件\n        writerImage(images, formatName, destFile);\n    }\n\n\n    /**\n     * 获取系统支持的图片格式\n     */\n    public static void getOSSupportsStandardImageFormat() {\n        String[] readerFormatName = ImageIO.getReaderFormatNames();\n        String[] readerSuffixName = ImageIO.getReaderFileSuffixes();\n        String[] readerMIMEType = ImageIO.getReaderMIMETypes();\n        System.out.println(\"========================= OS supports reader ========================\");\n        System.out.println(\"OS supports reader format name :  \" + Arrays.asList(readerFormatName));\n        System.out.println(\"OS supports reader suffix name :  \" + Arrays.asList(readerSuffixName));\n        System.out.println(\"OS supports reader MIME type :  \" + Arrays.asList(readerMIMEType));\n\n        String[] writerFormatName = ImageIO.getWriterFormatNames();\n        String[] writerSuffixName = ImageIO.getWriterFileSuffixes();\n        String[] writerMIMEType = ImageIO.getWriterMIMETypes();\n\n        System.out.println(\"========================= OS supports writer ========================\");\n        System.out.println(\"OS supports writer format name :  \" + Arrays.asList(writerFormatName));\n        System.out.println(\"OS supports writer suffix name :  \" + Arrays.asList(writerSuffixName));\n        System.out.println(\"OS supports writer MIME type :  \" + Arrays.asList(writerMIMEType));\n    }\n\n    /**\n     * 压缩图片\n     *\n     * @param sourceImage 待压缩图片\n     * @param width       压缩图片高度\n     * @param height      压缩图片宽度\n     */\n    private static BufferedImage zoom(BufferedImage sourceImage, int width, int height) {\n        BufferedImage zoomImage = new BufferedImage(width, height, sourceImage.getType());\n        Image image = sourceImage.getScaledInstance(width, height, Image.SCALE_SMOOTH);\n        Graphics gc = zoomImage.getGraphics();\n        gc.setColor(Color.WHITE);\n        gc.drawImage(image, 0, 0, null);\n        return zoomImage;\n    }\n\n    /**\n     * 获取某个文件的前缀路径\n     * <p>\n     * 不包含文件名的路径\n     *\n     * @param file 当前文件对象\n     * @return\n     * @throws IOException\n     */\n    public static String getFilePrefixPath(File file) throws IOException {\n        String path = null;\n        if (!file.exists()) {\n            throw new IOException(\"not found the file !\");\n        }\n        String fileName = file.getName();\n        path = file.getPath().replace(fileName, \"\");\n        return path;\n    }\n\n    /**\n     * 获取某个文件的前缀路径\n     * <p>\n     * 不包含文件名的路径\n     *\n     * @param path 当前文件路径\n     * @return 不包含文件名的路径\n     * @throws Exception\n     */\n    public static String getFilePrefixPath(String path) throws Exception {\n        if (null == path || path.isEmpty()) throw new Exception(\"文件路径为空！\");\n        int index = path.lastIndexOf(File.separator);\n        if (index > 0) {\n            path = path.substring(0, index + 1);\n        }\n        return path;\n    }\n\n    /**\n     * 获取不包含后缀的文件路径\n     *\n     * @param src\n     * @return\n     */\n    public static String getPathWithoutSuffix(String src) {\n        String path = src;\n        int index = path.lastIndexOf(\".\");\n        if (index > 0) {\n            path = path.substring(0, index + 1);\n        }\n        return path;\n    }\n\n    /**\n     * 获取文件名\n     *\n     * @param filePath 文件路径\n     * @return 文件名\n     * @throws IOException\n     */\n    public static String getFileName(String filePath) throws IOException {\n        File file = new File(filePath);\n        if (!file.exists()) {\n            throw new IOException(\"not found the file !\");\n        }\n        return file.getName();\n    }\n\n\n    /**\n     * @param args\n     * @throws Exception\n     */\n    public static void main(String[] args) throws Exception {\n        // 获取系统支持的图片格式\n//        ImageCutterUtil.getOSSupportsStandardImageFormat();\n\n        try {\n            // 起始坐标，剪切大小\n            int x = 14;\n            int y = 24;\n            int width = 62;\n            int height = 62;\n\n            // 参考图像大小\n            int clientWidth = 88;\n            int clientHeight = 88;\n\n\n            File file = new File(\"/Users/mac/IdeaProjects/QRdemo/resources/src/com/xudaolong/QR/TestQR/QR.jpg\");\n\n\n            BufferedImage image = ImageIO.read(file);\n\n            double destWidth = image.getWidth();\n            double destHeight = image.getHeight();\n\n            if (destWidth < width || destHeight < height)\n                throw new Exception(\"源图大小小于截取图片大小!\");\n\n            double widthRatio = destWidth / clientWidth;\n            double heightRatio = destHeight / clientHeight;\n\n            x = Double.valueOf(x * widthRatio).intValue();\n            y = Double.valueOf(y * heightRatio).intValue();\n            width = Double.valueOf(width * widthRatio).intValue();\n            height = Double.valueOf(height * heightRatio).intValue();\n\n            System.out.println(\"裁剪大小  x:\" + x + \",y:\" + y + \",width:\" + width + \",height:\" + height);\n\n            String formatName = getImageFormatName(file);\n            String pathSuffix = \".\" + formatName;\n            String pathPrefix = getFilePrefixPath(file);\n            String targetPath = pathPrefix + System.currentTimeMillis() + pathSuffix;\n\n            File destFile = new File(targetPath);\n\n            ImageCutterUtil.cutImage(file, destFile, x, y, width, height);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n\n```\n\n\n\n\n> 单方面测试\n\n```\n\n   public void cutQR(String sourcePath) {\n\n        try {\n            File file = new File(sourcePath);\n\n            BufferedImage image = ImageIO.read(file);\n\n            // 起始坐标，剪切大小\n            int x = 14;\n            int y = 25;\n            int width = 62;\n            int height = 62;\n            // 参考图像大小\n            int clientWidth = 88;\n            int clientHeight = 88;\n\n            double destWidth = image.getWidth();\n            double destHeight = image.getHeight();\n\n            if (destWidth < width || destHeight < height)\n                throw new Exception(\"源图大小小于截取图片大小!\");\n\n\n            double widthRatio = destWidth / clientWidth;\n            double heightRatio = destHeight / clientHeight;\n\n            //修改一下单位\n            x = Double.valueOf(x * widthRatio).intValue();\n            y = Double.valueOf(y * heightRatio).intValue();\n            width = Double.valueOf(width * widthRatio).intValue();\n            height = Double.valueOf(height * heightRatio).intValue();\n\n            System.out.println(\"裁剪大小  x:\" + x + \",y:\" + y + \",width:\" + width + \",height:\" + height);\n\n            //获取指定的名字\n//            String formatName = getImageFormatName(file);\n//            String pathSuffix = \".\" + formatName;\n//            String pathPrefix = getFilePrefixPath(file);\n//            String targetPath = pathPrefix + System.currentTimeMillis() + pathSuffix;\n\n            //最后一步进行裁剪到指定的名字\n\n            File destFile = new File(sourcePath);\n\n            ImageCutterUtil.cutImage(file, destFile, x, y, width, height);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n    }\n\n```\n","slug":"java/java-图片切割","published":1,"updated":"2017-02-06T02:13:53.000Z","_id":"ciytgopk4006ts10oce8s7l6j","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>工具类</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">package com.xudaolong.Utils;</div><div class=\"line\"></div><div class=\"line\">import javax.imageio.IIOImage;</div><div class=\"line\">import javax.imageio.ImageIO;</div><div class=\"line\">import javax.imageio.ImageReader;</div><div class=\"line\">import javax.imageio.ImageWriter;</div><div class=\"line\">import javax.imageio.stream.ImageInputStream;</div><div class=\"line\">import javax.imageio.stream.ImageOutputStream;</div><div class=\"line\">import java.awt.*;</div><div class=\"line\">import java.awt.image.BufferedImage;</div><div class=\"line\">import java.io.File;</div><div class=\"line\">import java.io.IOException;</div><div class=\"line\">import java.util.Arrays;</div><div class=\"line\">import java.util.Iterator;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 图像裁剪以及压缩处理工具类</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * 主要针对动态的GIF格式图片裁剪之后，只出现一帧动态效果的现象提供解决方案</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * 提供依赖三方包解决方案（针对GIF格式数据特征一一解析，进行编码解码操作）</div><div class=\"line\"> * 提供基于JDK Image I/O 的解决方案(JDK探索失败)</div><div class=\"line\"> */</div><div class=\"line\">public class ImageCutterUtil &#123;</div><div class=\"line\"></div><div class=\"line\">    public enum IMAGE_FORMAT &#123;</div><div class=\"line\">        BMP(&quot;bmp&quot;),</div><div class=\"line\">        JPG(&quot;jpg&quot;),</div><div class=\"line\">        WBMP(&quot;wbmp&quot;),</div><div class=\"line\">        JPEG(&quot;jpeg&quot;),</div><div class=\"line\">        PNG(&quot;png&quot;),</div><div class=\"line\">        GIF(&quot;gif&quot;);</div><div class=\"line\"></div><div class=\"line\">        private String value;</div><div class=\"line\"></div><div class=\"line\">        IMAGE_FORMAT(String value) &#123;</div><div class=\"line\">            this.value = value;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public String getValue() &#123;</div><div class=\"line\">            return value;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public void setValue(String value) &#123;</div><div class=\"line\">            this.value = value;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 获取图片格式</div><div class=\"line\">     *</div><div class=\"line\">     * @param file 图片文件</div><div class=\"line\">     * @return 图片格式</div><div class=\"line\">     */</div><div class=\"line\">    public static String getImageFormatName(File file) throws IOException &#123;</div><div class=\"line\">        String formatName = null;</div><div class=\"line\"></div><div class=\"line\">        ImageInputStream iis = ImageIO.createImageInputStream(file);</div><div class=\"line\">        Iterator&lt;ImageReader&gt; imageReader = ImageIO.getImageReaders(iis);</div><div class=\"line\">        if (imageReader.hasNext()) &#123;</div><div class=\"line\">            ImageReader reader = imageReader.next();</div><div class=\"line\">            formatName = reader.getFormatName();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        return formatName;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /*********************** 基于JDK 解决方案     ********************************/</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 读取图片</div><div class=\"line\">     *</div><div class=\"line\">     * @param file 图片文件</div><div class=\"line\">     * @return 图片数据</div><div class=\"line\">     * @throws IOException</div><div class=\"line\">     */</div><div class=\"line\">    public static BufferedImage[] readerImage(File file) throws IOException &#123;</div><div class=\"line\">        BufferedImage sourceImage = ImageIO.read(file);</div><div class=\"line\">        BufferedImage[] images = null;</div><div class=\"line\">        ImageInputStream iis = ImageIO.createImageInputStream(file);</div><div class=\"line\">        Iterator&lt;ImageReader&gt; imageReaders = ImageIO.getImageReaders(iis);</div><div class=\"line\">        if (imageReaders.hasNext()) &#123;</div><div class=\"line\">            ImageReader reader = imageReaders.next();</div><div class=\"line\">            reader.setInput(iis);</div><div class=\"line\">            int imageNumber = reader.getNumImages(true);</div><div class=\"line\">            images = new BufferedImage[imageNumber];</div><div class=\"line\">            for (int i = 0; i &lt; imageNumber; i++) &#123;</div><div class=\"line\">                BufferedImage image = reader.read(i);</div><div class=\"line\">                if (sourceImage.getWidth() &gt; image.getWidth() || sourceImage.getHeight() &gt; image.getHeight()) &#123;</div><div class=\"line\">                    image = zoom(image, sourceImage.getWidth(), sourceImage.getHeight());</div><div class=\"line\">                &#125;</div><div class=\"line\">                images[i] = image;</div><div class=\"line\">            &#125;</div><div class=\"line\">            reader.dispose();</div><div class=\"line\">            iis.close();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return images;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 根据要求处理图片</div><div class=\"line\">     *</div><div class=\"line\">     * @param images 图片数组</div><div class=\"line\">     * @param x      横向起始位置</div><div class=\"line\">     * @param y      纵向起始位置</div><div class=\"line\">     * @param width  宽度</div><div class=\"line\">     * @param height 宽度</div><div class=\"line\">     * @return 处理后的图片数组</div><div class=\"line\">     * @throws Exception</div><div class=\"line\">     */</div><div class=\"line\">    public static BufferedImage[] processImage(BufferedImage[] images, int x, int y, int width, int height) throws Exception &#123;</div><div class=\"line\">        if (null == images) &#123;</div><div class=\"line\">            return images;</div><div class=\"line\">        &#125;</div><div class=\"line\">        BufferedImage[] oldImages = images;</div><div class=\"line\">        images = new BufferedImage[images.length];</div><div class=\"line\">        for (int i = 0; i &lt; oldImages.length; i++) &#123;</div><div class=\"line\">            BufferedImage image = oldImages[i];</div><div class=\"line\">            images[i] = image.getSubimage(x, y, width, height);</div><div class=\"line\">        &#125;</div><div class=\"line\">        return images;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 写入处理后的图片到file</div><div class=\"line\">     * &lt;p&gt;</div><div class=\"line\">     * 图片后缀根据图片格式生成</div><div class=\"line\">     *</div><div class=\"line\">     * @param images     处理后的图片数据</div><div class=\"line\">     * @param formatName 图片格式</div><div class=\"line\">     * @param file       写入文件对象</div><div class=\"line\">     * @throws Exception</div><div class=\"line\">     */</div><div class=\"line\">    public static void writerImage(BufferedImage[] images, String formatName, File file) throws Exception &#123;</div><div class=\"line\">        Iterator&lt;ImageWriter&gt; imageWriters = ImageIO.getImageWritersByFormatName(formatName);</div><div class=\"line\">        if (imageWriters.hasNext()) &#123;</div><div class=\"line\">            ImageWriter writer = imageWriters.next();</div><div class=\"line\">            String fileName = file.getName();</div><div class=\"line\">            int index = fileName.lastIndexOf(&quot;.&quot;);</div><div class=\"line\">            if (index &gt; 0) &#123;</div><div class=\"line\">                fileName = fileName.substring(0, index + 1) + formatName;</div><div class=\"line\">            &#125;</div><div class=\"line\">            String pathPrefix = getFilePrefixPath(file.getPath());</div><div class=\"line\">            File outFile = new File(pathPrefix + fileName);</div><div class=\"line\">            ImageOutputStream ios = ImageIO.createImageOutputStream(outFile);</div><div class=\"line\">            writer.setOutput(ios);</div><div class=\"line\"></div><div class=\"line\">            if (writer.canWriteSequence()) &#123;</div><div class=\"line\">                writer.prepareWriteSequence(null);</div><div class=\"line\">                for (int i = 0; i &lt; images.length; i++) &#123;</div><div class=\"line\">                    BufferedImage childImage = images[i];</div><div class=\"line\">                    IIOImage image = new IIOImage(childImage, null, null);</div><div class=\"line\">                    writer.writeToSequence(image, null);</div><div class=\"line\">                &#125;</div><div class=\"line\">                writer.endWriteSequence();</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                for (int i = 0; i &lt; images.length; i++) &#123;</div><div class=\"line\">                    writer.write(images[i]);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            writer.dispose();</div><div class=\"line\">            ios.close();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 剪切格式图片</div><div class=\"line\">     * &lt;p&gt;</div><div class=\"line\">     * 基于JDK Image I/O解决方案</div><div class=\"line\">     *</div><div class=\"line\">     * @param sourceFile 待剪切图片文件对象</div><div class=\"line\">     * @param destFile   裁剪后保存文件对象</div><div class=\"line\">     * @param x          剪切横向起始位置</div><div class=\"line\">     * @param y          剪切纵向起始位置</div><div class=\"line\">     * @param width      剪切宽度</div><div class=\"line\">     * @param height     剪切宽度</div><div class=\"line\">     * @throws Exception</div><div class=\"line\">     */</div><div class=\"line\">    public static void cutImage(File sourceFile, File destFile, int x, int y, int width, int height) throws Exception &#123;</div><div class=\"line\">        // 读取图片信息</div><div class=\"line\">        BufferedImage[] images = readerImage(sourceFile);</div><div class=\"line\">        // 处理图片</div><div class=\"line\">        images = processImage(images, x, y, width, height);</div><div class=\"line\">        // 获取文件后缀</div><div class=\"line\">        String formatName = getImageFormatName(sourceFile);</div><div class=\"line\"></div><div class=\"line\">        destFile = new File(getPathWithoutSuffix(destFile.getPath()) + formatName);</div><div class=\"line\"></div><div class=\"line\">        // 写入处理后的图片到文件</div><div class=\"line\">        writerImage(images, formatName, destFile);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 获取系统支持的图片格式</div><div class=\"line\">     */</div><div class=\"line\">    public static void getOSSupportsStandardImageFormat() &#123;</div><div class=\"line\">        String[] readerFormatName = ImageIO.getReaderFormatNames();</div><div class=\"line\">        String[] readerSuffixName = ImageIO.getReaderFileSuffixes();</div><div class=\"line\">        String[] readerMIMEType = ImageIO.getReaderMIMETypes();</div><div class=\"line\">        System.out.println(&quot;========================= OS supports reader ========================&quot;);</div><div class=\"line\">        System.out.println(&quot;OS supports reader format name :  &quot; + Arrays.asList(readerFormatName));</div><div class=\"line\">        System.out.println(&quot;OS supports reader suffix name :  &quot; + Arrays.asList(readerSuffixName));</div><div class=\"line\">        System.out.println(&quot;OS supports reader MIME type :  &quot; + Arrays.asList(readerMIMEType));</div><div class=\"line\"></div><div class=\"line\">        String[] writerFormatName = ImageIO.getWriterFormatNames();</div><div class=\"line\">        String[] writerSuffixName = ImageIO.getWriterFileSuffixes();</div><div class=\"line\">        String[] writerMIMEType = ImageIO.getWriterMIMETypes();</div><div class=\"line\"></div><div class=\"line\">        System.out.println(&quot;========================= OS supports writer ========================&quot;);</div><div class=\"line\">        System.out.println(&quot;OS supports writer format name :  &quot; + Arrays.asList(writerFormatName));</div><div class=\"line\">        System.out.println(&quot;OS supports writer suffix name :  &quot; + Arrays.asList(writerSuffixName));</div><div class=\"line\">        System.out.println(&quot;OS supports writer MIME type :  &quot; + Arrays.asList(writerMIMEType));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 压缩图片</div><div class=\"line\">     *</div><div class=\"line\">     * @param sourceImage 待压缩图片</div><div class=\"line\">     * @param width       压缩图片高度</div><div class=\"line\">     * @param height      压缩图片宽度</div><div class=\"line\">     */</div><div class=\"line\">    private static BufferedImage zoom(BufferedImage sourceImage, int width, int height) &#123;</div><div class=\"line\">        BufferedImage zoomImage = new BufferedImage(width, height, sourceImage.getType());</div><div class=\"line\">        Image image = sourceImage.getScaledInstance(width, height, Image.SCALE_SMOOTH);</div><div class=\"line\">        Graphics gc = zoomImage.getGraphics();</div><div class=\"line\">        gc.setColor(Color.WHITE);</div><div class=\"line\">        gc.drawImage(image, 0, 0, null);</div><div class=\"line\">        return zoomImage;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 获取某个文件的前缀路径</div><div class=\"line\">     * &lt;p&gt;</div><div class=\"line\">     * 不包含文件名的路径</div><div class=\"line\">     *</div><div class=\"line\">     * @param file 当前文件对象</div><div class=\"line\">     * @return</div><div class=\"line\">     * @throws IOException</div><div class=\"line\">     */</div><div class=\"line\">    public static String getFilePrefixPath(File file) throws IOException &#123;</div><div class=\"line\">        String path = null;</div><div class=\"line\">        if (!file.exists()) &#123;</div><div class=\"line\">            throw new IOException(&quot;not found the file !&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        String fileName = file.getName();</div><div class=\"line\">        path = file.getPath().replace(fileName, &quot;&quot;);</div><div class=\"line\">        return path;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 获取某个文件的前缀路径</div><div class=\"line\">     * &lt;p&gt;</div><div class=\"line\">     * 不包含文件名的路径</div><div class=\"line\">     *</div><div class=\"line\">     * @param path 当前文件路径</div><div class=\"line\">     * @return 不包含文件名的路径</div><div class=\"line\">     * @throws Exception</div><div class=\"line\">     */</div><div class=\"line\">    public static String getFilePrefixPath(String path) throws Exception &#123;</div><div class=\"line\">        if (null == path || path.isEmpty()) throw new Exception(&quot;文件路径为空！&quot;);</div><div class=\"line\">        int index = path.lastIndexOf(File.separator);</div><div class=\"line\">        if (index &gt; 0) &#123;</div><div class=\"line\">            path = path.substring(0, index + 1);</div><div class=\"line\">        &#125;</div><div class=\"line\">        return path;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 获取不包含后缀的文件路径</div><div class=\"line\">     *</div><div class=\"line\">     * @param src</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    public static String getPathWithoutSuffix(String src) &#123;</div><div class=\"line\">        String path = src;</div><div class=\"line\">        int index = path.lastIndexOf(&quot;.&quot;);</div><div class=\"line\">        if (index &gt; 0) &#123;</div><div class=\"line\">            path = path.substring(0, index + 1);</div><div class=\"line\">        &#125;</div><div class=\"line\">        return path;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 获取文件名</div><div class=\"line\">     *</div><div class=\"line\">     * @param filePath 文件路径</div><div class=\"line\">     * @return 文件名</div><div class=\"line\">     * @throws IOException</div><div class=\"line\">     */</div><div class=\"line\">    public static String getFileName(String filePath) throws IOException &#123;</div><div class=\"line\">        File file = new File(filePath);</div><div class=\"line\">        if (!file.exists()) &#123;</div><div class=\"line\">            throw new IOException(&quot;not found the file !&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        return file.getName();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * @param args</div><div class=\"line\">     * @throws Exception</div><div class=\"line\">     */</div><div class=\"line\">    public static void main(String[] args) throws Exception &#123;</div><div class=\"line\">        // 获取系统支持的图片格式</div><div class=\"line\">//        ImageCutterUtil.getOSSupportsStandardImageFormat();</div><div class=\"line\"></div><div class=\"line\">        try &#123;</div><div class=\"line\">            // 起始坐标，剪切大小</div><div class=\"line\">            int x = 14;</div><div class=\"line\">            int y = 24;</div><div class=\"line\">            int width = 62;</div><div class=\"line\">            int height = 62;</div><div class=\"line\"></div><div class=\"line\">            // 参考图像大小</div><div class=\"line\">            int clientWidth = 88;</div><div class=\"line\">            int clientHeight = 88;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            File file = new File(&quot;/Users/mac/IdeaProjects/QRdemo/resources/src/com/xudaolong/QR/TestQR/QR.jpg&quot;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            BufferedImage image = ImageIO.read(file);</div><div class=\"line\"></div><div class=\"line\">            double destWidth = image.getWidth();</div><div class=\"line\">            double destHeight = image.getHeight();</div><div class=\"line\"></div><div class=\"line\">            if (destWidth &lt; width || destHeight &lt; height)</div><div class=\"line\">                throw new Exception(&quot;源图大小小于截取图片大小!&quot;);</div><div class=\"line\"></div><div class=\"line\">            double widthRatio = destWidth / clientWidth;</div><div class=\"line\">            double heightRatio = destHeight / clientHeight;</div><div class=\"line\"></div><div class=\"line\">            x = Double.valueOf(x * widthRatio).intValue();</div><div class=\"line\">            y = Double.valueOf(y * heightRatio).intValue();</div><div class=\"line\">            width = Double.valueOf(width * widthRatio).intValue();</div><div class=\"line\">            height = Double.valueOf(height * heightRatio).intValue();</div><div class=\"line\"></div><div class=\"line\">            System.out.println(&quot;裁剪大小  x:&quot; + x + &quot;,y:&quot; + y + &quot;,width:&quot; + width + &quot;,height:&quot; + height);</div><div class=\"line\"></div><div class=\"line\">            String formatName = getImageFormatName(file);</div><div class=\"line\">            String pathSuffix = &quot;.&quot; + formatName;</div><div class=\"line\">            String pathPrefix = getFilePrefixPath(file);</div><div class=\"line\">            String targetPath = pathPrefix + System.currentTimeMillis() + pathSuffix;</div><div class=\"line\"></div><div class=\"line\">            File destFile = new File(targetPath);</div><div class=\"line\"></div><div class=\"line\">            ImageCutterUtil.cutImage(file, destFile, x, y, width, height);</div><div class=\"line\"></div><div class=\"line\">        &#125; catch (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>单方面测试</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">   public void cutQR(String sourcePath) &#123;</div><div class=\"line\"></div><div class=\"line\">        try &#123;</div><div class=\"line\">            File file = new File(sourcePath);</div><div class=\"line\"></div><div class=\"line\">            BufferedImage image = ImageIO.read(file);</div><div class=\"line\"></div><div class=\"line\">            // 起始坐标，剪切大小</div><div class=\"line\">            int x = 14;</div><div class=\"line\">            int y = 25;</div><div class=\"line\">            int width = 62;</div><div class=\"line\">            int height = 62;</div><div class=\"line\">            // 参考图像大小</div><div class=\"line\">            int clientWidth = 88;</div><div class=\"line\">            int clientHeight = 88;</div><div class=\"line\"></div><div class=\"line\">            double destWidth = image.getWidth();</div><div class=\"line\">            double destHeight = image.getHeight();</div><div class=\"line\"></div><div class=\"line\">            if (destWidth &lt; width || destHeight &lt; height)</div><div class=\"line\">                throw new Exception(&quot;源图大小小于截取图片大小!&quot;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            double widthRatio = destWidth / clientWidth;</div><div class=\"line\">            double heightRatio = destHeight / clientHeight;</div><div class=\"line\"></div><div class=\"line\">            //修改一下单位</div><div class=\"line\">            x = Double.valueOf(x * widthRatio).intValue();</div><div class=\"line\">            y = Double.valueOf(y * heightRatio).intValue();</div><div class=\"line\">            width = Double.valueOf(width * widthRatio).intValue();</div><div class=\"line\">            height = Double.valueOf(height * heightRatio).intValue();</div><div class=\"line\"></div><div class=\"line\">            System.out.println(&quot;裁剪大小  x:&quot; + x + &quot;,y:&quot; + y + &quot;,width:&quot; + width + &quot;,height:&quot; + height);</div><div class=\"line\"></div><div class=\"line\">            //获取指定的名字</div><div class=\"line\">//            String formatName = getImageFormatName(file);</div><div class=\"line\">//            String pathSuffix = &quot;.&quot; + formatName;</div><div class=\"line\">//            String pathPrefix = getFilePrefixPath(file);</div><div class=\"line\">//            String targetPath = pathPrefix + System.currentTimeMillis() + pathSuffix;</div><div class=\"line\"></div><div class=\"line\">            //最后一步进行裁剪到指定的名字</div><div class=\"line\"></div><div class=\"line\">            File destFile = new File(sourcePath);</div><div class=\"line\"></div><div class=\"line\">            ImageCutterUtil.cutImage(file, destFile, x, y, width, height);</div><div class=\"line\"></div><div class=\"line\">        &#125; catch (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>工具类</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">package com.xudaolong.Utils;</div><div class=\"line\"></div><div class=\"line\">import javax.imageio.IIOImage;</div><div class=\"line\">import javax.imageio.ImageIO;</div><div class=\"line\">import javax.imageio.ImageReader;</div><div class=\"line\">import javax.imageio.ImageWriter;</div><div class=\"line\">import javax.imageio.stream.ImageInputStream;</div><div class=\"line\">import javax.imageio.stream.ImageOutputStream;</div><div class=\"line\">import java.awt.*;</div><div class=\"line\">import java.awt.image.BufferedImage;</div><div class=\"line\">import java.io.File;</div><div class=\"line\">import java.io.IOException;</div><div class=\"line\">import java.util.Arrays;</div><div class=\"line\">import java.util.Iterator;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 图像裁剪以及压缩处理工具类</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * 主要针对动态的GIF格式图片裁剪之后，只出现一帧动态效果的现象提供解决方案</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * 提供依赖三方包解决方案（针对GIF格式数据特征一一解析，进行编码解码操作）</div><div class=\"line\"> * 提供基于JDK Image I/O 的解决方案(JDK探索失败)</div><div class=\"line\"> */</div><div class=\"line\">public class ImageCutterUtil &#123;</div><div class=\"line\"></div><div class=\"line\">    public enum IMAGE_FORMAT &#123;</div><div class=\"line\">        BMP(&quot;bmp&quot;),</div><div class=\"line\">        JPG(&quot;jpg&quot;),</div><div class=\"line\">        WBMP(&quot;wbmp&quot;),</div><div class=\"line\">        JPEG(&quot;jpeg&quot;),</div><div class=\"line\">        PNG(&quot;png&quot;),</div><div class=\"line\">        GIF(&quot;gif&quot;);</div><div class=\"line\"></div><div class=\"line\">        private String value;</div><div class=\"line\"></div><div class=\"line\">        IMAGE_FORMAT(String value) &#123;</div><div class=\"line\">            this.value = value;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public String getValue() &#123;</div><div class=\"line\">            return value;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public void setValue(String value) &#123;</div><div class=\"line\">            this.value = value;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 获取图片格式</div><div class=\"line\">     *</div><div class=\"line\">     * @param file 图片文件</div><div class=\"line\">     * @return 图片格式</div><div class=\"line\">     */</div><div class=\"line\">    public static String getImageFormatName(File file) throws IOException &#123;</div><div class=\"line\">        String formatName = null;</div><div class=\"line\"></div><div class=\"line\">        ImageInputStream iis = ImageIO.createImageInputStream(file);</div><div class=\"line\">        Iterator&lt;ImageReader&gt; imageReader = ImageIO.getImageReaders(iis);</div><div class=\"line\">        if (imageReader.hasNext()) &#123;</div><div class=\"line\">            ImageReader reader = imageReader.next();</div><div class=\"line\">            formatName = reader.getFormatName();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        return formatName;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /*********************** 基于JDK 解决方案     ********************************/</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 读取图片</div><div class=\"line\">     *</div><div class=\"line\">     * @param file 图片文件</div><div class=\"line\">     * @return 图片数据</div><div class=\"line\">     * @throws IOException</div><div class=\"line\">     */</div><div class=\"line\">    public static BufferedImage[] readerImage(File file) throws IOException &#123;</div><div class=\"line\">        BufferedImage sourceImage = ImageIO.read(file);</div><div class=\"line\">        BufferedImage[] images = null;</div><div class=\"line\">        ImageInputStream iis = ImageIO.createImageInputStream(file);</div><div class=\"line\">        Iterator&lt;ImageReader&gt; imageReaders = ImageIO.getImageReaders(iis);</div><div class=\"line\">        if (imageReaders.hasNext()) &#123;</div><div class=\"line\">            ImageReader reader = imageReaders.next();</div><div class=\"line\">            reader.setInput(iis);</div><div class=\"line\">            int imageNumber = reader.getNumImages(true);</div><div class=\"line\">            images = new BufferedImage[imageNumber];</div><div class=\"line\">            for (int i = 0; i &lt; imageNumber; i++) &#123;</div><div class=\"line\">                BufferedImage image = reader.read(i);</div><div class=\"line\">                if (sourceImage.getWidth() &gt; image.getWidth() || sourceImage.getHeight() &gt; image.getHeight()) &#123;</div><div class=\"line\">                    image = zoom(image, sourceImage.getWidth(), sourceImage.getHeight());</div><div class=\"line\">                &#125;</div><div class=\"line\">                images[i] = image;</div><div class=\"line\">            &#125;</div><div class=\"line\">            reader.dispose();</div><div class=\"line\">            iis.close();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return images;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 根据要求处理图片</div><div class=\"line\">     *</div><div class=\"line\">     * @param images 图片数组</div><div class=\"line\">     * @param x      横向起始位置</div><div class=\"line\">     * @param y      纵向起始位置</div><div class=\"line\">     * @param width  宽度</div><div class=\"line\">     * @param height 宽度</div><div class=\"line\">     * @return 处理后的图片数组</div><div class=\"line\">     * @throws Exception</div><div class=\"line\">     */</div><div class=\"line\">    public static BufferedImage[] processImage(BufferedImage[] images, int x, int y, int width, int height) throws Exception &#123;</div><div class=\"line\">        if (null == images) &#123;</div><div class=\"line\">            return images;</div><div class=\"line\">        &#125;</div><div class=\"line\">        BufferedImage[] oldImages = images;</div><div class=\"line\">        images = new BufferedImage[images.length];</div><div class=\"line\">        for (int i = 0; i &lt; oldImages.length; i++) &#123;</div><div class=\"line\">            BufferedImage image = oldImages[i];</div><div class=\"line\">            images[i] = image.getSubimage(x, y, width, height);</div><div class=\"line\">        &#125;</div><div class=\"line\">        return images;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 写入处理后的图片到file</div><div class=\"line\">     * &lt;p&gt;</div><div class=\"line\">     * 图片后缀根据图片格式生成</div><div class=\"line\">     *</div><div class=\"line\">     * @param images     处理后的图片数据</div><div class=\"line\">     * @param formatName 图片格式</div><div class=\"line\">     * @param file       写入文件对象</div><div class=\"line\">     * @throws Exception</div><div class=\"line\">     */</div><div class=\"line\">    public static void writerImage(BufferedImage[] images, String formatName, File file) throws Exception &#123;</div><div class=\"line\">        Iterator&lt;ImageWriter&gt; imageWriters = ImageIO.getImageWritersByFormatName(formatName);</div><div class=\"line\">        if (imageWriters.hasNext()) &#123;</div><div class=\"line\">            ImageWriter writer = imageWriters.next();</div><div class=\"line\">            String fileName = file.getName();</div><div class=\"line\">            int index = fileName.lastIndexOf(&quot;.&quot;);</div><div class=\"line\">            if (index &gt; 0) &#123;</div><div class=\"line\">                fileName = fileName.substring(0, index + 1) + formatName;</div><div class=\"line\">            &#125;</div><div class=\"line\">            String pathPrefix = getFilePrefixPath(file.getPath());</div><div class=\"line\">            File outFile = new File(pathPrefix + fileName);</div><div class=\"line\">            ImageOutputStream ios = ImageIO.createImageOutputStream(outFile);</div><div class=\"line\">            writer.setOutput(ios);</div><div class=\"line\"></div><div class=\"line\">            if (writer.canWriteSequence()) &#123;</div><div class=\"line\">                writer.prepareWriteSequence(null);</div><div class=\"line\">                for (int i = 0; i &lt; images.length; i++) &#123;</div><div class=\"line\">                    BufferedImage childImage = images[i];</div><div class=\"line\">                    IIOImage image = new IIOImage(childImage, null, null);</div><div class=\"line\">                    writer.writeToSequence(image, null);</div><div class=\"line\">                &#125;</div><div class=\"line\">                writer.endWriteSequence();</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                for (int i = 0; i &lt; images.length; i++) &#123;</div><div class=\"line\">                    writer.write(images[i]);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            writer.dispose();</div><div class=\"line\">            ios.close();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 剪切格式图片</div><div class=\"line\">     * &lt;p&gt;</div><div class=\"line\">     * 基于JDK Image I/O解决方案</div><div class=\"line\">     *</div><div class=\"line\">     * @param sourceFile 待剪切图片文件对象</div><div class=\"line\">     * @param destFile   裁剪后保存文件对象</div><div class=\"line\">     * @param x          剪切横向起始位置</div><div class=\"line\">     * @param y          剪切纵向起始位置</div><div class=\"line\">     * @param width      剪切宽度</div><div class=\"line\">     * @param height     剪切宽度</div><div class=\"line\">     * @throws Exception</div><div class=\"line\">     */</div><div class=\"line\">    public static void cutImage(File sourceFile, File destFile, int x, int y, int width, int height) throws Exception &#123;</div><div class=\"line\">        // 读取图片信息</div><div class=\"line\">        BufferedImage[] images = readerImage(sourceFile);</div><div class=\"line\">        // 处理图片</div><div class=\"line\">        images = processImage(images, x, y, width, height);</div><div class=\"line\">        // 获取文件后缀</div><div class=\"line\">        String formatName = getImageFormatName(sourceFile);</div><div class=\"line\"></div><div class=\"line\">        destFile = new File(getPathWithoutSuffix(destFile.getPath()) + formatName);</div><div class=\"line\"></div><div class=\"line\">        // 写入处理后的图片到文件</div><div class=\"line\">        writerImage(images, formatName, destFile);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 获取系统支持的图片格式</div><div class=\"line\">     */</div><div class=\"line\">    public static void getOSSupportsStandardImageFormat() &#123;</div><div class=\"line\">        String[] readerFormatName = ImageIO.getReaderFormatNames();</div><div class=\"line\">        String[] readerSuffixName = ImageIO.getReaderFileSuffixes();</div><div class=\"line\">        String[] readerMIMEType = ImageIO.getReaderMIMETypes();</div><div class=\"line\">        System.out.println(&quot;========================= OS supports reader ========================&quot;);</div><div class=\"line\">        System.out.println(&quot;OS supports reader format name :  &quot; + Arrays.asList(readerFormatName));</div><div class=\"line\">        System.out.println(&quot;OS supports reader suffix name :  &quot; + Arrays.asList(readerSuffixName));</div><div class=\"line\">        System.out.println(&quot;OS supports reader MIME type :  &quot; + Arrays.asList(readerMIMEType));</div><div class=\"line\"></div><div class=\"line\">        String[] writerFormatName = ImageIO.getWriterFormatNames();</div><div class=\"line\">        String[] writerSuffixName = ImageIO.getWriterFileSuffixes();</div><div class=\"line\">        String[] writerMIMEType = ImageIO.getWriterMIMETypes();</div><div class=\"line\"></div><div class=\"line\">        System.out.println(&quot;========================= OS supports writer ========================&quot;);</div><div class=\"line\">        System.out.println(&quot;OS supports writer format name :  &quot; + Arrays.asList(writerFormatName));</div><div class=\"line\">        System.out.println(&quot;OS supports writer suffix name :  &quot; + Arrays.asList(writerSuffixName));</div><div class=\"line\">        System.out.println(&quot;OS supports writer MIME type :  &quot; + Arrays.asList(writerMIMEType));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 压缩图片</div><div class=\"line\">     *</div><div class=\"line\">     * @param sourceImage 待压缩图片</div><div class=\"line\">     * @param width       压缩图片高度</div><div class=\"line\">     * @param height      压缩图片宽度</div><div class=\"line\">     */</div><div class=\"line\">    private static BufferedImage zoom(BufferedImage sourceImage, int width, int height) &#123;</div><div class=\"line\">        BufferedImage zoomImage = new BufferedImage(width, height, sourceImage.getType());</div><div class=\"line\">        Image image = sourceImage.getScaledInstance(width, height, Image.SCALE_SMOOTH);</div><div class=\"line\">        Graphics gc = zoomImage.getGraphics();</div><div class=\"line\">        gc.setColor(Color.WHITE);</div><div class=\"line\">        gc.drawImage(image, 0, 0, null);</div><div class=\"line\">        return zoomImage;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 获取某个文件的前缀路径</div><div class=\"line\">     * &lt;p&gt;</div><div class=\"line\">     * 不包含文件名的路径</div><div class=\"line\">     *</div><div class=\"line\">     * @param file 当前文件对象</div><div class=\"line\">     * @return</div><div class=\"line\">     * @throws IOException</div><div class=\"line\">     */</div><div class=\"line\">    public static String getFilePrefixPath(File file) throws IOException &#123;</div><div class=\"line\">        String path = null;</div><div class=\"line\">        if (!file.exists()) &#123;</div><div class=\"line\">            throw new IOException(&quot;not found the file !&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        String fileName = file.getName();</div><div class=\"line\">        path = file.getPath().replace(fileName, &quot;&quot;);</div><div class=\"line\">        return path;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 获取某个文件的前缀路径</div><div class=\"line\">     * &lt;p&gt;</div><div class=\"line\">     * 不包含文件名的路径</div><div class=\"line\">     *</div><div class=\"line\">     * @param path 当前文件路径</div><div class=\"line\">     * @return 不包含文件名的路径</div><div class=\"line\">     * @throws Exception</div><div class=\"line\">     */</div><div class=\"line\">    public static String getFilePrefixPath(String path) throws Exception &#123;</div><div class=\"line\">        if (null == path || path.isEmpty()) throw new Exception(&quot;文件路径为空！&quot;);</div><div class=\"line\">        int index = path.lastIndexOf(File.separator);</div><div class=\"line\">        if (index &gt; 0) &#123;</div><div class=\"line\">            path = path.substring(0, index + 1);</div><div class=\"line\">        &#125;</div><div class=\"line\">        return path;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 获取不包含后缀的文件路径</div><div class=\"line\">     *</div><div class=\"line\">     * @param src</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    public static String getPathWithoutSuffix(String src) &#123;</div><div class=\"line\">        String path = src;</div><div class=\"line\">        int index = path.lastIndexOf(&quot;.&quot;);</div><div class=\"line\">        if (index &gt; 0) &#123;</div><div class=\"line\">            path = path.substring(0, index + 1);</div><div class=\"line\">        &#125;</div><div class=\"line\">        return path;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 获取文件名</div><div class=\"line\">     *</div><div class=\"line\">     * @param filePath 文件路径</div><div class=\"line\">     * @return 文件名</div><div class=\"line\">     * @throws IOException</div><div class=\"line\">     */</div><div class=\"line\">    public static String getFileName(String filePath) throws IOException &#123;</div><div class=\"line\">        File file = new File(filePath);</div><div class=\"line\">        if (!file.exists()) &#123;</div><div class=\"line\">            throw new IOException(&quot;not found the file !&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        return file.getName();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * @param args</div><div class=\"line\">     * @throws Exception</div><div class=\"line\">     */</div><div class=\"line\">    public static void main(String[] args) throws Exception &#123;</div><div class=\"line\">        // 获取系统支持的图片格式</div><div class=\"line\">//        ImageCutterUtil.getOSSupportsStandardImageFormat();</div><div class=\"line\"></div><div class=\"line\">        try &#123;</div><div class=\"line\">            // 起始坐标，剪切大小</div><div class=\"line\">            int x = 14;</div><div class=\"line\">            int y = 24;</div><div class=\"line\">            int width = 62;</div><div class=\"line\">            int height = 62;</div><div class=\"line\"></div><div class=\"line\">            // 参考图像大小</div><div class=\"line\">            int clientWidth = 88;</div><div class=\"line\">            int clientHeight = 88;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            File file = new File(&quot;/Users/mac/IdeaProjects/QRdemo/resources/src/com/xudaolong/QR/TestQR/QR.jpg&quot;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            BufferedImage image = ImageIO.read(file);</div><div class=\"line\"></div><div class=\"line\">            double destWidth = image.getWidth();</div><div class=\"line\">            double destHeight = image.getHeight();</div><div class=\"line\"></div><div class=\"line\">            if (destWidth &lt; width || destHeight &lt; height)</div><div class=\"line\">                throw new Exception(&quot;源图大小小于截取图片大小!&quot;);</div><div class=\"line\"></div><div class=\"line\">            double widthRatio = destWidth / clientWidth;</div><div class=\"line\">            double heightRatio = destHeight / clientHeight;</div><div class=\"line\"></div><div class=\"line\">            x = Double.valueOf(x * widthRatio).intValue();</div><div class=\"line\">            y = Double.valueOf(y * heightRatio).intValue();</div><div class=\"line\">            width = Double.valueOf(width * widthRatio).intValue();</div><div class=\"line\">            height = Double.valueOf(height * heightRatio).intValue();</div><div class=\"line\"></div><div class=\"line\">            System.out.println(&quot;裁剪大小  x:&quot; + x + &quot;,y:&quot; + y + &quot;,width:&quot; + width + &quot;,height:&quot; + height);</div><div class=\"line\"></div><div class=\"line\">            String formatName = getImageFormatName(file);</div><div class=\"line\">            String pathSuffix = &quot;.&quot; + formatName;</div><div class=\"line\">            String pathPrefix = getFilePrefixPath(file);</div><div class=\"line\">            String targetPath = pathPrefix + System.currentTimeMillis() + pathSuffix;</div><div class=\"line\"></div><div class=\"line\">            File destFile = new File(targetPath);</div><div class=\"line\"></div><div class=\"line\">            ImageCutterUtil.cutImage(file, destFile, x, y, width, height);</div><div class=\"line\"></div><div class=\"line\">        &#125; catch (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>单方面测试</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">   public void cutQR(String sourcePath) &#123;</div><div class=\"line\"></div><div class=\"line\">        try &#123;</div><div class=\"line\">            File file = new File(sourcePath);</div><div class=\"line\"></div><div class=\"line\">            BufferedImage image = ImageIO.read(file);</div><div class=\"line\"></div><div class=\"line\">            // 起始坐标，剪切大小</div><div class=\"line\">            int x = 14;</div><div class=\"line\">            int y = 25;</div><div class=\"line\">            int width = 62;</div><div class=\"line\">            int height = 62;</div><div class=\"line\">            // 参考图像大小</div><div class=\"line\">            int clientWidth = 88;</div><div class=\"line\">            int clientHeight = 88;</div><div class=\"line\"></div><div class=\"line\">            double destWidth = image.getWidth();</div><div class=\"line\">            double destHeight = image.getHeight();</div><div class=\"line\"></div><div class=\"line\">            if (destWidth &lt; width || destHeight &lt; height)</div><div class=\"line\">                throw new Exception(&quot;源图大小小于截取图片大小!&quot;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            double widthRatio = destWidth / clientWidth;</div><div class=\"line\">            double heightRatio = destHeight / clientHeight;</div><div class=\"line\"></div><div class=\"line\">            //修改一下单位</div><div class=\"line\">            x = Double.valueOf(x * widthRatio).intValue();</div><div class=\"line\">            y = Double.valueOf(y * heightRatio).intValue();</div><div class=\"line\">            width = Double.valueOf(width * widthRatio).intValue();</div><div class=\"line\">            height = Double.valueOf(height * heightRatio).intValue();</div><div class=\"line\"></div><div class=\"line\">            System.out.println(&quot;裁剪大小  x:&quot; + x + &quot;,y:&quot; + y + &quot;,width:&quot; + width + &quot;,height:&quot; + height);</div><div class=\"line\"></div><div class=\"line\">            //获取指定的名字</div><div class=\"line\">//            String formatName = getImageFormatName(file);</div><div class=\"line\">//            String pathSuffix = &quot;.&quot; + formatName;</div><div class=\"line\">//            String pathPrefix = getFilePrefixPath(file);</div><div class=\"line\">//            String targetPath = pathPrefix + System.currentTimeMillis() + pathSuffix;</div><div class=\"line\"></div><div class=\"line\">            //最后一步进行裁剪到指定的名字</div><div class=\"line\"></div><div class=\"line\">            File destFile = new File(sourcePath);</div><div class=\"line\"></div><div class=\"line\">            ImageCutterUtil.cutImage(file, destFile, x, y, width, height);</div><div class=\"line\"></div><div class=\"line\">        &#125; catch (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n"},{"title":"java-获取当前文件-class-的相对或绝对路径","date":"2016-09-10T16:00:00.000Z","_content":"\n```\npackage com.xudaolong.Utils;\n\n\nimport java.io.File;\n\n/**\n * Created by xudaolong on 16/7/12.\n */\npublic class Path {\n\n    private static final String TAG = \"Path\";\n\n    /**\n     * 创建不存在的目录\n     * @param c\n     * @param dir\n     * @return\n     */\n    public File rebuildDir(Class c,File dir){\n\n        for (String s : c.getName().split(\"\\\\.\")) {\n            dir = new File(dir, s);\n            if (dir.isDirectory() == false)\n                dir.mkdirs();\n        }\n\n        return dir;\n    }\n\n    /**\n     * 返回指定的路径为 resources\n     *\n     * @param c\n     * @return\n     */\n    public String getDataDir(Class c) {\n\n        //获取当前的路径\n        File dir = new File(System.getProperty(\"user.dir\"));\n\n        //目录resolve\n        dir = new File(dir, \"resources\");\n        dir = this.rebuildDir(c, dir);\n\n        System.out.println(TAG + \"::Using data directory::\" + dir.toString());\n        return dir.toString() + File.separator;\n\n    }\n\n    /**\n     * 返回指定相对路径,相对的是user.dir\n     * @param c\n     * @param desc\n     * @return\n     */\n    public String getDataDir(Class c, String desc) {\n\n        //获取当前的路径\n        File dir = new File(System.getProperty(\"user.dir\"));\n\n        //目录resolve\n        dir = new File(dir, desc);\n        dir = this.rebuildDir(c, dir);\n\n        System.out.println(TAG + \"::Using data directory::\" + dir.toString());\n\n        return dir.toString() + File.separator;\n    }\n\n\n}\n\n```\n","source":"_posts/java/java-获取当前文件-class-的相对或绝对路径.md","raw":"---\ntitle: java-获取当前文件-class-的相对或绝对路径\ndate: 2016-09-11\ncategories: \n- java\n---\n\n```\npackage com.xudaolong.Utils;\n\n\nimport java.io.File;\n\n/**\n * Created by xudaolong on 16/7/12.\n */\npublic class Path {\n\n    private static final String TAG = \"Path\";\n\n    /**\n     * 创建不存在的目录\n     * @param c\n     * @param dir\n     * @return\n     */\n    public File rebuildDir(Class c,File dir){\n\n        for (String s : c.getName().split(\"\\\\.\")) {\n            dir = new File(dir, s);\n            if (dir.isDirectory() == false)\n                dir.mkdirs();\n        }\n\n        return dir;\n    }\n\n    /**\n     * 返回指定的路径为 resources\n     *\n     * @param c\n     * @return\n     */\n    public String getDataDir(Class c) {\n\n        //获取当前的路径\n        File dir = new File(System.getProperty(\"user.dir\"));\n\n        //目录resolve\n        dir = new File(dir, \"resources\");\n        dir = this.rebuildDir(c, dir);\n\n        System.out.println(TAG + \"::Using data directory::\" + dir.toString());\n        return dir.toString() + File.separator;\n\n    }\n\n    /**\n     * 返回指定相对路径,相对的是user.dir\n     * @param c\n     * @param desc\n     * @return\n     */\n    public String getDataDir(Class c, String desc) {\n\n        //获取当前的路径\n        File dir = new File(System.getProperty(\"user.dir\"));\n\n        //目录resolve\n        dir = new File(dir, desc);\n        dir = this.rebuildDir(c, dir);\n\n        System.out.println(TAG + \"::Using data directory::\" + dir.toString());\n\n        return dir.toString() + File.separator;\n    }\n\n\n}\n\n```\n","slug":"java/java-获取当前文件-class-的相对或绝对路径","published":1,"updated":"2017-02-06T02:13:22.000Z","_id":"ciytgopkg006ws10oozyo7f7c","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.xudaolong.Utils;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">import java.io.File;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by xudaolong on 16/7/12.</div><div class=\"line\"> */</div><div class=\"line\">public class Path &#123;</div><div class=\"line\"></div><div class=\"line\">    private static final String TAG = &quot;Path&quot;;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 创建不存在的目录</div><div class=\"line\">     * @param c</div><div class=\"line\">     * @param dir</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    public File rebuildDir(Class c,File dir)&#123;</div><div class=\"line\"></div><div class=\"line\">        for (String s : c.getName().split(&quot;\\\\.&quot;)) &#123;</div><div class=\"line\">            dir = new File(dir, s);</div><div class=\"line\">            if (dir.isDirectory() == false)</div><div class=\"line\">                dir.mkdirs();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        return dir;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 返回指定的路径为 resources</div><div class=\"line\">     *</div><div class=\"line\">     * @param c</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    public String getDataDir(Class c) &#123;</div><div class=\"line\"></div><div class=\"line\">        //获取当前的路径</div><div class=\"line\">        File dir = new File(System.getProperty(&quot;user.dir&quot;));</div><div class=\"line\"></div><div class=\"line\">        //目录resolve</div><div class=\"line\">        dir = new File(dir, &quot;resources&quot;);</div><div class=\"line\">        dir = this.rebuildDir(c, dir);</div><div class=\"line\"></div><div class=\"line\">        System.out.println(TAG + &quot;::Using data directory::&quot; + dir.toString());</div><div class=\"line\">        return dir.toString() + File.separator;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 返回指定相对路径,相对的是user.dir</div><div class=\"line\">     * @param c</div><div class=\"line\">     * @param desc</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    public String getDataDir(Class c, String desc) &#123;</div><div class=\"line\"></div><div class=\"line\">        //获取当前的路径</div><div class=\"line\">        File dir = new File(System.getProperty(&quot;user.dir&quot;));</div><div class=\"line\"></div><div class=\"line\">        //目录resolve</div><div class=\"line\">        dir = new File(dir, desc);</div><div class=\"line\">        dir = this.rebuildDir(c, dir);</div><div class=\"line\"></div><div class=\"line\">        System.out.println(TAG + &quot;::Using data directory::&quot; + dir.toString());</div><div class=\"line\"></div><div class=\"line\">        return dir.toString() + File.separator;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.xudaolong.Utils;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">import java.io.File;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by xudaolong on 16/7/12.</div><div class=\"line\"> */</div><div class=\"line\">public class Path &#123;</div><div class=\"line\"></div><div class=\"line\">    private static final String TAG = &quot;Path&quot;;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 创建不存在的目录</div><div class=\"line\">     * @param c</div><div class=\"line\">     * @param dir</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    public File rebuildDir(Class c,File dir)&#123;</div><div class=\"line\"></div><div class=\"line\">        for (String s : c.getName().split(&quot;\\\\.&quot;)) &#123;</div><div class=\"line\">            dir = new File(dir, s);</div><div class=\"line\">            if (dir.isDirectory() == false)</div><div class=\"line\">                dir.mkdirs();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        return dir;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 返回指定的路径为 resources</div><div class=\"line\">     *</div><div class=\"line\">     * @param c</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    public String getDataDir(Class c) &#123;</div><div class=\"line\"></div><div class=\"line\">        //获取当前的路径</div><div class=\"line\">        File dir = new File(System.getProperty(&quot;user.dir&quot;));</div><div class=\"line\"></div><div class=\"line\">        //目录resolve</div><div class=\"line\">        dir = new File(dir, &quot;resources&quot;);</div><div class=\"line\">        dir = this.rebuildDir(c, dir);</div><div class=\"line\"></div><div class=\"line\">        System.out.println(TAG + &quot;::Using data directory::&quot; + dir.toString());</div><div class=\"line\">        return dir.toString() + File.separator;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 返回指定相对路径,相对的是user.dir</div><div class=\"line\">     * @param c</div><div class=\"line\">     * @param desc</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    public String getDataDir(Class c, String desc) &#123;</div><div class=\"line\"></div><div class=\"line\">        //获取当前的路径</div><div class=\"line\">        File dir = new File(System.getProperty(&quot;user.dir&quot;));</div><div class=\"line\"></div><div class=\"line\">        //目录resolve</div><div class=\"line\">        dir = new File(dir, desc);</div><div class=\"line\">        dir = this.rebuildDir(c, dir);</div><div class=\"line\"></div><div class=\"line\">        System.out.println(TAG + &quot;::Using data directory::&quot; + dir.toString());</div><div class=\"line\"></div><div class=\"line\">        return dir.toString() + File.separator;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"js-Promise-resolve","date":"2016-09-10T16:00:00.000Z","_content":"\n> 功能一:Promise.resolve();\n>立即让promise进行resolve的状态,并返回Promise\n\n> 相同地,Promise.reject(new Error(\"出错了\"))\n\n\n```\nvar p = Promise.resolve(233);\n\np.then(function (v) {\n    console.log(v);\n})\n```\n\n\n> 功能二:将thenable 转换成 promise \n\n```\nvar promise = Promise.resolve($.ajax('/json/comment.json'));// => promise对象\npromise.then(function(value){\n   console.log(value);\n});\n```\n","source":"_posts/Javascript-Promise/js-Promise-resolve.md","raw":"---\ntitle: js-Promise-resolve\ndate: 2016-09-11\ncategories: \n- javascript\n---\n\n> 功能一:Promise.resolve();\n>立即让promise进行resolve的状态,并返回Promise\n\n> 相同地,Promise.reject(new Error(\"出错了\"))\n\n\n```\nvar p = Promise.resolve(233);\n\np.then(function (v) {\n    console.log(v);\n})\n```\n\n\n> 功能二:将thenable 转换成 promise \n\n```\nvar promise = Promise.resolve($.ajax('/json/comment.json'));// => promise对象\npromise.then(function(value){\n   console.log(value);\n});\n```\n","slug":"Javascript-Promise/js-Promise-resolve","published":1,"updated":"2017-02-06T02:49:41.000Z","_id":"ciyti1rj50009i20ohzrwxpwy","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>功能一:Promise.resolve();<br>立即让promise进行resolve的状态,并返回Promise</p>\n<p>相同地,Promise.reject(new Error(“出错了”))</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var p = Promise.resolve(233);</div><div class=\"line\"></div><div class=\"line\">p.then(function (v) &#123;</div><div class=\"line\">    console.log(v);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<blockquote>\n<p>功能二:将thenable 转换成 promise </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var promise = Promise.resolve($.ajax(&apos;/json/comment.json&apos;));// =&gt; promise对象</div><div class=\"line\">promise.then(function(value)&#123;</div><div class=\"line\">   console.log(value);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>功能一:Promise.resolve();<br>立即让promise进行resolve的状态,并返回Promise</p>\n<p>相同地,Promise.reject(new Error(“出错了”))</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var p = Promise.resolve(233);</div><div class=\"line\"></div><div class=\"line\">p.then(function (v) &#123;</div><div class=\"line\">    console.log(v);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<blockquote>\n<p>功能二:将thenable 转换成 promise </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var promise = Promise.resolve($.ajax(&apos;/json/comment.json&apos;));// =&gt; promise对象</div><div class=\"line\">promise.then(function(value)&#123;</div><div class=\"line\">   console.log(value);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n"},{"title":"oracle-关于生成包-存储过程","date":"2016-09-10T16:00:00.000Z","_content":"\n```\ncreate or replace package body package_memo is\n\n  procedure one_procedure is\n\n  end one_procedure ;\n\nend package_memo ;\n\n```\n\n\n![](http://upload-images.jianshu.io/upload_images/80378-e7c7ca9e4696c10f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n![](http://upload-images.jianshu.io/upload_images/80378-d37a833942803590.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/工具/oracle-关于生成包-存储过程.md","raw":"---\ntitle: oracle-关于生成包-存储过程\ndate: 2016-09-11\ncategories: \n- 工具\n---\n\n```\ncreate or replace package body package_memo is\n\n  procedure one_procedure is\n\n  end one_procedure ;\n\nend package_memo ;\n\n```\n\n\n![](http://upload-images.jianshu.io/upload_images/80378-e7c7ca9e4696c10f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n![](http://upload-images.jianshu.io/upload_images/80378-d37a833942803590.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"工具/oracle-关于生成包-存储过程","published":1,"updated":"2017-02-06T02:55:31.000Z","_id":"ciytia1dv0013i20ofr7qo3eu","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">create or replace package body package_memo is</div><div class=\"line\"></div><div class=\"line\">  procedure one_procedure is</div><div class=\"line\"></div><div class=\"line\">  end one_procedure ;</div><div class=\"line\"></div><div class=\"line\">end package_memo ;</div></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-e7c7ca9e4696c10f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-d37a833942803590.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n","excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">create or replace package body package_memo is</div><div class=\"line\"></div><div class=\"line\">  procedure one_procedure is</div><div class=\"line\"></div><div class=\"line\">  end one_procedure ;</div><div class=\"line\"></div><div class=\"line\">end package_memo ;</div></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-e7c7ca9e4696c10f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-d37a833942803590.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n"},{"title":"基于-JetBrains-DataGrip-之-Oracle-PL-SQL-攻略--(一)","date":"2016-09-10T16:00:00.000Z","_content":"\n> 在文集下的所有操作都是基于在 JetBrains DataGrip 上运行,图片的截图是快捷键的名字,请自行修改...\n\n> 启动 DBMS_OUTPUT.PUT_LINE 功能 和 修改 dialog\n\n![Ctrl + F8](http://upload-images.jianshu.io/upload_images/80378-001e159520fcd6e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![先全选再右键修改](http://upload-images.jianshu.io/upload_images/80378-6855b70317c2b400.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 创建代码块\n\n![generate](http://upload-images.jianshu.io/upload_images/80378-320686800e728cf3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 代码循环:从10倒数到0\n\n```\n\nSET SERVEROUTPUT ON;\nDECLARE\n  counter   NUMBER;\nBEGIN\n  FOR counter IN REVERSE 0..10 LOOP\n    DBMS_OUTPUT.PUT_LINE (counter);\n  END LOOP;\nEND;\n/\n\n```\n\n> 命令行或者中断执行脚本\n\n`` sqlplus username/password@database object.sql ``\n\n> 接受用户键盘输入(替换变量),输出的是`` 一条 ``提示消息,若多条就需要循环遍历出来\n\n\n![提示输入值并打印出来](http://upload-images.jianshu.io/upload_images/80378-b458c37f5028666c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n```\n\nSET SERVEROUTPUT ON SIZE 1000000;\nDECLARE\n  id   NUMBER;\nBEGIN\n  SELECT SODTLID\n  INTO id\n  FROM AAAAAAA\n  WHERE SOID = &SOID AND ROWNUM <= 1;\n  DBMS_OUTPUT.PUT_LINE(id);\nEND;\n/\n\n原理剖析:\n    关键是使用了 &符号 进行赋值,若想在其他的地方进行引用替换变量,则在键入 && 符号用来存储该值...\n    也可以在DECLARE声明如下:\n\nSET SERVEROUTPUT ON SIZE 1000000;\nDECLARE\n  souid_input NUMBER := &SOID;\n  id   NUMBER;\nBEGIN\n  SELECT SODTLID\n  INTO id\n  FROM AAAAAAA\n  WHERE SOID = souid_input AND ROWNUM <= 1;\n  DBMS_OUTPUT.PUT_LINE(id);\nEND; \n\n    需要注意的是,如果声明的值的类型是变长字符型 VARCHAR2 ,则使用 单括号.\n    obj VARCHAR(2) := '&String';\n\n```\n\n> 注释\n\n```\n\n-- 这句话是注释\n\n/* 这是注释 */\n\n```\n\n> 引用代码块,好像不支持,提示出报错\n\n``  <<dept_block>> ``  \n\n> 忽略替换变量 \n\n`` '\\' `` 、还可以使用 `` SET DEFINE OFF `` ,另外 ``  SET ESCAPE  `` 设置转义字符\n\n> 改变替换变量字符\n\n`` SET DEFINE ^ `` 进行声明,之后就可以使用 `` ^ `` 代替 `` & ``\n\n> 创建匹配数据库列类型的变量,在DECLAR声明,该优势在会随原型变化而变化....\n\n`` id  AAAAAAA.SODTLID%TYPE; ``\n\n> 使用正则过滤无用的数据库表\n\n```\n\n^.[^0-9]*?(?<!BACKUP)(?<!BK)(?<!LOG)(?<!TMP)(?<!BAK)(?<!TEMP)(?<!TEST)$\n\n(SYS_HM).*\n\ntable:(SYS_HM).*|| table:(WK_).* || view:(HM_).* || view:(WK_).*\n\n```\n\n> 配置常用的JVM 内存 \n\n```\n\n-Xms720m -Xmx2048m\n\n```\n","source":"_posts/工具/基于-JetBrains-DataGrip-之-Oracle-PL-SQL-攻略--(一).md","raw":"---\ntitle: 基于-JetBrains-DataGrip-之-Oracle-PL-SQL-攻略--(一)\ndate: 2016-09-11\ncategories: \n- 工具\n---\n\n> 在文集下的所有操作都是基于在 JetBrains DataGrip 上运行,图片的截图是快捷键的名字,请自行修改...\n\n> 启动 DBMS_OUTPUT.PUT_LINE 功能 和 修改 dialog\n\n![Ctrl + F8](http://upload-images.jianshu.io/upload_images/80378-001e159520fcd6e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![先全选再右键修改](http://upload-images.jianshu.io/upload_images/80378-6855b70317c2b400.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 创建代码块\n\n![generate](http://upload-images.jianshu.io/upload_images/80378-320686800e728cf3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 代码循环:从10倒数到0\n\n```\n\nSET SERVEROUTPUT ON;\nDECLARE\n  counter   NUMBER;\nBEGIN\n  FOR counter IN REVERSE 0..10 LOOP\n    DBMS_OUTPUT.PUT_LINE (counter);\n  END LOOP;\nEND;\n/\n\n```\n\n> 命令行或者中断执行脚本\n\n`` sqlplus username/password@database object.sql ``\n\n> 接受用户键盘输入(替换变量),输出的是`` 一条 ``提示消息,若多条就需要循环遍历出来\n\n\n![提示输入值并打印出来](http://upload-images.jianshu.io/upload_images/80378-b458c37f5028666c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n```\n\nSET SERVEROUTPUT ON SIZE 1000000;\nDECLARE\n  id   NUMBER;\nBEGIN\n  SELECT SODTLID\n  INTO id\n  FROM AAAAAAA\n  WHERE SOID = &SOID AND ROWNUM <= 1;\n  DBMS_OUTPUT.PUT_LINE(id);\nEND;\n/\n\n原理剖析:\n    关键是使用了 &符号 进行赋值,若想在其他的地方进行引用替换变量,则在键入 && 符号用来存储该值...\n    也可以在DECLARE声明如下:\n\nSET SERVEROUTPUT ON SIZE 1000000;\nDECLARE\n  souid_input NUMBER := &SOID;\n  id   NUMBER;\nBEGIN\n  SELECT SODTLID\n  INTO id\n  FROM AAAAAAA\n  WHERE SOID = souid_input AND ROWNUM <= 1;\n  DBMS_OUTPUT.PUT_LINE(id);\nEND; \n\n    需要注意的是,如果声明的值的类型是变长字符型 VARCHAR2 ,则使用 单括号.\n    obj VARCHAR(2) := '&String';\n\n```\n\n> 注释\n\n```\n\n-- 这句话是注释\n\n/* 这是注释 */\n\n```\n\n> 引用代码块,好像不支持,提示出报错\n\n``  <<dept_block>> ``  \n\n> 忽略替换变量 \n\n`` '\\' `` 、还可以使用 `` SET DEFINE OFF `` ,另外 ``  SET ESCAPE  `` 设置转义字符\n\n> 改变替换变量字符\n\n`` SET DEFINE ^ `` 进行声明,之后就可以使用 `` ^ `` 代替 `` & ``\n\n> 创建匹配数据库列类型的变量,在DECLAR声明,该优势在会随原型变化而变化....\n\n`` id  AAAAAAA.SODTLID%TYPE; ``\n\n> 使用正则过滤无用的数据库表\n\n```\n\n^.[^0-9]*?(?<!BACKUP)(?<!BK)(?<!LOG)(?<!TMP)(?<!BAK)(?<!TEMP)(?<!TEST)$\n\n(SYS_HM).*\n\ntable:(SYS_HM).*|| table:(WK_).* || view:(HM_).* || view:(WK_).*\n\n```\n\n> 配置常用的JVM 内存 \n\n```\n\n-Xms720m -Xmx2048m\n\n```\n","slug":"工具/基于-JetBrains-DataGrip-之-Oracle-PL-SQL-攻略--(一)","published":1,"updated":"2017-02-06T02:56:00.000Z","_id":"ciytia1dz0014i20ozbzidxtr","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>在文集下的所有操作都是基于在 JetBrains DataGrip 上运行,图片的截图是快捷键的名字,请自行修改…</p>\n<p>启动 DBMS_OUTPUT.PUT_LINE 功能 和 修改 dialog</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-001e159520fcd6e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Ctrl + F8\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-6855b70317c2b400.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"先全选再右键修改\"></p>\n<blockquote>\n<p>创建代码块</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-320686800e728cf3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"generate\"></p>\n<blockquote>\n<p>代码循环:从10倒数到0</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">SET SERVEROUTPUT ON;</div><div class=\"line\">DECLARE</div><div class=\"line\">  counter   NUMBER;</div><div class=\"line\">BEGIN</div><div class=\"line\">  FOR counter IN REVERSE 0..10 LOOP</div><div class=\"line\">    DBMS_OUTPUT.PUT_LINE (counter);</div><div class=\"line\">  END LOOP;</div><div class=\"line\">END;</div><div class=\"line\">/</div></pre></td></tr></table></figure>\n<blockquote>\n<p>命令行或者中断执行脚本</p>\n</blockquote>\n<p><code>sqlplus username/password@database object.sql</code></p>\n<blockquote>\n<p>接受用户键盘输入(替换变量),输出的是<code>一条</code>提示消息,若多条就需要循环遍历出来</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-b458c37f5028666c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"提示输入值并打印出来\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">SET SERVEROUTPUT ON SIZE 1000000;</div><div class=\"line\">DECLARE</div><div class=\"line\">  id   NUMBER;</div><div class=\"line\">BEGIN</div><div class=\"line\">  SELECT SODTLID</div><div class=\"line\">  INTO id</div><div class=\"line\">  FROM AAAAAAA</div><div class=\"line\">  WHERE SOID = &amp;SOID AND ROWNUM &lt;= 1;</div><div class=\"line\">  DBMS_OUTPUT.PUT_LINE(id);</div><div class=\"line\">END;</div><div class=\"line\">/</div><div class=\"line\"></div><div class=\"line\">原理剖析:</div><div class=\"line\">    关键是使用了 &amp;符号 进行赋值,若想在其他的地方进行引用替换变量,则在键入 &amp;&amp; 符号用来存储该值...</div><div class=\"line\">    也可以在DECLARE声明如下:</div><div class=\"line\"></div><div class=\"line\">SET SERVEROUTPUT ON SIZE 1000000;</div><div class=\"line\">DECLARE</div><div class=\"line\">  souid_input NUMBER := &amp;SOID;</div><div class=\"line\">  id   NUMBER;</div><div class=\"line\">BEGIN</div><div class=\"line\">  SELECT SODTLID</div><div class=\"line\">  INTO id</div><div class=\"line\">  FROM AAAAAAA</div><div class=\"line\">  WHERE SOID = souid_input AND ROWNUM &lt;= 1;</div><div class=\"line\">  DBMS_OUTPUT.PUT_LINE(id);</div><div class=\"line\">END; </div><div class=\"line\"></div><div class=\"line\">    需要注意的是,如果声明的值的类型是变长字符型 VARCHAR2 ,则使用 单括号.</div><div class=\"line\">    obj VARCHAR(2) := &apos;&amp;String&apos;;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注释</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">-- 这句话是注释</div><div class=\"line\"></div><div class=\"line\">/* 这是注释 */</div></pre></td></tr></table></figure>\n<blockquote>\n<p>引用代码块,好像不支持,提示出报错</p>\n</blockquote>\n<p><code>&lt;&lt;dept_block&gt;&gt;</code>  </p>\n<blockquote>\n<p>忽略替换变量 </p>\n</blockquote>\n<p><code>&#39;\\&#39;</code> 、还可以使用 <code>SET DEFINE OFF</code> ,另外 <code>SET ESCAPE</code> 设置转义字符</p>\n<blockquote>\n<p>改变替换变量字符</p>\n</blockquote>\n<p><code>SET DEFINE ^</code> 进行声明,之后就可以使用 <code>^</code> 代替 <code>&amp;</code></p>\n<blockquote>\n<p>创建匹配数据库列类型的变量,在DECLAR声明,该优势在会随原型变化而变化….</p>\n</blockquote>\n<p><code>id  AAAAAAA.SODTLID%TYPE;</code></p>\n<blockquote>\n<p>使用正则过滤无用的数据库表</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">^.[^0-9]*?(?&lt;!BACKUP)(?&lt;!BK)(?&lt;!LOG)(?&lt;!TMP)(?&lt;!BAK)(?&lt;!TEMP)(?&lt;!TEST)$</div><div class=\"line\"></div><div class=\"line\">(SYS_HM).*</div><div class=\"line\"></div><div class=\"line\">table:(SYS_HM).*|| table:(WK_).* || view:(HM_).* || view:(WK_).*</div></pre></td></tr></table></figure>\n<blockquote>\n<p>配置常用的JVM 内存 </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">-Xms720m -Xmx2048m</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>在文集下的所有操作都是基于在 JetBrains DataGrip 上运行,图片的截图是快捷键的名字,请自行修改…</p>\n<p>启动 DBMS_OUTPUT.PUT_LINE 功能 和 修改 dialog</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-001e159520fcd6e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Ctrl + F8\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-6855b70317c2b400.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"先全选再右键修改\"></p>\n<blockquote>\n<p>创建代码块</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-320686800e728cf3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"generate\"></p>\n<blockquote>\n<p>代码循环:从10倒数到0</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">SET SERVEROUTPUT ON;</div><div class=\"line\">DECLARE</div><div class=\"line\">  counter   NUMBER;</div><div class=\"line\">BEGIN</div><div class=\"line\">  FOR counter IN REVERSE 0..10 LOOP</div><div class=\"line\">    DBMS_OUTPUT.PUT_LINE (counter);</div><div class=\"line\">  END LOOP;</div><div class=\"line\">END;</div><div class=\"line\">/</div></pre></td></tr></table></figure>\n<blockquote>\n<p>命令行或者中断执行脚本</p>\n</blockquote>\n<p><code>sqlplus username/password@database object.sql</code></p>\n<blockquote>\n<p>接受用户键盘输入(替换变量),输出的是<code>一条</code>提示消息,若多条就需要循环遍历出来</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-b458c37f5028666c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"提示输入值并打印出来\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">SET SERVEROUTPUT ON SIZE 1000000;</div><div class=\"line\">DECLARE</div><div class=\"line\">  id   NUMBER;</div><div class=\"line\">BEGIN</div><div class=\"line\">  SELECT SODTLID</div><div class=\"line\">  INTO id</div><div class=\"line\">  FROM AAAAAAA</div><div class=\"line\">  WHERE SOID = &amp;SOID AND ROWNUM &lt;= 1;</div><div class=\"line\">  DBMS_OUTPUT.PUT_LINE(id);</div><div class=\"line\">END;</div><div class=\"line\">/</div><div class=\"line\"></div><div class=\"line\">原理剖析:</div><div class=\"line\">    关键是使用了 &amp;符号 进行赋值,若想在其他的地方进行引用替换变量,则在键入 &amp;&amp; 符号用来存储该值...</div><div class=\"line\">    也可以在DECLARE声明如下:</div><div class=\"line\"></div><div class=\"line\">SET SERVEROUTPUT ON SIZE 1000000;</div><div class=\"line\">DECLARE</div><div class=\"line\">  souid_input NUMBER := &amp;SOID;</div><div class=\"line\">  id   NUMBER;</div><div class=\"line\">BEGIN</div><div class=\"line\">  SELECT SODTLID</div><div class=\"line\">  INTO id</div><div class=\"line\">  FROM AAAAAAA</div><div class=\"line\">  WHERE SOID = souid_input AND ROWNUM &lt;= 1;</div><div class=\"line\">  DBMS_OUTPUT.PUT_LINE(id);</div><div class=\"line\">END; </div><div class=\"line\"></div><div class=\"line\">    需要注意的是,如果声明的值的类型是变长字符型 VARCHAR2 ,则使用 单括号.</div><div class=\"line\">    obj VARCHAR(2) := &apos;&amp;String&apos;;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注释</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">-- 这句话是注释</div><div class=\"line\"></div><div class=\"line\">/* 这是注释 */</div></pre></td></tr></table></figure>\n<blockquote>\n<p>引用代码块,好像不支持,提示出报错</p>\n</blockquote>\n<p><code>&lt;&lt;dept_block&gt;&gt;</code>  </p>\n<blockquote>\n<p>忽略替换变量 </p>\n</blockquote>\n<p><code>&#39;\\&#39;</code> 、还可以使用 <code>SET DEFINE OFF</code> ,另外 <code>SET ESCAPE</code> 设置转义字符</p>\n<blockquote>\n<p>改变替换变量字符</p>\n</blockquote>\n<p><code>SET DEFINE ^</code> 进行声明,之后就可以使用 <code>^</code> 代替 <code>&amp;</code></p>\n<blockquote>\n<p>创建匹配数据库列类型的变量,在DECLAR声明,该优势在会随原型变化而变化….</p>\n</blockquote>\n<p><code>id  AAAAAAA.SODTLID%TYPE;</code></p>\n<blockquote>\n<p>使用正则过滤无用的数据库表</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">^.[^0-9]*?(?&lt;!BACKUP)(?&lt;!BK)(?&lt;!LOG)(?&lt;!TMP)(?&lt;!BAK)(?&lt;!TEMP)(?&lt;!TEST)$</div><div class=\"line\"></div><div class=\"line\">(SYS_HM).*</div><div class=\"line\"></div><div class=\"line\">table:(SYS_HM).*|| table:(WK_).* || view:(HM_).* || view:(WK_).*</div></pre></td></tr></table></figure>\n<blockquote>\n<p>配置常用的JVM 内存 </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">-Xms720m -Xmx2048m</div></pre></td></tr></table></figure>\n"},{"title":"基于-JetBrains-DataGrip-之-Oracle-PL-SQL-攻略--(二)","date":"2016-09-10T16:00:00.000Z","_content":"\n> 对异常的检测\n\n```\n\n  EXCEPTION\n  WHEN NO_DATA_FOUND THEN\n    DBMS_OUTPUT.PUT_LINE('无相关匹配的信息');\n  WHEN TOO_MANY_ROWS THEN\n    DBMS_OUTPUT.PUT_LINE('实际返回的行数超出请求的行数');\n\n```\n\n> 使用游标从数据库中检索单行数据,进行两个的FETCH,进而判断结果\n\n```\n\nDECLARE\n\n  --创建一个游标\n  CURSOR emp_cursor IS\n  SELECT first_name, last_name, email\n  FROM employees\n  WHERE employee_id = &emp_id;\n\n  first   \tVARCHAR2(20);\n  last  \tVARCHAR2(25);\n  email \tVARCHAR2(25);\n\nBEGIN\n  --打开游标\n  OPEN emp_cursor;\n  FETCH emp_cursor INTO first, last, email;\n  IF emp_cursor%NOTFOUND THEN\n    RAISE NO_DATA_FOUND;\n  ELSE\n      -- 第二次查找,判断异常\n    FETCH emp_cursor INTO first, last, email;\n    IF emp_cursor%FOUND THEN\n      -- 抛出异常\n      RAISE TOO_MANY_ROWS;\n    ELSE\n      DBMS_OUTPUT.PUT_LINE(\n     'Employee Information for ID: ' || first || ' ' || last || ' - ' || email);\n    END IF;\n  END IF;\n  --关闭游标\n  CLOSE emp_cursor;\n\n     \nEXCEPTION\n  WHEN NO_DATA_FOUND THEN\n    DBMS_OUTPUT.PUT_LINE('No employee matches the given ID');\n WHEN TOO_MANY_ROWS THEN\n    DBMS_OUTPUT.PUT_LINE('More than one employee matches the given ID');\nEND;\n/\n\n```\n\n> 限定列名与变量名-->尽量不一样否者用 圆点标记法利用存储过程限定变量名,也可以使用代码块进行限定...\n\n> 查询结果返回到PL/SQL 记录中\n\n```\n\nDECLARE\n  CURSOR wms_goods_cur IS\n    SELECT\n      GOODSID,\n      GOODSNAME,\n      GOODSINVNAME\n    FROM WMS_GOODS\n    WHERE GOODSID = 1000020598;\n\n  --记录表的行结构\n  wms_good wms_goods_cur%ROWTYPE;\nBEGIN\n  OPEN wms_goods_cur;\n  FETCH wms_goods_cur INTO wms_good;\n  IF wms_goods_cur%FOUND\n  THEN\n    CLOSE wms_goods_cur;\n    DBMS_OUTPUT.PUT_LINE('药品的id:'|| wms_good.GOODSID || ' 药品的名称: ' || wms_good.GOODSNAME ||\n                         ' 药品的别称: ' || wms_good.GOODSINVNAME);\n  ELSE\n    DBMS_OUTPUT.PUT_LINE('没有匹配到的药品');\n  END IF;\n  EXCEPTION\n  WHEN NO_DATA_FOUND THEN\n  DBMS_OUTPUT.PUT_LINE('无匹配的系你');\nEND;\n/\n\n```\n\n> 关于自定义数据结构来接收查询结果\n\n```\n\nDECLARE\n  -- 声明数据结构\n  TYPE wms_goods_info IS RECORD (id WMS_GOODS.GOODSID%TYPE,\n    name WMS_GOODS.GOODSNAME%TYPE,\n    invname WMS_GOODS.GOODSINVNAME%TYPE);\n\n  -- 使用数据接口的变量\n  wms_good_rec wms_goods_info;\nBEGIN\n  -- 填充变量\n  SELECT\n    GOODSID,\n    GOODSNAME,\n    GOODSINVNAME\n  INTO wms_good_rec\n  FROM WMS_GOODS\n  WHERE GOODSID = 1000005274;\n  \n  -- 输出\n  DBMS_OUTPUT.PUT_LINE('药品的id:' || wms_good_rec.id || ' 药品的名称: ' || wms_good_rec.name ||\n                       ' 药品的别称: ' || wms_good_rec.invname);\n  EXCEPTION\n  WHEN NO_DATA_FOUND THEN\n  DBMS_OUTPUT.PUT_LINE('无匹配信息');\n\nEND;\n/\n\n```\n\n> 循环遍历查询的行结果\n\n```\n\n--方案一:直接在 IN 后接一个查询语句\nSET SERVEROUTPUT ON;\nBEGIN\n  DBMS_OUTPUT.ENABLE(1000000);\n  FOR wms_goods IN\n  (\n  SELECT\n    GOODSID,\n    GOODSNAME,\n    GOODSINVNAME\n  FROM WMS_GOODS\n  WHERE GOODSID IS NOT NULL\n  )\n  LOOP\n    DBMS_OUTPUT.PUT_LINE(wms_goods.GOODSID || ' ' || wms_goods.GOODSNAME || ' - ' || wms_goods.GOODSINVNAME);\n  END LOOP;\nEND;\n/\n\n--方案二:构建CURSOR,然后在IN后遍历该游标\nSET SERVEROUTPUT ON;\nDECLARE\n  CURSOR wms_goods IS\n    SELECT\n      GOODSID,\n      GOODSNAME,\n      GOODSINVNAME\n    FROM WMS_GOODS\n    WHERE GOODSID IS NOT NULL;\n\n  emp_rec wms_goods%ROWTYPE;\nBEGIN\n  FOR emp_rec IN wms_goods LOOP\n    DBMS_OUTPUT.PUT_LINE(emp_rec.GOODSID || ' ' || emp_rec.GOODSNAME || ' - ' || emp_rec.GOODSINVNAME);\n  END LOOP;\nEND;\n/\n```\n\n> 获取环境与会话的信息\n\n```\n\nDECLARE\n  username   VARCHAR2(100);\n  ip_address VARCHAR2(100);\nBEGIN\n  SELECT\n    -- 可自定义设置命名空间 另外 USERENV 的参数列表可参考  \n    -- https://docs.oracle.com/cd/B19306_01/server.102/b14200/functions165.htm\n    SYS_CONTEXT('USERENV', 'SESSION_USER'),\n    SYS_CONTEXT('USERENV', 'IP_ADDRESS')\n  INTO username, ip_address\n  FROM DUAL;\n\n  DBMS_OUTPUT.PUT_LINE('The connected user is: ' || username || ', and the IP address is ' ||\n                       ip_address);\nEND obtain_user_info;\n/\n\n\n\n```\n","source":"_posts/工具/基于-JetBrains-DataGrip-之-Oracle-PL-SQL-攻略--(二).md","raw":"---\ntitle: 基于-JetBrains-DataGrip-之-Oracle-PL-SQL-攻略--(二)\ndate: 2016-09-11\ncategories: \n- 工具\n---\n\n> 对异常的检测\n\n```\n\n  EXCEPTION\n  WHEN NO_DATA_FOUND THEN\n    DBMS_OUTPUT.PUT_LINE('无相关匹配的信息');\n  WHEN TOO_MANY_ROWS THEN\n    DBMS_OUTPUT.PUT_LINE('实际返回的行数超出请求的行数');\n\n```\n\n> 使用游标从数据库中检索单行数据,进行两个的FETCH,进而判断结果\n\n```\n\nDECLARE\n\n  --创建一个游标\n  CURSOR emp_cursor IS\n  SELECT first_name, last_name, email\n  FROM employees\n  WHERE employee_id = &emp_id;\n\n  first   \tVARCHAR2(20);\n  last  \tVARCHAR2(25);\n  email \tVARCHAR2(25);\n\nBEGIN\n  --打开游标\n  OPEN emp_cursor;\n  FETCH emp_cursor INTO first, last, email;\n  IF emp_cursor%NOTFOUND THEN\n    RAISE NO_DATA_FOUND;\n  ELSE\n      -- 第二次查找,判断异常\n    FETCH emp_cursor INTO first, last, email;\n    IF emp_cursor%FOUND THEN\n      -- 抛出异常\n      RAISE TOO_MANY_ROWS;\n    ELSE\n      DBMS_OUTPUT.PUT_LINE(\n     'Employee Information for ID: ' || first || ' ' || last || ' - ' || email);\n    END IF;\n  END IF;\n  --关闭游标\n  CLOSE emp_cursor;\n\n     \nEXCEPTION\n  WHEN NO_DATA_FOUND THEN\n    DBMS_OUTPUT.PUT_LINE('No employee matches the given ID');\n WHEN TOO_MANY_ROWS THEN\n    DBMS_OUTPUT.PUT_LINE('More than one employee matches the given ID');\nEND;\n/\n\n```\n\n> 限定列名与变量名-->尽量不一样否者用 圆点标记法利用存储过程限定变量名,也可以使用代码块进行限定...\n\n> 查询结果返回到PL/SQL 记录中\n\n```\n\nDECLARE\n  CURSOR wms_goods_cur IS\n    SELECT\n      GOODSID,\n      GOODSNAME,\n      GOODSINVNAME\n    FROM WMS_GOODS\n    WHERE GOODSID = 1000020598;\n\n  --记录表的行结构\n  wms_good wms_goods_cur%ROWTYPE;\nBEGIN\n  OPEN wms_goods_cur;\n  FETCH wms_goods_cur INTO wms_good;\n  IF wms_goods_cur%FOUND\n  THEN\n    CLOSE wms_goods_cur;\n    DBMS_OUTPUT.PUT_LINE('药品的id:'|| wms_good.GOODSID || ' 药品的名称: ' || wms_good.GOODSNAME ||\n                         ' 药品的别称: ' || wms_good.GOODSINVNAME);\n  ELSE\n    DBMS_OUTPUT.PUT_LINE('没有匹配到的药品');\n  END IF;\n  EXCEPTION\n  WHEN NO_DATA_FOUND THEN\n  DBMS_OUTPUT.PUT_LINE('无匹配的系你');\nEND;\n/\n\n```\n\n> 关于自定义数据结构来接收查询结果\n\n```\n\nDECLARE\n  -- 声明数据结构\n  TYPE wms_goods_info IS RECORD (id WMS_GOODS.GOODSID%TYPE,\n    name WMS_GOODS.GOODSNAME%TYPE,\n    invname WMS_GOODS.GOODSINVNAME%TYPE);\n\n  -- 使用数据接口的变量\n  wms_good_rec wms_goods_info;\nBEGIN\n  -- 填充变量\n  SELECT\n    GOODSID,\n    GOODSNAME,\n    GOODSINVNAME\n  INTO wms_good_rec\n  FROM WMS_GOODS\n  WHERE GOODSID = 1000005274;\n  \n  -- 输出\n  DBMS_OUTPUT.PUT_LINE('药品的id:' || wms_good_rec.id || ' 药品的名称: ' || wms_good_rec.name ||\n                       ' 药品的别称: ' || wms_good_rec.invname);\n  EXCEPTION\n  WHEN NO_DATA_FOUND THEN\n  DBMS_OUTPUT.PUT_LINE('无匹配信息');\n\nEND;\n/\n\n```\n\n> 循环遍历查询的行结果\n\n```\n\n--方案一:直接在 IN 后接一个查询语句\nSET SERVEROUTPUT ON;\nBEGIN\n  DBMS_OUTPUT.ENABLE(1000000);\n  FOR wms_goods IN\n  (\n  SELECT\n    GOODSID,\n    GOODSNAME,\n    GOODSINVNAME\n  FROM WMS_GOODS\n  WHERE GOODSID IS NOT NULL\n  )\n  LOOP\n    DBMS_OUTPUT.PUT_LINE(wms_goods.GOODSID || ' ' || wms_goods.GOODSNAME || ' - ' || wms_goods.GOODSINVNAME);\n  END LOOP;\nEND;\n/\n\n--方案二:构建CURSOR,然后在IN后遍历该游标\nSET SERVEROUTPUT ON;\nDECLARE\n  CURSOR wms_goods IS\n    SELECT\n      GOODSID,\n      GOODSNAME,\n      GOODSINVNAME\n    FROM WMS_GOODS\n    WHERE GOODSID IS NOT NULL;\n\n  emp_rec wms_goods%ROWTYPE;\nBEGIN\n  FOR emp_rec IN wms_goods LOOP\n    DBMS_OUTPUT.PUT_LINE(emp_rec.GOODSID || ' ' || emp_rec.GOODSNAME || ' - ' || emp_rec.GOODSINVNAME);\n  END LOOP;\nEND;\n/\n```\n\n> 获取环境与会话的信息\n\n```\n\nDECLARE\n  username   VARCHAR2(100);\n  ip_address VARCHAR2(100);\nBEGIN\n  SELECT\n    -- 可自定义设置命名空间 另外 USERENV 的参数列表可参考  \n    -- https://docs.oracle.com/cd/B19306_01/server.102/b14200/functions165.htm\n    SYS_CONTEXT('USERENV', 'SESSION_USER'),\n    SYS_CONTEXT('USERENV', 'IP_ADDRESS')\n  INTO username, ip_address\n  FROM DUAL;\n\n  DBMS_OUTPUT.PUT_LINE('The connected user is: ' || username || ', and the IP address is ' ||\n                       ip_address);\nEND obtain_user_info;\n/\n\n\n\n```\n","slug":"工具/基于-JetBrains-DataGrip-之-Oracle-PL-SQL-攻略--(二)","published":1,"updated":"2017-02-06T02:56:05.000Z","_id":"ciytia1ee0017i20o2asb6k65","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>对异常的检测</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">EXCEPTION</div><div class=\"line\">WHEN NO_DATA_FOUND THEN</div><div class=\"line\">  DBMS_OUTPUT.PUT_LINE(&apos;无相关匹配的信息&apos;);</div><div class=\"line\">WHEN TOO_MANY_ROWS THEN</div><div class=\"line\">  DBMS_OUTPUT.PUT_LINE(&apos;实际返回的行数超出请求的行数&apos;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>使用游标从数据库中检索单行数据,进行两个的FETCH,进而判断结果</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">DECLARE</div><div class=\"line\"></div><div class=\"line\">  --创建一个游标</div><div class=\"line\">  CURSOR emp_cursor IS</div><div class=\"line\">  SELECT first_name, last_name, email</div><div class=\"line\">  FROM employees</div><div class=\"line\">  WHERE employee_id = &amp;emp_id;</div><div class=\"line\"></div><div class=\"line\">  first   \tVARCHAR2(20);</div><div class=\"line\">  last  \tVARCHAR2(25);</div><div class=\"line\">  email \tVARCHAR2(25);</div><div class=\"line\"></div><div class=\"line\">BEGIN</div><div class=\"line\">  --打开游标</div><div class=\"line\">  OPEN emp_cursor;</div><div class=\"line\">  FETCH emp_cursor INTO first, last, email;</div><div class=\"line\">  IF emp_cursor%NOTFOUND THEN</div><div class=\"line\">    RAISE NO_DATA_FOUND;</div><div class=\"line\">  ELSE</div><div class=\"line\">      -- 第二次查找,判断异常</div><div class=\"line\">    FETCH emp_cursor INTO first, last, email;</div><div class=\"line\">    IF emp_cursor%FOUND THEN</div><div class=\"line\">      -- 抛出异常</div><div class=\"line\">      RAISE TOO_MANY_ROWS;</div><div class=\"line\">    ELSE</div><div class=\"line\">      DBMS_OUTPUT.PUT_LINE(</div><div class=\"line\">     &apos;Employee Information for ID: &apos; || first || &apos; &apos; || last || &apos; - &apos; || email);</div><div class=\"line\">    END IF;</div><div class=\"line\">  END IF;</div><div class=\"line\">  --关闭游标</div><div class=\"line\">  CLOSE emp_cursor;</div><div class=\"line\"></div><div class=\"line\">     </div><div class=\"line\">EXCEPTION</div><div class=\"line\">  WHEN NO_DATA_FOUND THEN</div><div class=\"line\">    DBMS_OUTPUT.PUT_LINE(&apos;No employee matches the given ID&apos;);</div><div class=\"line\"> WHEN TOO_MANY_ROWS THEN</div><div class=\"line\">    DBMS_OUTPUT.PUT_LINE(&apos;More than one employee matches the given ID&apos;);</div><div class=\"line\">END;</div><div class=\"line\">/</div></pre></td></tr></table></figure>\n<blockquote>\n<p>限定列名与变量名–&gt;尽量不一样否者用 圆点标记法利用存储过程限定变量名,也可以使用代码块进行限定…</p>\n<p>查询结果返回到PL/SQL 记录中</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">DECLARE</div><div class=\"line\">  CURSOR wms_goods_cur IS</div><div class=\"line\">    SELECT</div><div class=\"line\">      GOODSID,</div><div class=\"line\">      GOODSNAME,</div><div class=\"line\">      GOODSINVNAME</div><div class=\"line\">    FROM WMS_GOODS</div><div class=\"line\">    WHERE GOODSID = 1000020598;</div><div class=\"line\"></div><div class=\"line\">  --记录表的行结构</div><div class=\"line\">  wms_good wms_goods_cur%ROWTYPE;</div><div class=\"line\">BEGIN</div><div class=\"line\">  OPEN wms_goods_cur;</div><div class=\"line\">  FETCH wms_goods_cur INTO wms_good;</div><div class=\"line\">  IF wms_goods_cur%FOUND</div><div class=\"line\">  THEN</div><div class=\"line\">    CLOSE wms_goods_cur;</div><div class=\"line\">    DBMS_OUTPUT.PUT_LINE(&apos;药品的id:&apos;|| wms_good.GOODSID || &apos; 药品的名称: &apos; || wms_good.GOODSNAME ||</div><div class=\"line\">                         &apos; 药品的别称: &apos; || wms_good.GOODSINVNAME);</div><div class=\"line\">  ELSE</div><div class=\"line\">    DBMS_OUTPUT.PUT_LINE(&apos;没有匹配到的药品&apos;);</div><div class=\"line\">  END IF;</div><div class=\"line\">  EXCEPTION</div><div class=\"line\">  WHEN NO_DATA_FOUND THEN</div><div class=\"line\">  DBMS_OUTPUT.PUT_LINE(&apos;无匹配的系你&apos;);</div><div class=\"line\">END;</div><div class=\"line\">/</div></pre></td></tr></table></figure>\n<blockquote>\n<p>关于自定义数据结构来接收查询结果</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">DECLARE</div><div class=\"line\">  -- 声明数据结构</div><div class=\"line\">  TYPE wms_goods_info IS RECORD (id WMS_GOODS.GOODSID%TYPE,</div><div class=\"line\">    name WMS_GOODS.GOODSNAME%TYPE,</div><div class=\"line\">    invname WMS_GOODS.GOODSINVNAME%TYPE);</div><div class=\"line\"></div><div class=\"line\">  -- 使用数据接口的变量</div><div class=\"line\">  wms_good_rec wms_goods_info;</div><div class=\"line\">BEGIN</div><div class=\"line\">  -- 填充变量</div><div class=\"line\">  SELECT</div><div class=\"line\">    GOODSID,</div><div class=\"line\">    GOODSNAME,</div><div class=\"line\">    GOODSINVNAME</div><div class=\"line\">  INTO wms_good_rec</div><div class=\"line\">  FROM WMS_GOODS</div><div class=\"line\">  WHERE GOODSID = 1000005274;</div><div class=\"line\">  </div><div class=\"line\">  -- 输出</div><div class=\"line\">  DBMS_OUTPUT.PUT_LINE(&apos;药品的id:&apos; || wms_good_rec.id || &apos; 药品的名称: &apos; || wms_good_rec.name ||</div><div class=\"line\">                       &apos; 药品的别称: &apos; || wms_good_rec.invname);</div><div class=\"line\">  EXCEPTION</div><div class=\"line\">  WHEN NO_DATA_FOUND THEN</div><div class=\"line\">  DBMS_OUTPUT.PUT_LINE(&apos;无匹配信息&apos;);</div><div class=\"line\"></div><div class=\"line\">END;</div><div class=\"line\">/</div></pre></td></tr></table></figure>\n<blockquote>\n<p>循环遍历查询的行结果</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">--方案一:直接在 IN 后接一个查询语句</div><div class=\"line\">SET SERVEROUTPUT ON;</div><div class=\"line\">BEGIN</div><div class=\"line\">  DBMS_OUTPUT.ENABLE(1000000);</div><div class=\"line\">  FOR wms_goods IN</div><div class=\"line\">  (</div><div class=\"line\">  SELECT</div><div class=\"line\">    GOODSID,</div><div class=\"line\">    GOODSNAME,</div><div class=\"line\">    GOODSINVNAME</div><div class=\"line\">  FROM WMS_GOODS</div><div class=\"line\">  WHERE GOODSID IS NOT NULL</div><div class=\"line\">  )</div><div class=\"line\">  LOOP</div><div class=\"line\">    DBMS_OUTPUT.PUT_LINE(wms_goods.GOODSID || &apos; &apos; || wms_goods.GOODSNAME || &apos; - &apos; || wms_goods.GOODSINVNAME);</div><div class=\"line\">  END LOOP;</div><div class=\"line\">END;</div><div class=\"line\">/</div><div class=\"line\"></div><div class=\"line\">--方案二:构建CURSOR,然后在IN后遍历该游标</div><div class=\"line\">SET SERVEROUTPUT ON;</div><div class=\"line\">DECLARE</div><div class=\"line\">  CURSOR wms_goods IS</div><div class=\"line\">    SELECT</div><div class=\"line\">      GOODSID,</div><div class=\"line\">      GOODSNAME,</div><div class=\"line\">      GOODSINVNAME</div><div class=\"line\">    FROM WMS_GOODS</div><div class=\"line\">    WHERE GOODSID IS NOT NULL;</div><div class=\"line\"></div><div class=\"line\">  emp_rec wms_goods%ROWTYPE;</div><div class=\"line\">BEGIN</div><div class=\"line\">  FOR emp_rec IN wms_goods LOOP</div><div class=\"line\">    DBMS_OUTPUT.PUT_LINE(emp_rec.GOODSID || &apos; &apos; || emp_rec.GOODSNAME || &apos; - &apos; || emp_rec.GOODSINVNAME);</div><div class=\"line\">  END LOOP;</div><div class=\"line\">END;</div><div class=\"line\">/</div></pre></td></tr></table></figure>\n<blockquote>\n<p>获取环境与会话的信息</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">DECLARE</div><div class=\"line\">  username   VARCHAR2(100);</div><div class=\"line\">  ip_address VARCHAR2(100);</div><div class=\"line\">BEGIN</div><div class=\"line\">  SELECT</div><div class=\"line\">    -- 可自定义设置命名空间 另外 USERENV 的参数列表可参考  </div><div class=\"line\">    -- https://docs.oracle.com/cd/B19306_01/server.102/b14200/functions165.htm</div><div class=\"line\">    SYS_CONTEXT(&apos;USERENV&apos;, &apos;SESSION_USER&apos;),</div><div class=\"line\">    SYS_CONTEXT(&apos;USERENV&apos;, &apos;IP_ADDRESS&apos;)</div><div class=\"line\">  INTO username, ip_address</div><div class=\"line\">  FROM DUAL;</div><div class=\"line\"></div><div class=\"line\">  DBMS_OUTPUT.PUT_LINE(&apos;The connected user is: &apos; || username || &apos;, and the IP address is &apos; ||</div><div class=\"line\">                       ip_address);</div><div class=\"line\">END obtain_user_info;</div><div class=\"line\">/</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>对异常的检测</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">EXCEPTION</div><div class=\"line\">WHEN NO_DATA_FOUND THEN</div><div class=\"line\">  DBMS_OUTPUT.PUT_LINE(&apos;无相关匹配的信息&apos;);</div><div class=\"line\">WHEN TOO_MANY_ROWS THEN</div><div class=\"line\">  DBMS_OUTPUT.PUT_LINE(&apos;实际返回的行数超出请求的行数&apos;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>使用游标从数据库中检索单行数据,进行两个的FETCH,进而判断结果</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">DECLARE</div><div class=\"line\"></div><div class=\"line\">  --创建一个游标</div><div class=\"line\">  CURSOR emp_cursor IS</div><div class=\"line\">  SELECT first_name, last_name, email</div><div class=\"line\">  FROM employees</div><div class=\"line\">  WHERE employee_id = &amp;emp_id;</div><div class=\"line\"></div><div class=\"line\">  first   \tVARCHAR2(20);</div><div class=\"line\">  last  \tVARCHAR2(25);</div><div class=\"line\">  email \tVARCHAR2(25);</div><div class=\"line\"></div><div class=\"line\">BEGIN</div><div class=\"line\">  --打开游标</div><div class=\"line\">  OPEN emp_cursor;</div><div class=\"line\">  FETCH emp_cursor INTO first, last, email;</div><div class=\"line\">  IF emp_cursor%NOTFOUND THEN</div><div class=\"line\">    RAISE NO_DATA_FOUND;</div><div class=\"line\">  ELSE</div><div class=\"line\">      -- 第二次查找,判断异常</div><div class=\"line\">    FETCH emp_cursor INTO first, last, email;</div><div class=\"line\">    IF emp_cursor%FOUND THEN</div><div class=\"line\">      -- 抛出异常</div><div class=\"line\">      RAISE TOO_MANY_ROWS;</div><div class=\"line\">    ELSE</div><div class=\"line\">      DBMS_OUTPUT.PUT_LINE(</div><div class=\"line\">     &apos;Employee Information for ID: &apos; || first || &apos; &apos; || last || &apos; - &apos; || email);</div><div class=\"line\">    END IF;</div><div class=\"line\">  END IF;</div><div class=\"line\">  --关闭游标</div><div class=\"line\">  CLOSE emp_cursor;</div><div class=\"line\"></div><div class=\"line\">     </div><div class=\"line\">EXCEPTION</div><div class=\"line\">  WHEN NO_DATA_FOUND THEN</div><div class=\"line\">    DBMS_OUTPUT.PUT_LINE(&apos;No employee matches the given ID&apos;);</div><div class=\"line\"> WHEN TOO_MANY_ROWS THEN</div><div class=\"line\">    DBMS_OUTPUT.PUT_LINE(&apos;More than one employee matches the given ID&apos;);</div><div class=\"line\">END;</div><div class=\"line\">/</div></pre></td></tr></table></figure>\n<blockquote>\n<p>限定列名与变量名–&gt;尽量不一样否者用 圆点标记法利用存储过程限定变量名,也可以使用代码块进行限定…</p>\n<p>查询结果返回到PL/SQL 记录中</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">DECLARE</div><div class=\"line\">  CURSOR wms_goods_cur IS</div><div class=\"line\">    SELECT</div><div class=\"line\">      GOODSID,</div><div class=\"line\">      GOODSNAME,</div><div class=\"line\">      GOODSINVNAME</div><div class=\"line\">    FROM WMS_GOODS</div><div class=\"line\">    WHERE GOODSID = 1000020598;</div><div class=\"line\"></div><div class=\"line\">  --记录表的行结构</div><div class=\"line\">  wms_good wms_goods_cur%ROWTYPE;</div><div class=\"line\">BEGIN</div><div class=\"line\">  OPEN wms_goods_cur;</div><div class=\"line\">  FETCH wms_goods_cur INTO wms_good;</div><div class=\"line\">  IF wms_goods_cur%FOUND</div><div class=\"line\">  THEN</div><div class=\"line\">    CLOSE wms_goods_cur;</div><div class=\"line\">    DBMS_OUTPUT.PUT_LINE(&apos;药品的id:&apos;|| wms_good.GOODSID || &apos; 药品的名称: &apos; || wms_good.GOODSNAME ||</div><div class=\"line\">                         &apos; 药品的别称: &apos; || wms_good.GOODSINVNAME);</div><div class=\"line\">  ELSE</div><div class=\"line\">    DBMS_OUTPUT.PUT_LINE(&apos;没有匹配到的药品&apos;);</div><div class=\"line\">  END IF;</div><div class=\"line\">  EXCEPTION</div><div class=\"line\">  WHEN NO_DATA_FOUND THEN</div><div class=\"line\">  DBMS_OUTPUT.PUT_LINE(&apos;无匹配的系你&apos;);</div><div class=\"line\">END;</div><div class=\"line\">/</div></pre></td></tr></table></figure>\n<blockquote>\n<p>关于自定义数据结构来接收查询结果</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">DECLARE</div><div class=\"line\">  -- 声明数据结构</div><div class=\"line\">  TYPE wms_goods_info IS RECORD (id WMS_GOODS.GOODSID%TYPE,</div><div class=\"line\">    name WMS_GOODS.GOODSNAME%TYPE,</div><div class=\"line\">    invname WMS_GOODS.GOODSINVNAME%TYPE);</div><div class=\"line\"></div><div class=\"line\">  -- 使用数据接口的变量</div><div class=\"line\">  wms_good_rec wms_goods_info;</div><div class=\"line\">BEGIN</div><div class=\"line\">  -- 填充变量</div><div class=\"line\">  SELECT</div><div class=\"line\">    GOODSID,</div><div class=\"line\">    GOODSNAME,</div><div class=\"line\">    GOODSINVNAME</div><div class=\"line\">  INTO wms_good_rec</div><div class=\"line\">  FROM WMS_GOODS</div><div class=\"line\">  WHERE GOODSID = 1000005274;</div><div class=\"line\">  </div><div class=\"line\">  -- 输出</div><div class=\"line\">  DBMS_OUTPUT.PUT_LINE(&apos;药品的id:&apos; || wms_good_rec.id || &apos; 药品的名称: &apos; || wms_good_rec.name ||</div><div class=\"line\">                       &apos; 药品的别称: &apos; || wms_good_rec.invname);</div><div class=\"line\">  EXCEPTION</div><div class=\"line\">  WHEN NO_DATA_FOUND THEN</div><div class=\"line\">  DBMS_OUTPUT.PUT_LINE(&apos;无匹配信息&apos;);</div><div class=\"line\"></div><div class=\"line\">END;</div><div class=\"line\">/</div></pre></td></tr></table></figure>\n<blockquote>\n<p>循环遍历查询的行结果</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">--方案一:直接在 IN 后接一个查询语句</div><div class=\"line\">SET SERVEROUTPUT ON;</div><div class=\"line\">BEGIN</div><div class=\"line\">  DBMS_OUTPUT.ENABLE(1000000);</div><div class=\"line\">  FOR wms_goods IN</div><div class=\"line\">  (</div><div class=\"line\">  SELECT</div><div class=\"line\">    GOODSID,</div><div class=\"line\">    GOODSNAME,</div><div class=\"line\">    GOODSINVNAME</div><div class=\"line\">  FROM WMS_GOODS</div><div class=\"line\">  WHERE GOODSID IS NOT NULL</div><div class=\"line\">  )</div><div class=\"line\">  LOOP</div><div class=\"line\">    DBMS_OUTPUT.PUT_LINE(wms_goods.GOODSID || &apos; &apos; || wms_goods.GOODSNAME || &apos; - &apos; || wms_goods.GOODSINVNAME);</div><div class=\"line\">  END LOOP;</div><div class=\"line\">END;</div><div class=\"line\">/</div><div class=\"line\"></div><div class=\"line\">--方案二:构建CURSOR,然后在IN后遍历该游标</div><div class=\"line\">SET SERVEROUTPUT ON;</div><div class=\"line\">DECLARE</div><div class=\"line\">  CURSOR wms_goods IS</div><div class=\"line\">    SELECT</div><div class=\"line\">      GOODSID,</div><div class=\"line\">      GOODSNAME,</div><div class=\"line\">      GOODSINVNAME</div><div class=\"line\">    FROM WMS_GOODS</div><div class=\"line\">    WHERE GOODSID IS NOT NULL;</div><div class=\"line\"></div><div class=\"line\">  emp_rec wms_goods%ROWTYPE;</div><div class=\"line\">BEGIN</div><div class=\"line\">  FOR emp_rec IN wms_goods LOOP</div><div class=\"line\">    DBMS_OUTPUT.PUT_LINE(emp_rec.GOODSID || &apos; &apos; || emp_rec.GOODSNAME || &apos; - &apos; || emp_rec.GOODSINVNAME);</div><div class=\"line\">  END LOOP;</div><div class=\"line\">END;</div><div class=\"line\">/</div></pre></td></tr></table></figure>\n<blockquote>\n<p>获取环境与会话的信息</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">DECLARE</div><div class=\"line\">  username   VARCHAR2(100);</div><div class=\"line\">  ip_address VARCHAR2(100);</div><div class=\"line\">BEGIN</div><div class=\"line\">  SELECT</div><div class=\"line\">    -- 可自定义设置命名空间 另外 USERENV 的参数列表可参考  </div><div class=\"line\">    -- https://docs.oracle.com/cd/B19306_01/server.102/b14200/functions165.htm</div><div class=\"line\">    SYS_CONTEXT(&apos;USERENV&apos;, &apos;SESSION_USER&apos;),</div><div class=\"line\">    SYS_CONTEXT(&apos;USERENV&apos;, &apos;IP_ADDRESS&apos;)</div><div class=\"line\">  INTO username, ip_address</div><div class=\"line\">  FROM DUAL;</div><div class=\"line\"></div><div class=\"line\">  DBMS_OUTPUT.PUT_LINE(&apos;The connected user is: &apos; || username || &apos;, and the IP address is &apos; ||</div><div class=\"line\">                       ip_address);</div><div class=\"line\">END obtain_user_info;</div><div class=\"line\">/</div></pre></td></tr></table></figure>\n"},{"title":"yummyftp-激活码","date":"2016-09-10T16:00:00.000Z","_content":"\nName: Special [K]\nSerial: YUMFTP101-5S6J-LBFK-WL1F-W2WM-8WV1\n","source":"_posts/工具/yummyftp-激活码.md","raw":"---\ntitle: yummyftp-激活码\ndate: 2016-09-11\ncategories: \n- 工具\n---\n\nName: Special [K]\nSerial: YUMFTP101-5S6J-LBFK-WL1F-W2WM-8WV1\n","slug":"工具/yummyftp-激活码","published":1,"updated":"2017-02-06T03:03:13.000Z","_id":"ciytiipr30022i20oa9yhdb79","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Name: Special [K]<br>Serial: YUMFTP101-5S6J-LBFK-WL1F-W2WM-8WV1</p>\n","excerpt":"","more":"<p>Name: Special [K]<br>Serial: YUMFTP101-5S6J-LBFK-WL1F-W2WM-8WV1</p>\n"},{"title":"部署-Nginx","date":"2016-09-10T16:00:00.000Z","_content":"\n> 开机启动\nsudo update-rc.d -f nginx defaults\n\n> 启动\nsudo /etc/init.d/nginx start\n\n> 查看配置的文件\nnginx -t\n\n> 后台启动\nnohup redis-server &\n","source":"_posts/服务器/部署-Nginx.md","raw":"---\ntitle: 部署-Nginx\ndate: 2016-09-11\ncategories: \n- vps\n---\n\n> 开机启动\nsudo update-rc.d -f nginx defaults\n\n> 启动\nsudo /etc/init.d/nginx start\n\n> 查看配置的文件\nnginx -t\n\n> 后台启动\nnohup redis-server &\n","slug":"服务器/部署-Nginx","published":1,"updated":"2017-02-06T03:15:47.000Z","_id":"ciytija3q0026i20ot802vl35","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>开机启动<br>sudo update-rc.d -f nginx defaults</p>\n<p>启动<br>sudo /etc/init.d/nginx start</p>\n<p>查看配置的文件<br>nginx -t</p>\n<p>后台启动<br>nohup redis-server &amp;</p>\n</blockquote>\n","excerpt":"","more":"<blockquote>\n<p>开机启动<br>sudo update-rc.d -f nginx defaults</p>\n<p>启动<br>sudo /etc/init.d/nginx start</p>\n<p>查看配置的文件<br>nginx -t</p>\n<p>后台启动<br>nohup redis-server &amp;</p>\n</blockquote>\n"},{"title":"部署-安装-Node","date":"2016-09-10T16:00:00.000Z","_content":"\n> 安装 node\n\n> 更新yum\n\nyum -y update \n\n> 安装nvm -->https://github.com/creationix/nvm\n\nwget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.31.1/install.sh | bash\n\n> 列出node的最新版本\n\nnvm ls-remote\n\n> 安装指定的版本 / 使用\n\nnvm install 6.2.1  / nvm use **\n","source":"_posts/服务器/部署-安装-Node.md","raw":"---\ntitle: 部署-安装-Node\ndate: 2016-09-11\ncategories: \n- vps\n---\n\n> 安装 node\n\n> 更新yum\n\nyum -y update \n\n> 安装nvm -->https://github.com/creationix/nvm\n\nwget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.31.1/install.sh | bash\n\n> 列出node的最新版本\n\nnvm ls-remote\n\n> 安装指定的版本 / 使用\n\nnvm install 6.2.1  / nvm use **\n","slug":"服务器/部署-安装-Node","published":1,"updated":"2017-02-06T03:16:00.000Z","_id":"ciytijd4v0028i20oucx4a39c","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>安装 node</p>\n<p>更新yum</p>\n</blockquote>\n<p>yum -y update </p>\n<blockquote>\n<p>安装nvm –&gt;<a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"external\">https://github.com/creationix/nvm</a></p>\n</blockquote>\n<p>wget -qO- <a href=\"https://raw.githubusercontent.com/creationix/nvm/v0.31.1/install.sh\" target=\"_blank\" rel=\"external\">https://raw.githubusercontent.com/creationix/nvm/v0.31.1/install.sh</a> | bash</p>\n<blockquote>\n<p>列出node的最新版本</p>\n</blockquote>\n<p>nvm ls-remote</p>\n<blockquote>\n<p>安装指定的版本 / 使用</p>\n</blockquote>\n<p>nvm install 6.2.1  / nvm use **</p>\n","excerpt":"","more":"<blockquote>\n<p>安装 node</p>\n<p>更新yum</p>\n</blockquote>\n<p>yum -y update </p>\n<blockquote>\n<p>安装nvm –&gt;<a href=\"https://github.com/creationix/nvm\">https://github.com/creationix/nvm</a></p>\n</blockquote>\n<p>wget -qO- <a href=\"https://raw.githubusercontent.com/creationix/nvm/v0.31.1/install.sh\">https://raw.githubusercontent.com/creationix/nvm/v0.31.1/install.sh</a> | bash</p>\n<blockquote>\n<p>列出node的最新版本</p>\n</blockquote>\n<p>nvm ls-remote</p>\n<blockquote>\n<p>安装指定的版本 / 使用</p>\n</blockquote>\n<p>nvm install 6.2.1  / nvm use **</p>\n"},{"title":"部署-安装 FTP","date":"2016-09-10T16:00:00.000Z","_content":"\n> vsftpd 组件\n\nyum -y install vsftpd \n\n> 查看当前用户\n\ncat /etc/passwd \n\n> 启动 vsftpd start\n\nservice vsftpd start \n\n> 安装ftp 客户端\n\nyum -y install ftp \n\n> 尝试登陆\n\nftp localhost  \n\n> 取消匿名登陆, anonymous_enable=YES ，改为NO\n\nvi /etc/vsftpd/vsftpd.conf \n\n> 创建用户名修改密码\n\nuseradd ftpuser \n\npasswd ftpuser \n","source":"_posts/服务器/部署-安装FTP-.md","raw":"---\ntitle: 部署-安装 FTP\ndate: 2016-09-11\ncategories: \n- vps\n---\n\n> vsftpd 组件\n\nyum -y install vsftpd \n\n> 查看当前用户\n\ncat /etc/passwd \n\n> 启动 vsftpd start\n\nservice vsftpd start \n\n> 安装ftp 客户端\n\nyum -y install ftp \n\n> 尝试登陆\n\nftp localhost  \n\n> 取消匿名登陆, anonymous_enable=YES ，改为NO\n\nvi /etc/vsftpd/vsftpd.conf \n\n> 创建用户名修改密码\n\nuseradd ftpuser \n\npasswd ftpuser \n","slug":"服务器/部署-安装FTP-","published":1,"updated":"2017-02-06T03:16:06.000Z","_id":"ciytijgjg002ai20o3kcxwv73","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>vsftpd 组件</p>\n</blockquote>\n<p>yum -y install vsftpd </p>\n<blockquote>\n<p>查看当前用户</p>\n</blockquote>\n<p>cat /etc/passwd </p>\n<blockquote>\n<p>启动 vsftpd start</p>\n</blockquote>\n<p>service vsftpd start </p>\n<blockquote>\n<p>安装ftp 客户端</p>\n</blockquote>\n<p>yum -y install ftp </p>\n<blockquote>\n<p>尝试登陆</p>\n</blockquote>\n<p>ftp localhost  </p>\n<blockquote>\n<p>取消匿名登陆, anonymous_enable=YES ，改为NO</p>\n</blockquote>\n<p>vi /etc/vsftpd/vsftpd.conf </p>\n<blockquote>\n<p>创建用户名修改密码</p>\n</blockquote>\n<p>useradd ftpuser </p>\n<p>passwd ftpuser </p>\n","excerpt":"","more":"<blockquote>\n<p>vsftpd 组件</p>\n</blockquote>\n<p>yum -y install vsftpd </p>\n<blockquote>\n<p>查看当前用户</p>\n</blockquote>\n<p>cat /etc/passwd </p>\n<blockquote>\n<p>启动 vsftpd start</p>\n</blockquote>\n<p>service vsftpd start </p>\n<blockquote>\n<p>安装ftp 客户端</p>\n</blockquote>\n<p>yum -y install ftp </p>\n<blockquote>\n<p>尝试登陆</p>\n</blockquote>\n<p>ftp localhost  </p>\n<blockquote>\n<p>取消匿名登陆, anonymous_enable=YES ，改为NO</p>\n</blockquote>\n<p>vi /etc/vsftpd/vsftpd.conf </p>\n<blockquote>\n<p>创建用户名修改密码</p>\n</blockquote>\n<p>useradd ftpuser </p>\n<p>passwd ftpuser </p>\n"},{"title":"配置-VPN-常用操作","date":"2016-09-10T16:00:00.000Z","_content":"\n> 启动\nservice iptables restart\nchkconfig iptables on\n\nservice pptpd restart\nchkconfig pptpd on\nclear\n\n> 添加用户\nvi /etc/ppp/chap-secrets\n\n\n> https://blog.linuxeye.com/412.html\n","source":"_posts/服务器/部署-VPN-常用操作.md","raw":"---\ntitle: 配置-VPN-常用操作\ndate: 2016-09-11\ncategories: \n- vps\n---\n\n> 启动\nservice iptables restart\nchkconfig iptables on\n\nservice pptpd restart\nchkconfig pptpd on\nclear\n\n> 添加用户\nvi /etc/ppp/chap-secrets\n\n\n> https://blog.linuxeye.com/412.html\n","slug":"服务器/部署-VPN-常用操作","published":1,"updated":"2017-02-06T03:16:00.000Z","_id":"ciytijmi8002ci20oqxb2bcls","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>启动<br>service iptables restart<br>chkconfig iptables on</p>\n</blockquote>\n<p>service pptpd restart<br>chkconfig pptpd on<br>clear</p>\n<blockquote>\n<p>添加用户<br>vi /etc/ppp/chap-secrets</p>\n<p><a href=\"https://blog.linuxeye.com/412.html\" target=\"_blank\" rel=\"external\">https://blog.linuxeye.com/412.html</a></p>\n</blockquote>\n","excerpt":"","more":"<blockquote>\n<p>启动<br>service iptables restart<br>chkconfig iptables on</p>\n</blockquote>\n<p>service pptpd restart<br>chkconfig pptpd on<br>clear</p>\n<blockquote>\n<p>添加用户<br>vi /etc/ppp/chap-secrets</p>\n<p><a href=\"https://blog.linuxeye.com/412.html\">https://blog.linuxeye.com/412.html</a></p>\n</blockquote>\n"},{"title":"Aspose-barcode-条码和二维码处理","date":"2016-09-10T16:00:00.000Z","_content":"\n> 条码信息和贴士\n\n```\n\nhttp://china.keyence.com/ss/products/auto_id/barcode_lecture/\n\n```\n\n> 应用背景:公司需要将发票中的二维码和条码一同识别并于相关的订单绑定至数据库\n\n> 初略的第一版\n\n```\n\npackage com.xudaolong.bean;\n\nimport com.aspose.barcode.*;\nimport com.aspose.barcoderecognition.BarCodeReadType;\nimport com.aspose.barcoderecognition.BarCodeReader;\nimport com.xudaolong.Utils.ImageCutterUtil;\n\nimport javax.imageio.ImageIO;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.ArrayList;\n\n/**\n * 文 件 名: AsposeBarcode.java\n * 创 建 人: xudaolong\n * 创建日期: 16/7/12 14:24\n * 邮   箱: xudaolong@vip.qq.com\n * 博   客: http://xudaolong.github.io/\n * 修改时间：\n * 修改备注：\n */\n\npublic class AsposeBarcode {\n\n    private static final String TAG = \"AsposeBarcode\";\n\n    /**\n     * 发票信息列表\n     */\n    private ArrayList<BarcodeInfo> list = new ArrayList();\n\n\n    public AsposeBarcode() {\n\n    }\n\n    /**\n     * 存储扫描发票信息(二维码和二五码)\n     */\n    class BarcodeInfo {\n        private static final String TAG = \"BarcodeInfo\";\n\n        public BarcodeInfo() {\n\n        }\n\n        private String FileName;\n        private String Interleaved2of5;\n        private String QR;\n\n        public void clear() {\n            this.setFileName(\"\");\n            this.setInterleaved2of5(\"\");\n            this.setQR(\"\");\n        }\n\n        public String getFileName() {\n            return FileName;\n        }\n\n        public void setFileName(String fileName) {\n            this.FileName = fileName;\n        }\n\n        public String getQR() {\n            return QR;\n        }\n\n        public void setQR(String QR) {\n            this.QR = QR;\n        }\n\n        public String getInterleaved2of5() {\n            return Interleaved2of5;\n        }\n\n        public void setInterleaved2of5(String interleaved2of5) {\n            Interleaved2of5 = interleaved2of5;\n        }\n\n        public void checkInfo(BarcodeInfo _info) {\n            if (_info.getInterleaved2of5().equals(\"\")) {\n                System.out.println(_info.getFileName() + \":: 不能获取 Interleaved2of5 条形码\");\n            }\n\n            if (_info.getQR().equals(\"\")) {\n                System.out.println(_info.getQR() + \":: 不能获取 QR 条形码 \");\n            }\n        }\n\n        @Override\n        public String toString() {\n            return \"BarcodeInfo{\" +\n                    \"FileName='\" + this.getFileName() + '\\'' +\n                    \", Interleaved2of5='\" + this.getInterleaved2of5() + '\\'' +\n                    \", QR='\" + this.getQR() + '\\'' +\n                    '}';\n        }\n    }\n\n    /**\n     * 获取工具类\n     *\n     * @return\n     */\n    public BarCodeBuilder getInstance() {\n        return new BarCodeBuilder();\n    }\n\n    /**\n     * 获取一个普通的QR图片\n     *\n     * @return\n     */\n    public BarCodeBuilder getPublicQR(String context, String targetPath) {\n\n        // 初始化\n        BarCodeBuilder builder = this.getInstance();\n\n        builder.setCodeText(context);\n        builder.setSymbologyType(Symbology.QR);\n\n        // 设置编程模式\n        builder.setQREncodeMode(QREncodeMode.Auto);\n\n        // 设置容错率\n        builder.setQRErrorLevel(QRErrorLevel.LevelH);\n\n        // 隐藏文字\n        builder.setCodeLocation(CodeLocation.None);\n\n        // 翻转\n        builder.setRotationAngleF(0);\n\n        builder.setImageHeight(88);\n        builder.setImageWidth(88);\n\n        // 保存\n        builder.save(targetPath);\n\n        cutQR(targetPath);\n\n        return builder;\n    }\n\n\n    public void cutQR(String sourcePath) {\n\n        try {\n            File file = new File(sourcePath);\n\n            BufferedImage image = ImageIO.read(file);\n\n            // 起始坐标，剪切大小\n            int x = 14;\n            int y = 25;\n            int width = 62;\n            int height = 62;\n            // 参考图像大小\n            int clientWidth = 88;\n            int clientHeight = 88;\n\n            double destWidth = image.getWidth();\n            double destHeight = image.getHeight();\n\n            if (destWidth < width || destHeight < height)\n                throw new Exception(\"源图大小小于截取图片大小!\");\n\n\n            double widthRatio = destWidth / clientWidth;\n            double heightRatio = destHeight / clientHeight;\n\n            //修改一下单位\n            x = Double.valueOf(x * widthRatio).intValue();\n            y = Double.valueOf(y * heightRatio).intValue();\n            width = Double.valueOf(width * widthRatio).intValue();\n            height = Double.valueOf(height * heightRatio).intValue();\n\n            System.out.println(\"裁剪大小  x:\" + x + \",y:\" + y + \",width:\" + width + \",height:\" + height);\n\n            //获取指定的名字\n//            String formatName = getImageFormatName(file);\n//            String pathSuffix = \".\" + formatName;\n//            String pathPrefix = getFilePrefixPath(file);\n//            String targetPath = pathPrefix + System.currentTimeMillis() + pathSuffix;\n\n            //最后一步进行裁剪到指定的名字\n\n            File destFile = new File(sourcePath);\n\n            ImageCutterUtil.cutImage(file, destFile, x, y, width, height);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n    }\n\n\n    /**\n     * 读取QR\n     *\n     * @return\n     */\n    public ArrayList<BarcodeInfo> ReaderImg(String dest) throws IOException {\n\n        if (dest == null) {\n            return null;\n        }\n\n        /**\n         * 转成 BufferedImage 图像缓存区便于操作\n         */\n//        BufferedImage bufImg = ImageIO.read(new FileInputStream(dest));\n\n        //创建指定的读取器 25码 和 QR 码\n        BarCodeReader reader = new BarCodeReader(dest, BarCodeReadType.QR | BarCodeReadType.Interleaved2of5);\n\n        /**\n         * MaxPerformance\t1\tFinds all the possible good and average quality barcodes. Uses only the fastest algorithms. Enabled by default.\n         * MaxQuality\t2\tFinds all the possible barcodes with good or bad quality. Doesn't return potential barcodes. Uses different fast and slow algorithms.\n         * MaxBarCodes\t3\tExtends MaxQuality. Finds even potential barcodes. Uses extra algorithms which may recognize incorrect barcodes, barcodes on complex background, noisy or damaged barcodes and etc. You may observe extra spurious barcodes.\n         * ManualHints\t4\tUser configures hints optionally. Allows you to adjust the balance between speed and quality manually.\n         */\n        reader.setRecognitionMode(1);\n\n        /**\n         * 设定识别超时,有助于提高识别效率\n         */\n//        reader.setTimeout(3500);\n\n        //暂时存储\n        BarcodeInfo _info = new BarcodeInfo();\n\n        //重置\n        _info.clear();\n\n        try {\n            while (reader.read()) {\n                _info.setFileName(reader.getFileName());\n\n                if (reader.getReadTypeName().equals(\"Interleaved2of5\")) {\n                    _info.setInterleaved2of5(reader.getCodeText());\n                }\n\n                if (reader.getReadTypeName().equals(\"QR\")) {\n                    _info.setQR(reader.getCodeText());\n                }\n            }\n\n            list.add(_info);\n            reader.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            _info.checkInfo(_info);\n        }\n\n        return list;\n    }\n\n}\n\n\n```\n\n\n> 测试文件\n\n```\n\npackage com.xudaolong.QR;\n\nimport com.xudaolong.Utils.Path;\nimport com.xudaolong.bean.AsposeBarcode;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\n\n/**\n * Created by xudaolong on 16/7/12.\n */\n\npublic class TestQR {\n\n    public static void main(String[] args) throws IOException {\n        //指定相对的路径\n        String path = “/resources/src/com/xudaolong/second”;\n\n        long startTime=System.nanoTime();   //获取开始时间\n\n\n        ArrayList<String> allFile =  new Path().getAllFile(path);\n\n        for (int i = 0; i < allFile.size(); i++) {\n            String _filename = allFile.get(i);\n            System.out.println(new AsposeBarcode().ReaderImg(_filename));\n        }\n\n        long endTime=System.nanoTime(); //获取结束时间\n        System.out.println(“程序运行时间： “+(endTime-startTime)+”ns”);\n        \n        System.out.println(allFile);\n\n    }\n\n}\n\n\n```\n\n> 辅助类 Path::用于处理路径的问题\n\n```\n\npackage com.xudaolong.Utils;\n\n\nimport java.io.File;\nimport java.util.ArrayList;\n\n/**\n * Created by xudaolong on 16/7/12.\n */\npublic class Path {\n\n    private static final String TAG = \"Path\";\n\n    public static final String CURRFILE = new String(System.getProperty(\"user.dir\"));\n\n    /**\n     * 创建不存在的目录\n     *\n     * @param c\n     * @param dir\n     * @return\n     */\n    public File rebuildDir(Class c, File dir) {\n\n        for (String s : c.getName().split(\"\\\\.\")) {\n            dir = new File(dir, s);\n            if (dir.isDirectory() == false)\n                dir.mkdirs();\n        }\n\n        return dir;\n    }\n\n    /**\n     * 返回指定的路径为 resources\n     *\n     * @param c\n     * @return\n     */\n    public String getDataDir(Class c) {\n        //目录resolve\n        File _currfile = new File(CURRFILE, \"resources\");\n        _currfile = this.rebuildDir(c, _currfile);\n\n        System.out.println(TAG + \"::Using data directory::\" + _currfile.toString());\n        return _currfile.toString() + File.separator;\n\n    }\n\n    /**\n     * 返回指定相对路径,相对的是user.dir\n     *\n     * @param c\n     * @param desc\n     * @return\n     */\n    public String getDataDir(Class c, String desc) {\n\n        File _currfile = new File(CURRFILE, \"resources\");\n\n        //目录resolve\n        _currfile = new File(_currfile, desc);\n        _currfile = this.rebuildDir(c, _currfile);\n\n        System.out.println(TAG + \"::Using data directory::\" + _currfile.toString());\n\n        return _currfile.toString() + File.separator;\n    }\n\n    /**\n     * 返回绝对路径的文件名组\n     *\n     * @param floder\n     * @return\n     */\n    public ArrayList<String> getAllFile(String floder) {\n        if (floder == null) {\n            return null;\n        }\n        //存储文件名\n        ArrayList _allfilename = new ArrayList();\n\n        //获取当前的路径\n        File _currfile = new File(CURRFILE);\n\n        //目录resolve\n        _currfile = new File(_currfile, floder);\n\n        if (!_currfile.exists()) {\n            System.out.println(floder + \" not exists\");\n            return null;\n        }\n\n        File _dir[] = _currfile.listFiles();\n\n        for (int i = 0; i < _dir.length; i++) {\n            File fs = _dir[i];\n            if (fs.isDirectory()) {\n                System.out.println(fs.getName() + “ [目录]”);\n            } else {\n                _allfilename.add(_currfile + “/“ + fs.getName());\n            }\n        }\n\n        return _allfilename;\n    }\n\n}\n\n\n```\n\n\n\n\n\n\n","source":"_posts/其他/Aspose-barcode-条码和二维码处理.md","raw":"---\ntitle: Aspose-barcode-条码和二维码处理\ndate: 2016-09-11\ncategories: \n- others\n---\n\n> 条码信息和贴士\n\n```\n\nhttp://china.keyence.com/ss/products/auto_id/barcode_lecture/\n\n```\n\n> 应用背景:公司需要将发票中的二维码和条码一同识别并于相关的订单绑定至数据库\n\n> 初略的第一版\n\n```\n\npackage com.xudaolong.bean;\n\nimport com.aspose.barcode.*;\nimport com.aspose.barcoderecognition.BarCodeReadType;\nimport com.aspose.barcoderecognition.BarCodeReader;\nimport com.xudaolong.Utils.ImageCutterUtil;\n\nimport javax.imageio.ImageIO;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.ArrayList;\n\n/**\n * 文 件 名: AsposeBarcode.java\n * 创 建 人: xudaolong\n * 创建日期: 16/7/12 14:24\n * 邮   箱: xudaolong@vip.qq.com\n * 博   客: http://xudaolong.github.io/\n * 修改时间：\n * 修改备注：\n */\n\npublic class AsposeBarcode {\n\n    private static final String TAG = \"AsposeBarcode\";\n\n    /**\n     * 发票信息列表\n     */\n    private ArrayList<BarcodeInfo> list = new ArrayList();\n\n\n    public AsposeBarcode() {\n\n    }\n\n    /**\n     * 存储扫描发票信息(二维码和二五码)\n     */\n    class BarcodeInfo {\n        private static final String TAG = \"BarcodeInfo\";\n\n        public BarcodeInfo() {\n\n        }\n\n        private String FileName;\n        private String Interleaved2of5;\n        private String QR;\n\n        public void clear() {\n            this.setFileName(\"\");\n            this.setInterleaved2of5(\"\");\n            this.setQR(\"\");\n        }\n\n        public String getFileName() {\n            return FileName;\n        }\n\n        public void setFileName(String fileName) {\n            this.FileName = fileName;\n        }\n\n        public String getQR() {\n            return QR;\n        }\n\n        public void setQR(String QR) {\n            this.QR = QR;\n        }\n\n        public String getInterleaved2of5() {\n            return Interleaved2of5;\n        }\n\n        public void setInterleaved2of5(String interleaved2of5) {\n            Interleaved2of5 = interleaved2of5;\n        }\n\n        public void checkInfo(BarcodeInfo _info) {\n            if (_info.getInterleaved2of5().equals(\"\")) {\n                System.out.println(_info.getFileName() + \":: 不能获取 Interleaved2of5 条形码\");\n            }\n\n            if (_info.getQR().equals(\"\")) {\n                System.out.println(_info.getQR() + \":: 不能获取 QR 条形码 \");\n            }\n        }\n\n        @Override\n        public String toString() {\n            return \"BarcodeInfo{\" +\n                    \"FileName='\" + this.getFileName() + '\\'' +\n                    \", Interleaved2of5='\" + this.getInterleaved2of5() + '\\'' +\n                    \", QR='\" + this.getQR() + '\\'' +\n                    '}';\n        }\n    }\n\n    /**\n     * 获取工具类\n     *\n     * @return\n     */\n    public BarCodeBuilder getInstance() {\n        return new BarCodeBuilder();\n    }\n\n    /**\n     * 获取一个普通的QR图片\n     *\n     * @return\n     */\n    public BarCodeBuilder getPublicQR(String context, String targetPath) {\n\n        // 初始化\n        BarCodeBuilder builder = this.getInstance();\n\n        builder.setCodeText(context);\n        builder.setSymbologyType(Symbology.QR);\n\n        // 设置编程模式\n        builder.setQREncodeMode(QREncodeMode.Auto);\n\n        // 设置容错率\n        builder.setQRErrorLevel(QRErrorLevel.LevelH);\n\n        // 隐藏文字\n        builder.setCodeLocation(CodeLocation.None);\n\n        // 翻转\n        builder.setRotationAngleF(0);\n\n        builder.setImageHeight(88);\n        builder.setImageWidth(88);\n\n        // 保存\n        builder.save(targetPath);\n\n        cutQR(targetPath);\n\n        return builder;\n    }\n\n\n    public void cutQR(String sourcePath) {\n\n        try {\n            File file = new File(sourcePath);\n\n            BufferedImage image = ImageIO.read(file);\n\n            // 起始坐标，剪切大小\n            int x = 14;\n            int y = 25;\n            int width = 62;\n            int height = 62;\n            // 参考图像大小\n            int clientWidth = 88;\n            int clientHeight = 88;\n\n            double destWidth = image.getWidth();\n            double destHeight = image.getHeight();\n\n            if (destWidth < width || destHeight < height)\n                throw new Exception(\"源图大小小于截取图片大小!\");\n\n\n            double widthRatio = destWidth / clientWidth;\n            double heightRatio = destHeight / clientHeight;\n\n            //修改一下单位\n            x = Double.valueOf(x * widthRatio).intValue();\n            y = Double.valueOf(y * heightRatio).intValue();\n            width = Double.valueOf(width * widthRatio).intValue();\n            height = Double.valueOf(height * heightRatio).intValue();\n\n            System.out.println(\"裁剪大小  x:\" + x + \",y:\" + y + \",width:\" + width + \",height:\" + height);\n\n            //获取指定的名字\n//            String formatName = getImageFormatName(file);\n//            String pathSuffix = \".\" + formatName;\n//            String pathPrefix = getFilePrefixPath(file);\n//            String targetPath = pathPrefix + System.currentTimeMillis() + pathSuffix;\n\n            //最后一步进行裁剪到指定的名字\n\n            File destFile = new File(sourcePath);\n\n            ImageCutterUtil.cutImage(file, destFile, x, y, width, height);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n    }\n\n\n    /**\n     * 读取QR\n     *\n     * @return\n     */\n    public ArrayList<BarcodeInfo> ReaderImg(String dest) throws IOException {\n\n        if (dest == null) {\n            return null;\n        }\n\n        /**\n         * 转成 BufferedImage 图像缓存区便于操作\n         */\n//        BufferedImage bufImg = ImageIO.read(new FileInputStream(dest));\n\n        //创建指定的读取器 25码 和 QR 码\n        BarCodeReader reader = new BarCodeReader(dest, BarCodeReadType.QR | BarCodeReadType.Interleaved2of5);\n\n        /**\n         * MaxPerformance\t1\tFinds all the possible good and average quality barcodes. Uses only the fastest algorithms. Enabled by default.\n         * MaxQuality\t2\tFinds all the possible barcodes with good or bad quality. Doesn't return potential barcodes. Uses different fast and slow algorithms.\n         * MaxBarCodes\t3\tExtends MaxQuality. Finds even potential barcodes. Uses extra algorithms which may recognize incorrect barcodes, barcodes on complex background, noisy or damaged barcodes and etc. You may observe extra spurious barcodes.\n         * ManualHints\t4\tUser configures hints optionally. Allows you to adjust the balance between speed and quality manually.\n         */\n        reader.setRecognitionMode(1);\n\n        /**\n         * 设定识别超时,有助于提高识别效率\n         */\n//        reader.setTimeout(3500);\n\n        //暂时存储\n        BarcodeInfo _info = new BarcodeInfo();\n\n        //重置\n        _info.clear();\n\n        try {\n            while (reader.read()) {\n                _info.setFileName(reader.getFileName());\n\n                if (reader.getReadTypeName().equals(\"Interleaved2of5\")) {\n                    _info.setInterleaved2of5(reader.getCodeText());\n                }\n\n                if (reader.getReadTypeName().equals(\"QR\")) {\n                    _info.setQR(reader.getCodeText());\n                }\n            }\n\n            list.add(_info);\n            reader.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            _info.checkInfo(_info);\n        }\n\n        return list;\n    }\n\n}\n\n\n```\n\n\n> 测试文件\n\n```\n\npackage com.xudaolong.QR;\n\nimport com.xudaolong.Utils.Path;\nimport com.xudaolong.bean.AsposeBarcode;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\n\n/**\n * Created by xudaolong on 16/7/12.\n */\n\npublic class TestQR {\n\n    public static void main(String[] args) throws IOException {\n        //指定相对的路径\n        String path = “/resources/src/com/xudaolong/second”;\n\n        long startTime=System.nanoTime();   //获取开始时间\n\n\n        ArrayList<String> allFile =  new Path().getAllFile(path);\n\n        for (int i = 0; i < allFile.size(); i++) {\n            String _filename = allFile.get(i);\n            System.out.println(new AsposeBarcode().ReaderImg(_filename));\n        }\n\n        long endTime=System.nanoTime(); //获取结束时间\n        System.out.println(“程序运行时间： “+(endTime-startTime)+”ns”);\n        \n        System.out.println(allFile);\n\n    }\n\n}\n\n\n```\n\n> 辅助类 Path::用于处理路径的问题\n\n```\n\npackage com.xudaolong.Utils;\n\n\nimport java.io.File;\nimport java.util.ArrayList;\n\n/**\n * Created by xudaolong on 16/7/12.\n */\npublic class Path {\n\n    private static final String TAG = \"Path\";\n\n    public static final String CURRFILE = new String(System.getProperty(\"user.dir\"));\n\n    /**\n     * 创建不存在的目录\n     *\n     * @param c\n     * @param dir\n     * @return\n     */\n    public File rebuildDir(Class c, File dir) {\n\n        for (String s : c.getName().split(\"\\\\.\")) {\n            dir = new File(dir, s);\n            if (dir.isDirectory() == false)\n                dir.mkdirs();\n        }\n\n        return dir;\n    }\n\n    /**\n     * 返回指定的路径为 resources\n     *\n     * @param c\n     * @return\n     */\n    public String getDataDir(Class c) {\n        //目录resolve\n        File _currfile = new File(CURRFILE, \"resources\");\n        _currfile = this.rebuildDir(c, _currfile);\n\n        System.out.println(TAG + \"::Using data directory::\" + _currfile.toString());\n        return _currfile.toString() + File.separator;\n\n    }\n\n    /**\n     * 返回指定相对路径,相对的是user.dir\n     *\n     * @param c\n     * @param desc\n     * @return\n     */\n    public String getDataDir(Class c, String desc) {\n\n        File _currfile = new File(CURRFILE, \"resources\");\n\n        //目录resolve\n        _currfile = new File(_currfile, desc);\n        _currfile = this.rebuildDir(c, _currfile);\n\n        System.out.println(TAG + \"::Using data directory::\" + _currfile.toString());\n\n        return _currfile.toString() + File.separator;\n    }\n\n    /**\n     * 返回绝对路径的文件名组\n     *\n     * @param floder\n     * @return\n     */\n    public ArrayList<String> getAllFile(String floder) {\n        if (floder == null) {\n            return null;\n        }\n        //存储文件名\n        ArrayList _allfilename = new ArrayList();\n\n        //获取当前的路径\n        File _currfile = new File(CURRFILE);\n\n        //目录resolve\n        _currfile = new File(_currfile, floder);\n\n        if (!_currfile.exists()) {\n            System.out.println(floder + \" not exists\");\n            return null;\n        }\n\n        File _dir[] = _currfile.listFiles();\n\n        for (int i = 0; i < _dir.length; i++) {\n            File fs = _dir[i];\n            if (fs.isDirectory()) {\n                System.out.println(fs.getName() + “ [目录]”);\n            } else {\n                _allfilename.add(_currfile + “/“ + fs.getName());\n            }\n        }\n\n        return _allfilename;\n    }\n\n}\n\n\n```\n\n\n\n\n\n\n","slug":"其他/Aspose-barcode-条码和二维码处理","published":1,"updated":"2017-02-06T03:05:41.000Z","_id":"ciytikuag002fi20ov6evwp64","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>条码信息和贴士</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">http://china.keyence.com/ss/products/auto_id/barcode_lecture/</div></pre></td></tr></table></figure>\n<blockquote>\n<p>应用背景:公司需要将发票中的二维码和条码一同识别并于相关的订单绑定至数据库</p>\n<p>初略的第一版</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">package com.xudaolong.bean;</div><div class=\"line\"></div><div class=\"line\">import com.aspose.barcode.*;</div><div class=\"line\">import com.aspose.barcoderecognition.BarCodeReadType;</div><div class=\"line\">import com.aspose.barcoderecognition.BarCodeReader;</div><div class=\"line\">import com.xudaolong.Utils.ImageCutterUtil;</div><div class=\"line\"></div><div class=\"line\">import javax.imageio.ImageIO;</div><div class=\"line\">import java.awt.image.BufferedImage;</div><div class=\"line\">import java.io.File;</div><div class=\"line\">import java.io.IOException;</div><div class=\"line\">import java.util.ArrayList;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 文 件 名: AsposeBarcode.java</div><div class=\"line\"> * 创 建 人: xudaolong</div><div class=\"line\"> * 创建日期: 16/7/12 14:24</div><div class=\"line\"> * 邮   箱: xudaolong@vip.qq.com</div><div class=\"line\"> * 博   客: http://xudaolong.github.io/</div><div class=\"line\"> * 修改时间：</div><div class=\"line\"> * 修改备注：</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">public class AsposeBarcode &#123;</div><div class=\"line\"></div><div class=\"line\">    private static final String TAG = &quot;AsposeBarcode&quot;;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 发票信息列表</div><div class=\"line\">     */</div><div class=\"line\">    private ArrayList&lt;BarcodeInfo&gt; list = new ArrayList();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public AsposeBarcode() &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 存储扫描发票信息(二维码和二五码)</div><div class=\"line\">     */</div><div class=\"line\">    class BarcodeInfo &#123;</div><div class=\"line\">        private static final String TAG = &quot;BarcodeInfo&quot;;</div><div class=\"line\"></div><div class=\"line\">        public BarcodeInfo() &#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        private String FileName;</div><div class=\"line\">        private String Interleaved2of5;</div><div class=\"line\">        private String QR;</div><div class=\"line\"></div><div class=\"line\">        public void clear() &#123;</div><div class=\"line\">            this.setFileName(&quot;&quot;);</div><div class=\"line\">            this.setInterleaved2of5(&quot;&quot;);</div><div class=\"line\">            this.setQR(&quot;&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public String getFileName() &#123;</div><div class=\"line\">            return FileName;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public void setFileName(String fileName) &#123;</div><div class=\"line\">            this.FileName = fileName;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public String getQR() &#123;</div><div class=\"line\">            return QR;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public void setQR(String QR) &#123;</div><div class=\"line\">            this.QR = QR;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public String getInterleaved2of5() &#123;</div><div class=\"line\">            return Interleaved2of5;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public void setInterleaved2of5(String interleaved2of5) &#123;</div><div class=\"line\">            Interleaved2of5 = interleaved2of5;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public void checkInfo(BarcodeInfo _info) &#123;</div><div class=\"line\">            if (_info.getInterleaved2of5().equals(&quot;&quot;)) &#123;</div><div class=\"line\">                System.out.println(_info.getFileName() + &quot;:: 不能获取 Interleaved2of5 条形码&quot;);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (_info.getQR().equals(&quot;&quot;)) &#123;</div><div class=\"line\">                System.out.println(_info.getQR() + &quot;:: 不能获取 QR 条形码 &quot;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        @Override</div><div class=\"line\">        public String toString() &#123;</div><div class=\"line\">            return &quot;BarcodeInfo&#123;&quot; +</div><div class=\"line\">                    &quot;FileName=&apos;&quot; + this.getFileName() + &apos;\\&apos;&apos; +</div><div class=\"line\">                    &quot;, Interleaved2of5=&apos;&quot; + this.getInterleaved2of5() + &apos;\\&apos;&apos; +</div><div class=\"line\">                    &quot;, QR=&apos;&quot; + this.getQR() + &apos;\\&apos;&apos; +</div><div class=\"line\">                    &apos;&#125;&apos;;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 获取工具类</div><div class=\"line\">     *</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    public BarCodeBuilder getInstance() &#123;</div><div class=\"line\">        return new BarCodeBuilder();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 获取一个普通的QR图片</div><div class=\"line\">     *</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    public BarCodeBuilder getPublicQR(String context, String targetPath) &#123;</div><div class=\"line\"></div><div class=\"line\">        // 初始化</div><div class=\"line\">        BarCodeBuilder builder = this.getInstance();</div><div class=\"line\"></div><div class=\"line\">        builder.setCodeText(context);</div><div class=\"line\">        builder.setSymbologyType(Symbology.QR);</div><div class=\"line\"></div><div class=\"line\">        // 设置编程模式</div><div class=\"line\">        builder.setQREncodeMode(QREncodeMode.Auto);</div><div class=\"line\"></div><div class=\"line\">        // 设置容错率</div><div class=\"line\">        builder.setQRErrorLevel(QRErrorLevel.LevelH);</div><div class=\"line\"></div><div class=\"line\">        // 隐藏文字</div><div class=\"line\">        builder.setCodeLocation(CodeLocation.None);</div><div class=\"line\"></div><div class=\"line\">        // 翻转</div><div class=\"line\">        builder.setRotationAngleF(0);</div><div class=\"line\"></div><div class=\"line\">        builder.setImageHeight(88);</div><div class=\"line\">        builder.setImageWidth(88);</div><div class=\"line\"></div><div class=\"line\">        // 保存</div><div class=\"line\">        builder.save(targetPath);</div><div class=\"line\"></div><div class=\"line\">        cutQR(targetPath);</div><div class=\"line\"></div><div class=\"line\">        return builder;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public void cutQR(String sourcePath) &#123;</div><div class=\"line\"></div><div class=\"line\">        try &#123;</div><div class=\"line\">            File file = new File(sourcePath);</div><div class=\"line\"></div><div class=\"line\">            BufferedImage image = ImageIO.read(file);</div><div class=\"line\"></div><div class=\"line\">            // 起始坐标，剪切大小</div><div class=\"line\">            int x = 14;</div><div class=\"line\">            int y = 25;</div><div class=\"line\">            int width = 62;</div><div class=\"line\">            int height = 62;</div><div class=\"line\">            // 参考图像大小</div><div class=\"line\">            int clientWidth = 88;</div><div class=\"line\">            int clientHeight = 88;</div><div class=\"line\"></div><div class=\"line\">            double destWidth = image.getWidth();</div><div class=\"line\">            double destHeight = image.getHeight();</div><div class=\"line\"></div><div class=\"line\">            if (destWidth &lt; width || destHeight &lt; height)</div><div class=\"line\">                throw new Exception(&quot;源图大小小于截取图片大小!&quot;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            double widthRatio = destWidth / clientWidth;</div><div class=\"line\">            double heightRatio = destHeight / clientHeight;</div><div class=\"line\"></div><div class=\"line\">            //修改一下单位</div><div class=\"line\">            x = Double.valueOf(x * widthRatio).intValue();</div><div class=\"line\">            y = Double.valueOf(y * heightRatio).intValue();</div><div class=\"line\">            width = Double.valueOf(width * widthRatio).intValue();</div><div class=\"line\">            height = Double.valueOf(height * heightRatio).intValue();</div><div class=\"line\"></div><div class=\"line\">            System.out.println(&quot;裁剪大小  x:&quot; + x + &quot;,y:&quot; + y + &quot;,width:&quot; + width + &quot;,height:&quot; + height);</div><div class=\"line\"></div><div class=\"line\">            //获取指定的名字</div><div class=\"line\">//            String formatName = getImageFormatName(file);</div><div class=\"line\">//            String pathSuffix = &quot;.&quot; + formatName;</div><div class=\"line\">//            String pathPrefix = getFilePrefixPath(file);</div><div class=\"line\">//            String targetPath = pathPrefix + System.currentTimeMillis() + pathSuffix;</div><div class=\"line\"></div><div class=\"line\">            //最后一步进行裁剪到指定的名字</div><div class=\"line\"></div><div class=\"line\">            File destFile = new File(sourcePath);</div><div class=\"line\"></div><div class=\"line\">            ImageCutterUtil.cutImage(file, destFile, x, y, width, height);</div><div class=\"line\"></div><div class=\"line\">        &#125; catch (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 读取QR</div><div class=\"line\">     *</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    public ArrayList&lt;BarcodeInfo&gt; ReaderImg(String dest) throws IOException &#123;</div><div class=\"line\"></div><div class=\"line\">        if (dest == null) &#123;</div><div class=\"line\">            return null;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        /**</div><div class=\"line\">         * 转成 BufferedImage 图像缓存区便于操作</div><div class=\"line\">         */</div><div class=\"line\">//        BufferedImage bufImg = ImageIO.read(new FileInputStream(dest));</div><div class=\"line\"></div><div class=\"line\">        //创建指定的读取器 25码 和 QR 码</div><div class=\"line\">        BarCodeReader reader = new BarCodeReader(dest, BarCodeReadType.QR | BarCodeReadType.Interleaved2of5);</div><div class=\"line\"></div><div class=\"line\">        /**</div><div class=\"line\">         * MaxPerformance\t1\tFinds all the possible good and average quality barcodes. Uses only the fastest algorithms. Enabled by default.</div><div class=\"line\">         * MaxQuality\t2\tFinds all the possible barcodes with good or bad quality. Doesn&apos;t return potential barcodes. Uses different fast and slow algorithms.</div><div class=\"line\">         * MaxBarCodes\t3\tExtends MaxQuality. Finds even potential barcodes. Uses extra algorithms which may recognize incorrect barcodes, barcodes on complex background, noisy or damaged barcodes and etc. You may observe extra spurious barcodes.</div><div class=\"line\">         * ManualHints\t4\tUser configures hints optionally. Allows you to adjust the balance between speed and quality manually.</div><div class=\"line\">         */</div><div class=\"line\">        reader.setRecognitionMode(1);</div><div class=\"line\"></div><div class=\"line\">        /**</div><div class=\"line\">         * 设定识别超时,有助于提高识别效率</div><div class=\"line\">         */</div><div class=\"line\">//        reader.setTimeout(3500);</div><div class=\"line\"></div><div class=\"line\">        //暂时存储</div><div class=\"line\">        BarcodeInfo _info = new BarcodeInfo();</div><div class=\"line\"></div><div class=\"line\">        //重置</div><div class=\"line\">        _info.clear();</div><div class=\"line\"></div><div class=\"line\">        try &#123;</div><div class=\"line\">            while (reader.read()) &#123;</div><div class=\"line\">                _info.setFileName(reader.getFileName());</div><div class=\"line\"></div><div class=\"line\">                if (reader.getReadTypeName().equals(&quot;Interleaved2of5&quot;)) &#123;</div><div class=\"line\">                    _info.setInterleaved2of5(reader.getCodeText());</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                if (reader.getReadTypeName().equals(&quot;QR&quot;)) &#123;</div><div class=\"line\">                    _info.setQR(reader.getCodeText());</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            list.add(_info);</div><div class=\"line\">            reader.close();</div><div class=\"line\">        &#125; catch (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; finally &#123;</div><div class=\"line\">            _info.checkInfo(_info);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        return list;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>测试文件</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">package com.xudaolong.QR;</div><div class=\"line\"></div><div class=\"line\">import com.xudaolong.Utils.Path;</div><div class=\"line\">import com.xudaolong.bean.AsposeBarcode;</div><div class=\"line\"></div><div class=\"line\">import java.io.IOException;</div><div class=\"line\">import java.util.ArrayList;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by xudaolong on 16/7/12.</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">public class TestQR &#123;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) throws IOException &#123;</div><div class=\"line\">        //指定相对的路径</div><div class=\"line\">        String path = “/resources/src/com/xudaolong/second”;</div><div class=\"line\"></div><div class=\"line\">        long startTime=System.nanoTime();   //获取开始时间</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        ArrayList&lt;String&gt; allFile =  new Path().getAllFile(path);</div><div class=\"line\"></div><div class=\"line\">        for (int i = 0; i &lt; allFile.size(); i++) &#123;</div><div class=\"line\">            String _filename = allFile.get(i);</div><div class=\"line\">            System.out.println(new AsposeBarcode().ReaderImg(_filename));</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        long endTime=System.nanoTime(); //获取结束时间</div><div class=\"line\">        System.out.println(“程序运行时间： “+(endTime-startTime)+”ns”);</div><div class=\"line\">        </div><div class=\"line\">        System.out.println(allFile);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>辅助类 Path::用于处理路径的问题</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">package com.xudaolong.Utils;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">import java.io.File;</div><div class=\"line\">import java.util.ArrayList;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by xudaolong on 16/7/12.</div><div class=\"line\"> */</div><div class=\"line\">public class Path &#123;</div><div class=\"line\"></div><div class=\"line\">    private static final String TAG = &quot;Path&quot;;</div><div class=\"line\"></div><div class=\"line\">    public static final String CURRFILE = new String(System.getProperty(&quot;user.dir&quot;));</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 创建不存在的目录</div><div class=\"line\">     *</div><div class=\"line\">     * @param c</div><div class=\"line\">     * @param dir</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    public File rebuildDir(Class c, File dir) &#123;</div><div class=\"line\"></div><div class=\"line\">        for (String s : c.getName().split(&quot;\\\\.&quot;)) &#123;</div><div class=\"line\">            dir = new File(dir, s);</div><div class=\"line\">            if (dir.isDirectory() == false)</div><div class=\"line\">                dir.mkdirs();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        return dir;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 返回指定的路径为 resources</div><div class=\"line\">     *</div><div class=\"line\">     * @param c</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    public String getDataDir(Class c) &#123;</div><div class=\"line\">        //目录resolve</div><div class=\"line\">        File _currfile = new File(CURRFILE, &quot;resources&quot;);</div><div class=\"line\">        _currfile = this.rebuildDir(c, _currfile);</div><div class=\"line\"></div><div class=\"line\">        System.out.println(TAG + &quot;::Using data directory::&quot; + _currfile.toString());</div><div class=\"line\">        return _currfile.toString() + File.separator;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 返回指定相对路径,相对的是user.dir</div><div class=\"line\">     *</div><div class=\"line\">     * @param c</div><div class=\"line\">     * @param desc</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    public String getDataDir(Class c, String desc) &#123;</div><div class=\"line\"></div><div class=\"line\">        File _currfile = new File(CURRFILE, &quot;resources&quot;);</div><div class=\"line\"></div><div class=\"line\">        //目录resolve</div><div class=\"line\">        _currfile = new File(_currfile, desc);</div><div class=\"line\">        _currfile = this.rebuildDir(c, _currfile);</div><div class=\"line\"></div><div class=\"line\">        System.out.println(TAG + &quot;::Using data directory::&quot; + _currfile.toString());</div><div class=\"line\"></div><div class=\"line\">        return _currfile.toString() + File.separator;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 返回绝对路径的文件名组</div><div class=\"line\">     *</div><div class=\"line\">     * @param floder</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    public ArrayList&lt;String&gt; getAllFile(String floder) &#123;</div><div class=\"line\">        if (floder == null) &#123;</div><div class=\"line\">            return null;</div><div class=\"line\">        &#125;</div><div class=\"line\">        //存储文件名</div><div class=\"line\">        ArrayList _allfilename = new ArrayList();</div><div class=\"line\"></div><div class=\"line\">        //获取当前的路径</div><div class=\"line\">        File _currfile = new File(CURRFILE);</div><div class=\"line\"></div><div class=\"line\">        //目录resolve</div><div class=\"line\">        _currfile = new File(_currfile, floder);</div><div class=\"line\"></div><div class=\"line\">        if (!_currfile.exists()) &#123;</div><div class=\"line\">            System.out.println(floder + &quot; not exists&quot;);</div><div class=\"line\">            return null;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        File _dir[] = _currfile.listFiles();</div><div class=\"line\"></div><div class=\"line\">        for (int i = 0; i &lt; _dir.length; i++) &#123;</div><div class=\"line\">            File fs = _dir[i];</div><div class=\"line\">            if (fs.isDirectory()) &#123;</div><div class=\"line\">                System.out.println(fs.getName() + “ [目录]”);</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                _allfilename.add(_currfile + “/“ + fs.getName());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        return _allfilename;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>条码信息和贴士</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">http://china.keyence.com/ss/products/auto_id/barcode_lecture/</div></pre></td></tr></table></figure>\n<blockquote>\n<p>应用背景:公司需要将发票中的二维码和条码一同识别并于相关的订单绑定至数据库</p>\n<p>初略的第一版</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">package com.xudaolong.bean;</div><div class=\"line\"></div><div class=\"line\">import com.aspose.barcode.*;</div><div class=\"line\">import com.aspose.barcoderecognition.BarCodeReadType;</div><div class=\"line\">import com.aspose.barcoderecognition.BarCodeReader;</div><div class=\"line\">import com.xudaolong.Utils.ImageCutterUtil;</div><div class=\"line\"></div><div class=\"line\">import javax.imageio.ImageIO;</div><div class=\"line\">import java.awt.image.BufferedImage;</div><div class=\"line\">import java.io.File;</div><div class=\"line\">import java.io.IOException;</div><div class=\"line\">import java.util.ArrayList;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 文 件 名: AsposeBarcode.java</div><div class=\"line\"> * 创 建 人: xudaolong</div><div class=\"line\"> * 创建日期: 16/7/12 14:24</div><div class=\"line\"> * 邮   箱: xudaolong@vip.qq.com</div><div class=\"line\"> * 博   客: http://xudaolong.github.io/</div><div class=\"line\"> * 修改时间：</div><div class=\"line\"> * 修改备注：</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">public class AsposeBarcode &#123;</div><div class=\"line\"></div><div class=\"line\">    private static final String TAG = &quot;AsposeBarcode&quot;;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 发票信息列表</div><div class=\"line\">     */</div><div class=\"line\">    private ArrayList&lt;BarcodeInfo&gt; list = new ArrayList();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public AsposeBarcode() &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 存储扫描发票信息(二维码和二五码)</div><div class=\"line\">     */</div><div class=\"line\">    class BarcodeInfo &#123;</div><div class=\"line\">        private static final String TAG = &quot;BarcodeInfo&quot;;</div><div class=\"line\"></div><div class=\"line\">        public BarcodeInfo() &#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        private String FileName;</div><div class=\"line\">        private String Interleaved2of5;</div><div class=\"line\">        private String QR;</div><div class=\"line\"></div><div class=\"line\">        public void clear() &#123;</div><div class=\"line\">            this.setFileName(&quot;&quot;);</div><div class=\"line\">            this.setInterleaved2of5(&quot;&quot;);</div><div class=\"line\">            this.setQR(&quot;&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public String getFileName() &#123;</div><div class=\"line\">            return FileName;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public void setFileName(String fileName) &#123;</div><div class=\"line\">            this.FileName = fileName;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public String getQR() &#123;</div><div class=\"line\">            return QR;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public void setQR(String QR) &#123;</div><div class=\"line\">            this.QR = QR;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public String getInterleaved2of5() &#123;</div><div class=\"line\">            return Interleaved2of5;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public void setInterleaved2of5(String interleaved2of5) &#123;</div><div class=\"line\">            Interleaved2of5 = interleaved2of5;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public void checkInfo(BarcodeInfo _info) &#123;</div><div class=\"line\">            if (_info.getInterleaved2of5().equals(&quot;&quot;)) &#123;</div><div class=\"line\">                System.out.println(_info.getFileName() + &quot;:: 不能获取 Interleaved2of5 条形码&quot;);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (_info.getQR().equals(&quot;&quot;)) &#123;</div><div class=\"line\">                System.out.println(_info.getQR() + &quot;:: 不能获取 QR 条形码 &quot;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        @Override</div><div class=\"line\">        public String toString() &#123;</div><div class=\"line\">            return &quot;BarcodeInfo&#123;&quot; +</div><div class=\"line\">                    &quot;FileName=&apos;&quot; + this.getFileName() + &apos;\\&apos;&apos; +</div><div class=\"line\">                    &quot;, Interleaved2of5=&apos;&quot; + this.getInterleaved2of5() + &apos;\\&apos;&apos; +</div><div class=\"line\">                    &quot;, QR=&apos;&quot; + this.getQR() + &apos;\\&apos;&apos; +</div><div class=\"line\">                    &apos;&#125;&apos;;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 获取工具类</div><div class=\"line\">     *</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    public BarCodeBuilder getInstance() &#123;</div><div class=\"line\">        return new BarCodeBuilder();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 获取一个普通的QR图片</div><div class=\"line\">     *</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    public BarCodeBuilder getPublicQR(String context, String targetPath) &#123;</div><div class=\"line\"></div><div class=\"line\">        // 初始化</div><div class=\"line\">        BarCodeBuilder builder = this.getInstance();</div><div class=\"line\"></div><div class=\"line\">        builder.setCodeText(context);</div><div class=\"line\">        builder.setSymbologyType(Symbology.QR);</div><div class=\"line\"></div><div class=\"line\">        // 设置编程模式</div><div class=\"line\">        builder.setQREncodeMode(QREncodeMode.Auto);</div><div class=\"line\"></div><div class=\"line\">        // 设置容错率</div><div class=\"line\">        builder.setQRErrorLevel(QRErrorLevel.LevelH);</div><div class=\"line\"></div><div class=\"line\">        // 隐藏文字</div><div class=\"line\">        builder.setCodeLocation(CodeLocation.None);</div><div class=\"line\"></div><div class=\"line\">        // 翻转</div><div class=\"line\">        builder.setRotationAngleF(0);</div><div class=\"line\"></div><div class=\"line\">        builder.setImageHeight(88);</div><div class=\"line\">        builder.setImageWidth(88);</div><div class=\"line\"></div><div class=\"line\">        // 保存</div><div class=\"line\">        builder.save(targetPath);</div><div class=\"line\"></div><div class=\"line\">        cutQR(targetPath);</div><div class=\"line\"></div><div class=\"line\">        return builder;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public void cutQR(String sourcePath) &#123;</div><div class=\"line\"></div><div class=\"line\">        try &#123;</div><div class=\"line\">            File file = new File(sourcePath);</div><div class=\"line\"></div><div class=\"line\">            BufferedImage image = ImageIO.read(file);</div><div class=\"line\"></div><div class=\"line\">            // 起始坐标，剪切大小</div><div class=\"line\">            int x = 14;</div><div class=\"line\">            int y = 25;</div><div class=\"line\">            int width = 62;</div><div class=\"line\">            int height = 62;</div><div class=\"line\">            // 参考图像大小</div><div class=\"line\">            int clientWidth = 88;</div><div class=\"line\">            int clientHeight = 88;</div><div class=\"line\"></div><div class=\"line\">            double destWidth = image.getWidth();</div><div class=\"line\">            double destHeight = image.getHeight();</div><div class=\"line\"></div><div class=\"line\">            if (destWidth &lt; width || destHeight &lt; height)</div><div class=\"line\">                throw new Exception(&quot;源图大小小于截取图片大小!&quot;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            double widthRatio = destWidth / clientWidth;</div><div class=\"line\">            double heightRatio = destHeight / clientHeight;</div><div class=\"line\"></div><div class=\"line\">            //修改一下单位</div><div class=\"line\">            x = Double.valueOf(x * widthRatio).intValue();</div><div class=\"line\">            y = Double.valueOf(y * heightRatio).intValue();</div><div class=\"line\">            width = Double.valueOf(width * widthRatio).intValue();</div><div class=\"line\">            height = Double.valueOf(height * heightRatio).intValue();</div><div class=\"line\"></div><div class=\"line\">            System.out.println(&quot;裁剪大小  x:&quot; + x + &quot;,y:&quot; + y + &quot;,width:&quot; + width + &quot;,height:&quot; + height);</div><div class=\"line\"></div><div class=\"line\">            //获取指定的名字</div><div class=\"line\">//            String formatName = getImageFormatName(file);</div><div class=\"line\">//            String pathSuffix = &quot;.&quot; + formatName;</div><div class=\"line\">//            String pathPrefix = getFilePrefixPath(file);</div><div class=\"line\">//            String targetPath = pathPrefix + System.currentTimeMillis() + pathSuffix;</div><div class=\"line\"></div><div class=\"line\">            //最后一步进行裁剪到指定的名字</div><div class=\"line\"></div><div class=\"line\">            File destFile = new File(sourcePath);</div><div class=\"line\"></div><div class=\"line\">            ImageCutterUtil.cutImage(file, destFile, x, y, width, height);</div><div class=\"line\"></div><div class=\"line\">        &#125; catch (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 读取QR</div><div class=\"line\">     *</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    public ArrayList&lt;BarcodeInfo&gt; ReaderImg(String dest) throws IOException &#123;</div><div class=\"line\"></div><div class=\"line\">        if (dest == null) &#123;</div><div class=\"line\">            return null;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        /**</div><div class=\"line\">         * 转成 BufferedImage 图像缓存区便于操作</div><div class=\"line\">         */</div><div class=\"line\">//        BufferedImage bufImg = ImageIO.read(new FileInputStream(dest));</div><div class=\"line\"></div><div class=\"line\">        //创建指定的读取器 25码 和 QR 码</div><div class=\"line\">        BarCodeReader reader = new BarCodeReader(dest, BarCodeReadType.QR | BarCodeReadType.Interleaved2of5);</div><div class=\"line\"></div><div class=\"line\">        /**</div><div class=\"line\">         * MaxPerformance\t1\tFinds all the possible good and average quality barcodes. Uses only the fastest algorithms. Enabled by default.</div><div class=\"line\">         * MaxQuality\t2\tFinds all the possible barcodes with good or bad quality. Doesn&apos;t return potential barcodes. Uses different fast and slow algorithms.</div><div class=\"line\">         * MaxBarCodes\t3\tExtends MaxQuality. Finds even potential barcodes. Uses extra algorithms which may recognize incorrect barcodes, barcodes on complex background, noisy or damaged barcodes and etc. You may observe extra spurious barcodes.</div><div class=\"line\">         * ManualHints\t4\tUser configures hints optionally. Allows you to adjust the balance between speed and quality manually.</div><div class=\"line\">         */</div><div class=\"line\">        reader.setRecognitionMode(1);</div><div class=\"line\"></div><div class=\"line\">        /**</div><div class=\"line\">         * 设定识别超时,有助于提高识别效率</div><div class=\"line\">         */</div><div class=\"line\">//        reader.setTimeout(3500);</div><div class=\"line\"></div><div class=\"line\">        //暂时存储</div><div class=\"line\">        BarcodeInfo _info = new BarcodeInfo();</div><div class=\"line\"></div><div class=\"line\">        //重置</div><div class=\"line\">        _info.clear();</div><div class=\"line\"></div><div class=\"line\">        try &#123;</div><div class=\"line\">            while (reader.read()) &#123;</div><div class=\"line\">                _info.setFileName(reader.getFileName());</div><div class=\"line\"></div><div class=\"line\">                if (reader.getReadTypeName().equals(&quot;Interleaved2of5&quot;)) &#123;</div><div class=\"line\">                    _info.setInterleaved2of5(reader.getCodeText());</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                if (reader.getReadTypeName().equals(&quot;QR&quot;)) &#123;</div><div class=\"line\">                    _info.setQR(reader.getCodeText());</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            list.add(_info);</div><div class=\"line\">            reader.close();</div><div class=\"line\">        &#125; catch (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; finally &#123;</div><div class=\"line\">            _info.checkInfo(_info);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        return list;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>测试文件</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">package com.xudaolong.QR;</div><div class=\"line\"></div><div class=\"line\">import com.xudaolong.Utils.Path;</div><div class=\"line\">import com.xudaolong.bean.AsposeBarcode;</div><div class=\"line\"></div><div class=\"line\">import java.io.IOException;</div><div class=\"line\">import java.util.ArrayList;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by xudaolong on 16/7/12.</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">public class TestQR &#123;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) throws IOException &#123;</div><div class=\"line\">        //指定相对的路径</div><div class=\"line\">        String path = “/resources/src/com/xudaolong/second”;</div><div class=\"line\"></div><div class=\"line\">        long startTime=System.nanoTime();   //获取开始时间</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        ArrayList&lt;String&gt; allFile =  new Path().getAllFile(path);</div><div class=\"line\"></div><div class=\"line\">        for (int i = 0; i &lt; allFile.size(); i++) &#123;</div><div class=\"line\">            String _filename = allFile.get(i);</div><div class=\"line\">            System.out.println(new AsposeBarcode().ReaderImg(_filename));</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        long endTime=System.nanoTime(); //获取结束时间</div><div class=\"line\">        System.out.println(“程序运行时间： “+(endTime-startTime)+”ns”);</div><div class=\"line\">        </div><div class=\"line\">        System.out.println(allFile);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>辅助类 Path::用于处理路径的问题</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">package com.xudaolong.Utils;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">import java.io.File;</div><div class=\"line\">import java.util.ArrayList;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by xudaolong on 16/7/12.</div><div class=\"line\"> */</div><div class=\"line\">public class Path &#123;</div><div class=\"line\"></div><div class=\"line\">    private static final String TAG = &quot;Path&quot;;</div><div class=\"line\"></div><div class=\"line\">    public static final String CURRFILE = new String(System.getProperty(&quot;user.dir&quot;));</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 创建不存在的目录</div><div class=\"line\">     *</div><div class=\"line\">     * @param c</div><div class=\"line\">     * @param dir</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    public File rebuildDir(Class c, File dir) &#123;</div><div class=\"line\"></div><div class=\"line\">        for (String s : c.getName().split(&quot;\\\\.&quot;)) &#123;</div><div class=\"line\">            dir = new File(dir, s);</div><div class=\"line\">            if (dir.isDirectory() == false)</div><div class=\"line\">                dir.mkdirs();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        return dir;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 返回指定的路径为 resources</div><div class=\"line\">     *</div><div class=\"line\">     * @param c</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    public String getDataDir(Class c) &#123;</div><div class=\"line\">        //目录resolve</div><div class=\"line\">        File _currfile = new File(CURRFILE, &quot;resources&quot;);</div><div class=\"line\">        _currfile = this.rebuildDir(c, _currfile);</div><div class=\"line\"></div><div class=\"line\">        System.out.println(TAG + &quot;::Using data directory::&quot; + _currfile.toString());</div><div class=\"line\">        return _currfile.toString() + File.separator;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 返回指定相对路径,相对的是user.dir</div><div class=\"line\">     *</div><div class=\"line\">     * @param c</div><div class=\"line\">     * @param desc</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    public String getDataDir(Class c, String desc) &#123;</div><div class=\"line\"></div><div class=\"line\">        File _currfile = new File(CURRFILE, &quot;resources&quot;);</div><div class=\"line\"></div><div class=\"line\">        //目录resolve</div><div class=\"line\">        _currfile = new File(_currfile, desc);</div><div class=\"line\">        _currfile = this.rebuildDir(c, _currfile);</div><div class=\"line\"></div><div class=\"line\">        System.out.println(TAG + &quot;::Using data directory::&quot; + _currfile.toString());</div><div class=\"line\"></div><div class=\"line\">        return _currfile.toString() + File.separator;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 返回绝对路径的文件名组</div><div class=\"line\">     *</div><div class=\"line\">     * @param floder</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    public ArrayList&lt;String&gt; getAllFile(String floder) &#123;</div><div class=\"line\">        if (floder == null) &#123;</div><div class=\"line\">            return null;</div><div class=\"line\">        &#125;</div><div class=\"line\">        //存储文件名</div><div class=\"line\">        ArrayList _allfilename = new ArrayList();</div><div class=\"line\"></div><div class=\"line\">        //获取当前的路径</div><div class=\"line\">        File _currfile = new File(CURRFILE);</div><div class=\"line\"></div><div class=\"line\">        //目录resolve</div><div class=\"line\">        _currfile = new File(_currfile, floder);</div><div class=\"line\"></div><div class=\"line\">        if (!_currfile.exists()) &#123;</div><div class=\"line\">            System.out.println(floder + &quot; not exists&quot;);</div><div class=\"line\">            return null;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        File _dir[] = _currfile.listFiles();</div><div class=\"line\"></div><div class=\"line\">        for (int i = 0; i &lt; _dir.length; i++) &#123;</div><div class=\"line\">            File fs = _dir[i];</div><div class=\"line\">            if (fs.isDirectory()) &#123;</div><div class=\"line\">                System.out.println(fs.getName() + “ [目录]”);</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                _allfilename.add(_currfile + “/“ + fs.getName());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        return _allfilename;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"jersey-2-x-记录","date":"2016-09-10T16:00:00.000Z","_content":"\n> Jersey\n\n```\n\n使用URI\n支持MIME类型的响应数据，包括JSON/XML/JPEG等\n使用HTTP GET/POST/DELETE/PUT（对应查找、新增、删除、修改）\n###JSR 311(JAX-RS)和Jersey Jersey是JSR 311的Java实现，可以快速的实现RESTful Web Service。Jersey的最新版本为2.6。其主要包含三个部分：\n\n核心服务器（Core Server）：通过提供JSR 311 中标准化的注释和API 标准化，您可以用直观的方式开发RESTful Web 服务\n核心客户端（Core Client）：Jersey 客户端API 帮助您与REST 服务轻松通信。\n集成（Integration）：Jersey 还提供可以轻松集成Spring、Guice、Apache Abdera 的库。\n\n```\n\n> 依赖包\n\n```\n\ncommons-beanutils.jar\ncommons-lang.jar\ncommons-logging.jar\nezmorph-1.0.2.jar\njavax.servlet.api.jar\njavax.ws.rs-api : 处理媒体类型等\njson-lib.jar\n\n```\n\n> 常用注解\n\n```\n\n@Path 定义资源的相对URI\n@GET 意味着以下方法可以响应HTTP GET方法\n@Produces 响应的MIME类型\n\n@Path(\"/users/{username}\")\n这个例子中，{username}即为用户输入的数据，例如用户输入Weiwei，则URL定位到 http://example.com/users/Weiwei\n对应的组件:\n    public String getUser(@PathParam(\"username\") String userName) {\n        ...\n    }\n一个@Path的内容是否以\"/\"开头都没有区别，同样是否以\"/\"结尾也没有什么区别\n@Path 位于方法上便是 子资源 分两种方式:\n\n\n@Produces(\"text/plain\")\n指定了资源所产生和发送给 客户端的MIME类型，这里指定了类型为纯文本类型。\n@Produces 会覆盖类层面的@Produces\n@Produces({\"application/xml\", \"application/json\"})\npublic String doGetAsXmlOrJson() {\n    ...\n}\n\n@Consumes({\"application/xml\", \"application/json\"})\n指定所消费的类型的格式，这里指定为XML和JSON，即可以 接收 这种类型格式的文件作为输入。\n\n所有媒体类型(*/*)byte[]\njava.lang.String\njava.io.Reader (inbound only)\njava.io.File\njavax.activation.DataSource\njavax.ws.rs.core.StreamingOutput (outbound only)\n\nXML 媒体类型 (text/xml, application/xml and application/...+xml)\njavax.xml.transform.Source\njavax.xml.bind.JAXBElement\n应用了 JAXB 类的应用 (使用了 @XmlRootElement 或者 @XmlType 的类型)\n\nForm 表单内容(application/x-www-form-urlencoded)\nMultivaluedMap\n\n纯文本 (text/plain)java.lang.Boolean\njava.lang.Character\njava.lang.Number\n\n@FormParam稍有特殊，因为它提取信息，先是请求所表示的MIME媒体类型为 application/x-www-form-urlencoded\n，并且符合指定的 HTML 编码的形式，正如这里所描述的。此参数提取对于 HTML 表单请求是非常有用的\n@FormParam 注释是特别的，仅可利用资源和子资源的方法。这是因为它从请求实体中提取信息\n\n@MatrixParam 从 URL 路径提取信息. \n\n@HeaderParam 从 HTTP 头部提取信息。 \n\n@CookieParam从关联在 HTTP 头部的 cookies 里提取信息。\n\n@BeanParam 用法  , 相当于把参数放进去 \n\npublic class MyBeanParam {\n    @PathParam(\"p\")\n    private String pathParam;\n\n    @MatrixParam(\"m\")\n    @Encoded\n    @DefaultValue(\"default\")\n    private String matrixParam;\n\n    @HeaderParam(\"header\")\n    private String headerParam;\n\n    private String queryParam;\n\n    public MyBeanParam(@QueryParam(\"q\") String queryParam) {\n    this.queryParam = queryParam;\n    }\n\n    public String getPathParam() {\n    return pathParam;\n    }\n    ...\n}\n\n\n@POST\npublic void post(@BeanParam MyBeanParam beanParam, String entity) {\n    final String pathParam = beanParam.getPathParam(); // contains injected path parameter \"p\"\n    ...\n}\n\n\n\n@Singleton \n资源将是单例模式，不受请求范围管理,子资源定位方法返回一个类，这意味着运行时将托管资源的实例及其生命周期。相反，如果方法返回的是实例，那么注释将没有效果，返回的实例将被使用。\n\n@Path(\"/item\")\npublic class ItemResource {\n    @Path(\"content\")\n    public Class<ItemContentSingletonResource> getItemContentResource() {\n        return ItemContentSingletonResource.class;\n    }\n}\n\n@Singleton\npublic class ItemContentSingletonResource {\n    // this class is managed in the singleton life cycle\n}\n\n\n```\n\n> 注入规则\n\n```\n\n@Path(\"{id:\\\\d+}\")\npublic class InjectedResource {\n    // 注入到属性\n    @DefaultValue(\"q\") @QueryParam(\"p\")\n    private String p;\n\n    // 注入到构造函数参数\n    public InjectedResource(@PathParam(\"id\") int id) { ... }\n\n    // 注入到资源参数\n    @GET\n    public String get(@Context UriInfo ui) { ... }\n\n    // 注入子资源方法参数\n    @Path(\"sub-id\")\n    @GET\n    public String get(@PathParam(\"sub-id\") String id) { ... }\n\n    // 注入子资源方法参数定位器方法参数\n    @Path(\"sub-id\")\n    public SubResource getSubResource(@PathParam(\"sub-id\") String id) { ... }\n\n    // 注入 bean setter 方法\n    @HeaderParam(\"X-header\")\n    public void setHeader(String header) { ... }\n}\n\n\n@Path(\"resource\")\npublic static class SummaryOfInjectionsResource {\n    @QueryParam(\"query\")\n    String param; // injection into a class field 注入类的属性\n\n\n    @GET\n    public String get(@QueryParam(\"query\") String methodQueryParam) {\n        // injection into a resource method parameter 注入资源的方法参数\n        return \"query param: \" + param;\n    }\n\n    @Path(\"sub-resource-locator\")\n    public Class<SubResource> subResourceLocator(@QueryParam(\"query\") String subResourceQueryParam) {\n        // injection into a sub resource locator parameter注入子资源定位器参数\n        return SubResource.class;\n    }\n\n    public SummaryOfInjectionsResource(@QueryParam(\"query\") String constructorQueryParam) {\n        // injection into a constructor parameter注入构造器的参数\n    }\n\n\n    @Context\n    public void setRequest(Request request) {\n        // injection into a setter method注入setter方法\n        System.out.println(request != null);\n    }\n}\n\npublic static class SubResource {\n    @GET\n    public String get() {\n        return \"sub resource\";\n    }\n}\n\n```\n\n# 应用的部署和运行时的环境\n\n> ResourceConfig 简化组件的注册,如扫描根资源、类提供者提供的路径或一组包名的集合。所有 JAX-RS 组件类都会手动注册或者扫描期间找到的类都会自动添加到 getClasses 所返回的类的集合中,另外部署时可参考[Servlet容器模型（二）部署描述文件](http://blog.csdn.net/cl05300629/article/details/9339205)\n\n```\n\npublic class MyApplication extends ResourceConfig {\n    public MyApplication() {\n        register(org.glassfish.jersey.server.filter.UriConnegFilter.class);\n        register(org.glassfish.jersey.server.validation.ValidationFeature.class);\n        register(org.glassfish.jersey.server.spring.SpringComponentProvider.class);\n        register(org.glassfish.jersey.grizzly2.httpserver.GrizzlyHttpContainerProvider.class);\n        property(ServerProperties.METAINF_SERVICES_LOOKUP_DISABLE, true);\n    }\n}\n\n    <servlet>\n        <servlet-name>Jersey Web Application</servlet-name>\n        <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>\n        <init-param>\n            <param-name>javax.ws.rs.Application</param-name>\n            <param-value>com.gzmpc.pc.MainApp</param-value>\n        </init-param>\n        <load-on-startup>1</load-on-startup>\n    </servlet>\n\n\n<Servlet>元素\n\n1、<servlet-name>元素：必须选，定义servlet名称，在DD文件中应该唯一，可通过servletConfig的getServletName()方法检索；\n\n2、<servlet-class>元素：制定servlet完整名称，需带包\n\nWEB-INF目录中的classes目录和lib目录中JAR文件会被自动添加到容器的类路径中，不需设置类路径\n\n3、<init-param>元素：向servlet传递初始化参数，每个<int-param>有仅有一组<param-name>和<param-value>子元素，可通过ServletConfig接口的getInitParameter()方法检索初始化参数；\n\n4、<load-on-startup>元素：一般的servlet是在被请求时由容器装入内存，这只一个正数则在启动时载入该servlet，值小的优先装入，负数或者没有指定，容器将根据需要决定何时装入servlet\n\n\n\n```\n\n\n> [使用 Spring Data JPA 简化 JPA 开发](http://www.cnblogs.com/eggbucket/archive/2012/10/16/2726302.html)\n\n\n> [MIME类型大全](http://www.cnblogs.com/zhongcj/archive/2008/11/03/1325293.html)\n","source":"_posts/其他/jersey-2-x-记录.md","raw":"---\ntitle: jersey-2-x-记录\ndate: 2016-09-11\ncategories: \n- others\n---\n\n> Jersey\n\n```\n\n使用URI\n支持MIME类型的响应数据，包括JSON/XML/JPEG等\n使用HTTP GET/POST/DELETE/PUT（对应查找、新增、删除、修改）\n###JSR 311(JAX-RS)和Jersey Jersey是JSR 311的Java实现，可以快速的实现RESTful Web Service。Jersey的最新版本为2.6。其主要包含三个部分：\n\n核心服务器（Core Server）：通过提供JSR 311 中标准化的注释和API 标准化，您可以用直观的方式开发RESTful Web 服务\n核心客户端（Core Client）：Jersey 客户端API 帮助您与REST 服务轻松通信。\n集成（Integration）：Jersey 还提供可以轻松集成Spring、Guice、Apache Abdera 的库。\n\n```\n\n> 依赖包\n\n```\n\ncommons-beanutils.jar\ncommons-lang.jar\ncommons-logging.jar\nezmorph-1.0.2.jar\njavax.servlet.api.jar\njavax.ws.rs-api : 处理媒体类型等\njson-lib.jar\n\n```\n\n> 常用注解\n\n```\n\n@Path 定义资源的相对URI\n@GET 意味着以下方法可以响应HTTP GET方法\n@Produces 响应的MIME类型\n\n@Path(\"/users/{username}\")\n这个例子中，{username}即为用户输入的数据，例如用户输入Weiwei，则URL定位到 http://example.com/users/Weiwei\n对应的组件:\n    public String getUser(@PathParam(\"username\") String userName) {\n        ...\n    }\n一个@Path的内容是否以\"/\"开头都没有区别，同样是否以\"/\"结尾也没有什么区别\n@Path 位于方法上便是 子资源 分两种方式:\n\n\n@Produces(\"text/plain\")\n指定了资源所产生和发送给 客户端的MIME类型，这里指定了类型为纯文本类型。\n@Produces 会覆盖类层面的@Produces\n@Produces({\"application/xml\", \"application/json\"})\npublic String doGetAsXmlOrJson() {\n    ...\n}\n\n@Consumes({\"application/xml\", \"application/json\"})\n指定所消费的类型的格式，这里指定为XML和JSON，即可以 接收 这种类型格式的文件作为输入。\n\n所有媒体类型(*/*)byte[]\njava.lang.String\njava.io.Reader (inbound only)\njava.io.File\njavax.activation.DataSource\njavax.ws.rs.core.StreamingOutput (outbound only)\n\nXML 媒体类型 (text/xml, application/xml and application/...+xml)\njavax.xml.transform.Source\njavax.xml.bind.JAXBElement\n应用了 JAXB 类的应用 (使用了 @XmlRootElement 或者 @XmlType 的类型)\n\nForm 表单内容(application/x-www-form-urlencoded)\nMultivaluedMap\n\n纯文本 (text/plain)java.lang.Boolean\njava.lang.Character\njava.lang.Number\n\n@FormParam稍有特殊，因为它提取信息，先是请求所表示的MIME媒体类型为 application/x-www-form-urlencoded\n，并且符合指定的 HTML 编码的形式，正如这里所描述的。此参数提取对于 HTML 表单请求是非常有用的\n@FormParam 注释是特别的，仅可利用资源和子资源的方法。这是因为它从请求实体中提取信息\n\n@MatrixParam 从 URL 路径提取信息. \n\n@HeaderParam 从 HTTP 头部提取信息。 \n\n@CookieParam从关联在 HTTP 头部的 cookies 里提取信息。\n\n@BeanParam 用法  , 相当于把参数放进去 \n\npublic class MyBeanParam {\n    @PathParam(\"p\")\n    private String pathParam;\n\n    @MatrixParam(\"m\")\n    @Encoded\n    @DefaultValue(\"default\")\n    private String matrixParam;\n\n    @HeaderParam(\"header\")\n    private String headerParam;\n\n    private String queryParam;\n\n    public MyBeanParam(@QueryParam(\"q\") String queryParam) {\n    this.queryParam = queryParam;\n    }\n\n    public String getPathParam() {\n    return pathParam;\n    }\n    ...\n}\n\n\n@POST\npublic void post(@BeanParam MyBeanParam beanParam, String entity) {\n    final String pathParam = beanParam.getPathParam(); // contains injected path parameter \"p\"\n    ...\n}\n\n\n\n@Singleton \n资源将是单例模式，不受请求范围管理,子资源定位方法返回一个类，这意味着运行时将托管资源的实例及其生命周期。相反，如果方法返回的是实例，那么注释将没有效果，返回的实例将被使用。\n\n@Path(\"/item\")\npublic class ItemResource {\n    @Path(\"content\")\n    public Class<ItemContentSingletonResource> getItemContentResource() {\n        return ItemContentSingletonResource.class;\n    }\n}\n\n@Singleton\npublic class ItemContentSingletonResource {\n    // this class is managed in the singleton life cycle\n}\n\n\n```\n\n> 注入规则\n\n```\n\n@Path(\"{id:\\\\d+}\")\npublic class InjectedResource {\n    // 注入到属性\n    @DefaultValue(\"q\") @QueryParam(\"p\")\n    private String p;\n\n    // 注入到构造函数参数\n    public InjectedResource(@PathParam(\"id\") int id) { ... }\n\n    // 注入到资源参数\n    @GET\n    public String get(@Context UriInfo ui) { ... }\n\n    // 注入子资源方法参数\n    @Path(\"sub-id\")\n    @GET\n    public String get(@PathParam(\"sub-id\") String id) { ... }\n\n    // 注入子资源方法参数定位器方法参数\n    @Path(\"sub-id\")\n    public SubResource getSubResource(@PathParam(\"sub-id\") String id) { ... }\n\n    // 注入 bean setter 方法\n    @HeaderParam(\"X-header\")\n    public void setHeader(String header) { ... }\n}\n\n\n@Path(\"resource\")\npublic static class SummaryOfInjectionsResource {\n    @QueryParam(\"query\")\n    String param; // injection into a class field 注入类的属性\n\n\n    @GET\n    public String get(@QueryParam(\"query\") String methodQueryParam) {\n        // injection into a resource method parameter 注入资源的方法参数\n        return \"query param: \" + param;\n    }\n\n    @Path(\"sub-resource-locator\")\n    public Class<SubResource> subResourceLocator(@QueryParam(\"query\") String subResourceQueryParam) {\n        // injection into a sub resource locator parameter注入子资源定位器参数\n        return SubResource.class;\n    }\n\n    public SummaryOfInjectionsResource(@QueryParam(\"query\") String constructorQueryParam) {\n        // injection into a constructor parameter注入构造器的参数\n    }\n\n\n    @Context\n    public void setRequest(Request request) {\n        // injection into a setter method注入setter方法\n        System.out.println(request != null);\n    }\n}\n\npublic static class SubResource {\n    @GET\n    public String get() {\n        return \"sub resource\";\n    }\n}\n\n```\n\n# 应用的部署和运行时的环境\n\n> ResourceConfig 简化组件的注册,如扫描根资源、类提供者提供的路径或一组包名的集合。所有 JAX-RS 组件类都会手动注册或者扫描期间找到的类都会自动添加到 getClasses 所返回的类的集合中,另外部署时可参考[Servlet容器模型（二）部署描述文件](http://blog.csdn.net/cl05300629/article/details/9339205)\n\n```\n\npublic class MyApplication extends ResourceConfig {\n    public MyApplication() {\n        register(org.glassfish.jersey.server.filter.UriConnegFilter.class);\n        register(org.glassfish.jersey.server.validation.ValidationFeature.class);\n        register(org.glassfish.jersey.server.spring.SpringComponentProvider.class);\n        register(org.glassfish.jersey.grizzly2.httpserver.GrizzlyHttpContainerProvider.class);\n        property(ServerProperties.METAINF_SERVICES_LOOKUP_DISABLE, true);\n    }\n}\n\n    <servlet>\n        <servlet-name>Jersey Web Application</servlet-name>\n        <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>\n        <init-param>\n            <param-name>javax.ws.rs.Application</param-name>\n            <param-value>com.gzmpc.pc.MainApp</param-value>\n        </init-param>\n        <load-on-startup>1</load-on-startup>\n    </servlet>\n\n\n<Servlet>元素\n\n1、<servlet-name>元素：必须选，定义servlet名称，在DD文件中应该唯一，可通过servletConfig的getServletName()方法检索；\n\n2、<servlet-class>元素：制定servlet完整名称，需带包\n\nWEB-INF目录中的classes目录和lib目录中JAR文件会被自动添加到容器的类路径中，不需设置类路径\n\n3、<init-param>元素：向servlet传递初始化参数，每个<int-param>有仅有一组<param-name>和<param-value>子元素，可通过ServletConfig接口的getInitParameter()方法检索初始化参数；\n\n4、<load-on-startup>元素：一般的servlet是在被请求时由容器装入内存，这只一个正数则在启动时载入该servlet，值小的优先装入，负数或者没有指定，容器将根据需要决定何时装入servlet\n\n\n\n```\n\n\n> [使用 Spring Data JPA 简化 JPA 开发](http://www.cnblogs.com/eggbucket/archive/2012/10/16/2726302.html)\n\n\n> [MIME类型大全](http://www.cnblogs.com/zhongcj/archive/2008/11/03/1325293.html)\n","slug":"其他/jersey-2-x-记录","published":1,"updated":"2017-02-06T03:05:41.000Z","_id":"ciytikuak002hi20o8cgr603s","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>Jersey</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">使用URI</div><div class=\"line\">支持MIME类型的响应数据，包括JSON/XML/JPEG等</div><div class=\"line\">使用HTTP GET/POST/DELETE/PUT（对应查找、新增、删除、修改）</div><div class=\"line\">###JSR 311(JAX-RS)和Jersey Jersey是JSR 311的Java实现，可以快速的实现RESTful Web Service。Jersey的最新版本为2.6。其主要包含三个部分：</div><div class=\"line\"></div><div class=\"line\">核心服务器（Core Server）：通过提供JSR 311 中标准化的注释和API 标准化，您可以用直观的方式开发RESTful Web 服务</div><div class=\"line\">核心客户端（Core Client）：Jersey 客户端API 帮助您与REST 服务轻松通信。</div><div class=\"line\">集成（Integration）：Jersey 还提供可以轻松集成Spring、Guice、Apache Abdera 的库。</div></pre></td></tr></table></figure>\n<blockquote>\n<p>依赖包</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">commons-beanutils.jar</div><div class=\"line\">commons-lang.jar</div><div class=\"line\">commons-logging.jar</div><div class=\"line\">ezmorph-1.0.2.jar</div><div class=\"line\">javax.servlet.api.jar</div><div class=\"line\">javax.ws.rs-api : 处理媒体类型等</div><div class=\"line\">json-lib.jar</div></pre></td></tr></table></figure>\n<blockquote>\n<p>常用注解</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">@Path 定义资源的相对URI</div><div class=\"line\">@GET 意味着以下方法可以响应HTTP GET方法</div><div class=\"line\">@Produces 响应的MIME类型</div><div class=\"line\"></div><div class=\"line\">@Path(&quot;/users/&#123;username&#125;&quot;)</div><div class=\"line\">这个例子中，&#123;username&#125;即为用户输入的数据，例如用户输入Weiwei，则URL定位到 http://example.com/users/Weiwei</div><div class=\"line\">对应的组件:</div><div class=\"line\">    public String getUser(@PathParam(&quot;username&quot;) String userName) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">一个@Path的内容是否以&quot;/&quot;开头都没有区别，同样是否以&quot;/&quot;结尾也没有什么区别</div><div class=\"line\">@Path 位于方法上便是 子资源 分两种方式:</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">@Produces(&quot;text/plain&quot;)</div><div class=\"line\">指定了资源所产生和发送给 客户端的MIME类型，这里指定了类型为纯文本类型。</div><div class=\"line\">@Produces 会覆盖类层面的@Produces</div><div class=\"line\">@Produces(&#123;&quot;application/xml&quot;, &quot;application/json&quot;&#125;)</div><div class=\"line\">public String doGetAsXmlOrJson() &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@Consumes(&#123;&quot;application/xml&quot;, &quot;application/json&quot;&#125;)</div><div class=\"line\">指定所消费的类型的格式，这里指定为XML和JSON，即可以 接收 这种类型格式的文件作为输入。</div><div class=\"line\"></div><div class=\"line\">所有媒体类型(*/*)byte[]</div><div class=\"line\">java.lang.String</div><div class=\"line\">java.io.Reader (inbound only)</div><div class=\"line\">java.io.File</div><div class=\"line\">javax.activation.DataSource</div><div class=\"line\">javax.ws.rs.core.StreamingOutput (outbound only)</div><div class=\"line\"></div><div class=\"line\">XML 媒体类型 (text/xml, application/xml and application/...+xml)</div><div class=\"line\">javax.xml.transform.Source</div><div class=\"line\">javax.xml.bind.JAXBElement</div><div class=\"line\">应用了 JAXB 类的应用 (使用了 @XmlRootElement 或者 @XmlType 的类型)</div><div class=\"line\"></div><div class=\"line\">Form 表单内容(application/x-www-form-urlencoded)</div><div class=\"line\">MultivaluedMap</div><div class=\"line\"></div><div class=\"line\">纯文本 (text/plain)java.lang.Boolean</div><div class=\"line\">java.lang.Character</div><div class=\"line\">java.lang.Number</div><div class=\"line\"></div><div class=\"line\">@FormParam稍有特殊，因为它提取信息，先是请求所表示的MIME媒体类型为 application/x-www-form-urlencoded</div><div class=\"line\">，并且符合指定的 HTML 编码的形式，正如这里所描述的。此参数提取对于 HTML 表单请求是非常有用的</div><div class=\"line\">@FormParam 注释是特别的，仅可利用资源和子资源的方法。这是因为它从请求实体中提取信息</div><div class=\"line\"></div><div class=\"line\">@MatrixParam 从 URL 路径提取信息. </div><div class=\"line\"></div><div class=\"line\">@HeaderParam 从 HTTP 头部提取信息。 </div><div class=\"line\"></div><div class=\"line\">@CookieParam从关联在 HTTP 头部的 cookies 里提取信息。</div><div class=\"line\"></div><div class=\"line\">@BeanParam 用法  , 相当于把参数放进去 </div><div class=\"line\"></div><div class=\"line\">public class MyBeanParam &#123;</div><div class=\"line\">    @PathParam(&quot;p&quot;)</div><div class=\"line\">    private String pathParam;</div><div class=\"line\"></div><div class=\"line\">    @MatrixParam(&quot;m&quot;)</div><div class=\"line\">    @Encoded</div><div class=\"line\">    @DefaultValue(&quot;default&quot;)</div><div class=\"line\">    private String matrixParam;</div><div class=\"line\"></div><div class=\"line\">    @HeaderParam(&quot;header&quot;)</div><div class=\"line\">    private String headerParam;</div><div class=\"line\"></div><div class=\"line\">    private String queryParam;</div><div class=\"line\"></div><div class=\"line\">    public MyBeanParam(@QueryParam(&quot;q&quot;) String queryParam) &#123;</div><div class=\"line\">    this.queryParam = queryParam;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public String getPathParam() &#123;</div><div class=\"line\">    return pathParam;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">@POST</div><div class=\"line\">public void post(@BeanParam MyBeanParam beanParam, String entity) &#123;</div><div class=\"line\">    final String pathParam = beanParam.getPathParam(); // contains injected path parameter &quot;p&quot;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">@Singleton </div><div class=\"line\">资源将是单例模式，不受请求范围管理,子资源定位方法返回一个类，这意味着运行时将托管资源的实例及其生命周期。相反，如果方法返回的是实例，那么注释将没有效果，返回的实例将被使用。</div><div class=\"line\"></div><div class=\"line\">@Path(&quot;/item&quot;)</div><div class=\"line\">public class ItemResource &#123;</div><div class=\"line\">    @Path(&quot;content&quot;)</div><div class=\"line\">    public Class&lt;ItemContentSingletonResource&gt; getItemContentResource() &#123;</div><div class=\"line\">        return ItemContentSingletonResource.class;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@Singleton</div><div class=\"line\">public class ItemContentSingletonResource &#123;</div><div class=\"line\">    // this class is managed in the singleton life cycle</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注入规则</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">@Path(&quot;&#123;id:\\\\d+&#125;&quot;)</div><div class=\"line\">public class InjectedResource &#123;</div><div class=\"line\">    // 注入到属性</div><div class=\"line\">    @DefaultValue(&quot;q&quot;) @QueryParam(&quot;p&quot;)</div><div class=\"line\">    private String p;</div><div class=\"line\"></div><div class=\"line\">    // 注入到构造函数参数</div><div class=\"line\">    public InjectedResource(@PathParam(&quot;id&quot;) int id) &#123; ... &#125;</div><div class=\"line\"></div><div class=\"line\">    // 注入到资源参数</div><div class=\"line\">    @GET</div><div class=\"line\">    public String get(@Context UriInfo ui) &#123; ... &#125;</div><div class=\"line\"></div><div class=\"line\">    // 注入子资源方法参数</div><div class=\"line\">    @Path(&quot;sub-id&quot;)</div><div class=\"line\">    @GET</div><div class=\"line\">    public String get(@PathParam(&quot;sub-id&quot;) String id) &#123; ... &#125;</div><div class=\"line\"></div><div class=\"line\">    // 注入子资源方法参数定位器方法参数</div><div class=\"line\">    @Path(&quot;sub-id&quot;)</div><div class=\"line\">    public SubResource getSubResource(@PathParam(&quot;sub-id&quot;) String id) &#123; ... &#125;</div><div class=\"line\"></div><div class=\"line\">    // 注入 bean setter 方法</div><div class=\"line\">    @HeaderParam(&quot;X-header&quot;)</div><div class=\"line\">    public void setHeader(String header) &#123; ... &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">@Path(&quot;resource&quot;)</div><div class=\"line\">public static class SummaryOfInjectionsResource &#123;</div><div class=\"line\">    @QueryParam(&quot;query&quot;)</div><div class=\"line\">    String param; // injection into a class field 注入类的属性</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    @GET</div><div class=\"line\">    public String get(@QueryParam(&quot;query&quot;) String methodQueryParam) &#123;</div><div class=\"line\">        // injection into a resource method parameter 注入资源的方法参数</div><div class=\"line\">        return &quot;query param: &quot; + param;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Path(&quot;sub-resource-locator&quot;)</div><div class=\"line\">    public Class&lt;SubResource&gt; subResourceLocator(@QueryParam(&quot;query&quot;) String subResourceQueryParam) &#123;</div><div class=\"line\">        // injection into a sub resource locator parameter注入子资源定位器参数</div><div class=\"line\">        return SubResource.class;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public SummaryOfInjectionsResource(@QueryParam(&quot;query&quot;) String constructorQueryParam) &#123;</div><div class=\"line\">        // injection into a constructor parameter注入构造器的参数</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    @Context</div><div class=\"line\">    public void setRequest(Request request) &#123;</div><div class=\"line\">        // injection into a setter method注入setter方法</div><div class=\"line\">        System.out.println(request != null);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">public static class SubResource &#123;</div><div class=\"line\">    @GET</div><div class=\"line\">    public String get() &#123;</div><div class=\"line\">        return &quot;sub resource&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"应用的部署和运行时的环境\"><a href=\"#应用的部署和运行时的环境\" class=\"headerlink\" title=\"应用的部署和运行时的环境\"></a>应用的部署和运行时的环境</h1><blockquote>\n<p>ResourceConfig 简化组件的注册,如扫描根资源、类提供者提供的路径或一组包名的集合。所有 JAX-RS 组件类都会手动注册或者扫描期间找到的类都会自动添加到 getClasses 所返回的类的集合中,另外部署时可参考<a href=\"http://blog.csdn.net/cl05300629/article/details/9339205\" target=\"_blank\" rel=\"external\">Servlet容器模型（二）部署描述文件</a></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">public class MyApplication extends ResourceConfig &#123;</div><div class=\"line\">    public MyApplication() &#123;</div><div class=\"line\">        register(org.glassfish.jersey.server.filter.UriConnegFilter.class);</div><div class=\"line\">        register(org.glassfish.jersey.server.validation.ValidationFeature.class);</div><div class=\"line\">        register(org.glassfish.jersey.server.spring.SpringComponentProvider.class);</div><div class=\"line\">        register(org.glassfish.jersey.grizzly2.httpserver.GrizzlyHttpContainerProvider.class);</div><div class=\"line\">        property(ServerProperties.METAINF_SERVICES_LOOKUP_DISABLE, true);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">    &lt;servlet&gt;</div><div class=\"line\">        &lt;servlet-name&gt;Jersey Web Application&lt;/servlet-name&gt;</div><div class=\"line\">        &lt;servlet-class&gt;org.glassfish.jersey.servlet.ServletContainer&lt;/servlet-class&gt;</div><div class=\"line\">        &lt;init-param&gt;</div><div class=\"line\">            &lt;param-name&gt;javax.ws.rs.Application&lt;/param-name&gt;</div><div class=\"line\">            &lt;param-value&gt;com.gzmpc.pc.MainApp&lt;/param-value&gt;</div><div class=\"line\">        &lt;/init-param&gt;</div><div class=\"line\">        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</div><div class=\"line\">    &lt;/servlet&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&lt;Servlet&gt;元素</div><div class=\"line\"></div><div class=\"line\">1、&lt;servlet-name&gt;元素：必须选，定义servlet名称，在DD文件中应该唯一，可通过servletConfig的getServletName()方法检索；</div><div class=\"line\"></div><div class=\"line\">2、&lt;servlet-class&gt;元素：制定servlet完整名称，需带包</div><div class=\"line\"></div><div class=\"line\">WEB-INF目录中的classes目录和lib目录中JAR文件会被自动添加到容器的类路径中，不需设置类路径</div><div class=\"line\"></div><div class=\"line\">3、&lt;init-param&gt;元素：向servlet传递初始化参数，每个&lt;int-param&gt;有仅有一组&lt;param-name&gt;和&lt;param-value&gt;子元素，可通过ServletConfig接口的getInitParameter()方法检索初始化参数；</div><div class=\"line\"></div><div class=\"line\">4、&lt;load-on-startup&gt;元素：一般的servlet是在被请求时由容器装入内存，这只一个正数则在启动时载入该servlet，值小的优先装入，负数或者没有指定，容器将根据需要决定何时装入servlet</div></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"http://www.cnblogs.com/eggbucket/archive/2012/10/16/2726302.html\" target=\"_blank\" rel=\"external\">使用 Spring Data JPA 简化 JPA 开发</a></p>\n<p><a href=\"http://www.cnblogs.com/zhongcj/archive/2008/11/03/1325293.html\" target=\"_blank\" rel=\"external\">MIME类型大全</a></p>\n</blockquote>\n","excerpt":"","more":"<blockquote>\n<p>Jersey</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">使用URI</div><div class=\"line\">支持MIME类型的响应数据，包括JSON/XML/JPEG等</div><div class=\"line\">使用HTTP GET/POST/DELETE/PUT（对应查找、新增、删除、修改）</div><div class=\"line\">###JSR 311(JAX-RS)和Jersey Jersey是JSR 311的Java实现，可以快速的实现RESTful Web Service。Jersey的最新版本为2.6。其主要包含三个部分：</div><div class=\"line\"></div><div class=\"line\">核心服务器（Core Server）：通过提供JSR 311 中标准化的注释和API 标准化，您可以用直观的方式开发RESTful Web 服务</div><div class=\"line\">核心客户端（Core Client）：Jersey 客户端API 帮助您与REST 服务轻松通信。</div><div class=\"line\">集成（Integration）：Jersey 还提供可以轻松集成Spring、Guice、Apache Abdera 的库。</div></pre></td></tr></table></figure>\n<blockquote>\n<p>依赖包</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">commons-beanutils.jar</div><div class=\"line\">commons-lang.jar</div><div class=\"line\">commons-logging.jar</div><div class=\"line\">ezmorph-1.0.2.jar</div><div class=\"line\">javax.servlet.api.jar</div><div class=\"line\">javax.ws.rs-api : 处理媒体类型等</div><div class=\"line\">json-lib.jar</div></pre></td></tr></table></figure>\n<blockquote>\n<p>常用注解</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">@Path 定义资源的相对URI</div><div class=\"line\">@GET 意味着以下方法可以响应HTTP GET方法</div><div class=\"line\">@Produces 响应的MIME类型</div><div class=\"line\"></div><div class=\"line\">@Path(&quot;/users/&#123;username&#125;&quot;)</div><div class=\"line\">这个例子中，&#123;username&#125;即为用户输入的数据，例如用户输入Weiwei，则URL定位到 http://example.com/users/Weiwei</div><div class=\"line\">对应的组件:</div><div class=\"line\">    public String getUser(@PathParam(&quot;username&quot;) String userName) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">一个@Path的内容是否以&quot;/&quot;开头都没有区别，同样是否以&quot;/&quot;结尾也没有什么区别</div><div class=\"line\">@Path 位于方法上便是 子资源 分两种方式:</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">@Produces(&quot;text/plain&quot;)</div><div class=\"line\">指定了资源所产生和发送给 客户端的MIME类型，这里指定了类型为纯文本类型。</div><div class=\"line\">@Produces 会覆盖类层面的@Produces</div><div class=\"line\">@Produces(&#123;&quot;application/xml&quot;, &quot;application/json&quot;&#125;)</div><div class=\"line\">public String doGetAsXmlOrJson() &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@Consumes(&#123;&quot;application/xml&quot;, &quot;application/json&quot;&#125;)</div><div class=\"line\">指定所消费的类型的格式，这里指定为XML和JSON，即可以 接收 这种类型格式的文件作为输入。</div><div class=\"line\"></div><div class=\"line\">所有媒体类型(*/*)byte[]</div><div class=\"line\">java.lang.String</div><div class=\"line\">java.io.Reader (inbound only)</div><div class=\"line\">java.io.File</div><div class=\"line\">javax.activation.DataSource</div><div class=\"line\">javax.ws.rs.core.StreamingOutput (outbound only)</div><div class=\"line\"></div><div class=\"line\">XML 媒体类型 (text/xml, application/xml and application/...+xml)</div><div class=\"line\">javax.xml.transform.Source</div><div class=\"line\">javax.xml.bind.JAXBElement</div><div class=\"line\">应用了 JAXB 类的应用 (使用了 @XmlRootElement 或者 @XmlType 的类型)</div><div class=\"line\"></div><div class=\"line\">Form 表单内容(application/x-www-form-urlencoded)</div><div class=\"line\">MultivaluedMap</div><div class=\"line\"></div><div class=\"line\">纯文本 (text/plain)java.lang.Boolean</div><div class=\"line\">java.lang.Character</div><div class=\"line\">java.lang.Number</div><div class=\"line\"></div><div class=\"line\">@FormParam稍有特殊，因为它提取信息，先是请求所表示的MIME媒体类型为 application/x-www-form-urlencoded</div><div class=\"line\">，并且符合指定的 HTML 编码的形式，正如这里所描述的。此参数提取对于 HTML 表单请求是非常有用的</div><div class=\"line\">@FormParam 注释是特别的，仅可利用资源和子资源的方法。这是因为它从请求实体中提取信息</div><div class=\"line\"></div><div class=\"line\">@MatrixParam 从 URL 路径提取信息. </div><div class=\"line\"></div><div class=\"line\">@HeaderParam 从 HTTP 头部提取信息。 </div><div class=\"line\"></div><div class=\"line\">@CookieParam从关联在 HTTP 头部的 cookies 里提取信息。</div><div class=\"line\"></div><div class=\"line\">@BeanParam 用法  , 相当于把参数放进去 </div><div class=\"line\"></div><div class=\"line\">public class MyBeanParam &#123;</div><div class=\"line\">    @PathParam(&quot;p&quot;)</div><div class=\"line\">    private String pathParam;</div><div class=\"line\"></div><div class=\"line\">    @MatrixParam(&quot;m&quot;)</div><div class=\"line\">    @Encoded</div><div class=\"line\">    @DefaultValue(&quot;default&quot;)</div><div class=\"line\">    private String matrixParam;</div><div class=\"line\"></div><div class=\"line\">    @HeaderParam(&quot;header&quot;)</div><div class=\"line\">    private String headerParam;</div><div class=\"line\"></div><div class=\"line\">    private String queryParam;</div><div class=\"line\"></div><div class=\"line\">    public MyBeanParam(@QueryParam(&quot;q&quot;) String queryParam) &#123;</div><div class=\"line\">    this.queryParam = queryParam;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public String getPathParam() &#123;</div><div class=\"line\">    return pathParam;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">@POST</div><div class=\"line\">public void post(@BeanParam MyBeanParam beanParam, String entity) &#123;</div><div class=\"line\">    final String pathParam = beanParam.getPathParam(); // contains injected path parameter &quot;p&quot;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">@Singleton </div><div class=\"line\">资源将是单例模式，不受请求范围管理,子资源定位方法返回一个类，这意味着运行时将托管资源的实例及其生命周期。相反，如果方法返回的是实例，那么注释将没有效果，返回的实例将被使用。</div><div class=\"line\"></div><div class=\"line\">@Path(&quot;/item&quot;)</div><div class=\"line\">public class ItemResource &#123;</div><div class=\"line\">    @Path(&quot;content&quot;)</div><div class=\"line\">    public Class&lt;ItemContentSingletonResource&gt; getItemContentResource() &#123;</div><div class=\"line\">        return ItemContentSingletonResource.class;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@Singleton</div><div class=\"line\">public class ItemContentSingletonResource &#123;</div><div class=\"line\">    // this class is managed in the singleton life cycle</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注入规则</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">@Path(&quot;&#123;id:\\\\d+&#125;&quot;)</div><div class=\"line\">public class InjectedResource &#123;</div><div class=\"line\">    // 注入到属性</div><div class=\"line\">    @DefaultValue(&quot;q&quot;) @QueryParam(&quot;p&quot;)</div><div class=\"line\">    private String p;</div><div class=\"line\"></div><div class=\"line\">    // 注入到构造函数参数</div><div class=\"line\">    public InjectedResource(@PathParam(&quot;id&quot;) int id) &#123; ... &#125;</div><div class=\"line\"></div><div class=\"line\">    // 注入到资源参数</div><div class=\"line\">    @GET</div><div class=\"line\">    public String get(@Context UriInfo ui) &#123; ... &#125;</div><div class=\"line\"></div><div class=\"line\">    // 注入子资源方法参数</div><div class=\"line\">    @Path(&quot;sub-id&quot;)</div><div class=\"line\">    @GET</div><div class=\"line\">    public String get(@PathParam(&quot;sub-id&quot;) String id) &#123; ... &#125;</div><div class=\"line\"></div><div class=\"line\">    // 注入子资源方法参数定位器方法参数</div><div class=\"line\">    @Path(&quot;sub-id&quot;)</div><div class=\"line\">    public SubResource getSubResource(@PathParam(&quot;sub-id&quot;) String id) &#123; ... &#125;</div><div class=\"line\"></div><div class=\"line\">    // 注入 bean setter 方法</div><div class=\"line\">    @HeaderParam(&quot;X-header&quot;)</div><div class=\"line\">    public void setHeader(String header) &#123; ... &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">@Path(&quot;resource&quot;)</div><div class=\"line\">public static class SummaryOfInjectionsResource &#123;</div><div class=\"line\">    @QueryParam(&quot;query&quot;)</div><div class=\"line\">    String param; // injection into a class field 注入类的属性</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    @GET</div><div class=\"line\">    public String get(@QueryParam(&quot;query&quot;) String methodQueryParam) &#123;</div><div class=\"line\">        // injection into a resource method parameter 注入资源的方法参数</div><div class=\"line\">        return &quot;query param: &quot; + param;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Path(&quot;sub-resource-locator&quot;)</div><div class=\"line\">    public Class&lt;SubResource&gt; subResourceLocator(@QueryParam(&quot;query&quot;) String subResourceQueryParam) &#123;</div><div class=\"line\">        // injection into a sub resource locator parameter注入子资源定位器参数</div><div class=\"line\">        return SubResource.class;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public SummaryOfInjectionsResource(@QueryParam(&quot;query&quot;) String constructorQueryParam) &#123;</div><div class=\"line\">        // injection into a constructor parameter注入构造器的参数</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    @Context</div><div class=\"line\">    public void setRequest(Request request) &#123;</div><div class=\"line\">        // injection into a setter method注入setter方法</div><div class=\"line\">        System.out.println(request != null);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">public static class SubResource &#123;</div><div class=\"line\">    @GET</div><div class=\"line\">    public String get() &#123;</div><div class=\"line\">        return &quot;sub resource&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"应用的部署和运行时的环境\"><a href=\"#应用的部署和运行时的环境\" class=\"headerlink\" title=\"应用的部署和运行时的环境\"></a>应用的部署和运行时的环境</h1><blockquote>\n<p>ResourceConfig 简化组件的注册,如扫描根资源、类提供者提供的路径或一组包名的集合。所有 JAX-RS 组件类都会手动注册或者扫描期间找到的类都会自动添加到 getClasses 所返回的类的集合中,另外部署时可参考<a href=\"http://blog.csdn.net/cl05300629/article/details/9339205\">Servlet容器模型（二）部署描述文件</a></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">public class MyApplication extends ResourceConfig &#123;</div><div class=\"line\">    public MyApplication() &#123;</div><div class=\"line\">        register(org.glassfish.jersey.server.filter.UriConnegFilter.class);</div><div class=\"line\">        register(org.glassfish.jersey.server.validation.ValidationFeature.class);</div><div class=\"line\">        register(org.glassfish.jersey.server.spring.SpringComponentProvider.class);</div><div class=\"line\">        register(org.glassfish.jersey.grizzly2.httpserver.GrizzlyHttpContainerProvider.class);</div><div class=\"line\">        property(ServerProperties.METAINF_SERVICES_LOOKUP_DISABLE, true);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">    &lt;servlet&gt;</div><div class=\"line\">        &lt;servlet-name&gt;Jersey Web Application&lt;/servlet-name&gt;</div><div class=\"line\">        &lt;servlet-class&gt;org.glassfish.jersey.servlet.ServletContainer&lt;/servlet-class&gt;</div><div class=\"line\">        &lt;init-param&gt;</div><div class=\"line\">            &lt;param-name&gt;javax.ws.rs.Application&lt;/param-name&gt;</div><div class=\"line\">            &lt;param-value&gt;com.gzmpc.pc.MainApp&lt;/param-value&gt;</div><div class=\"line\">        &lt;/init-param&gt;</div><div class=\"line\">        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</div><div class=\"line\">    &lt;/servlet&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&lt;Servlet&gt;元素</div><div class=\"line\"></div><div class=\"line\">1、&lt;servlet-name&gt;元素：必须选，定义servlet名称，在DD文件中应该唯一，可通过servletConfig的getServletName()方法检索；</div><div class=\"line\"></div><div class=\"line\">2、&lt;servlet-class&gt;元素：制定servlet完整名称，需带包</div><div class=\"line\"></div><div class=\"line\">WEB-INF目录中的classes目录和lib目录中JAR文件会被自动添加到容器的类路径中，不需设置类路径</div><div class=\"line\"></div><div class=\"line\">3、&lt;init-param&gt;元素：向servlet传递初始化参数，每个&lt;int-param&gt;有仅有一组&lt;param-name&gt;和&lt;param-value&gt;子元素，可通过ServletConfig接口的getInitParameter()方法检索初始化参数；</div><div class=\"line\"></div><div class=\"line\">4、&lt;load-on-startup&gt;元素：一般的servlet是在被请求时由容器装入内存，这只一个正数则在启动时载入该servlet，值小的优先装入，负数或者没有指定，容器将根据需要决定何时装入servlet</div></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"http://www.cnblogs.com/eggbucket/archive/2012/10/16/2726302.html\">使用 Spring Data JPA 简化 JPA 开发</a></p>\n<p><a href=\"http://www.cnblogs.com/zhongcj/archive/2008/11/03/1325293.html\">MIME类型大全</a></p>\n</blockquote>\n"},{"title":"图像处理-ImageMagick-+-im4java","date":"2016-09-10T16:00:00.000Z","_content":"\n> 注意先下载所需要的各类依赖之后再装主题ImageMagick\n\n```\n\n参考记录:\nhttp://blog.csdn.net/cloudsben/article/details/8164047\n\n```\n\n\n> api 的链接\n\n```\n\nim4java:\nhttp://im4java.sourceforge.net/api/org/im4java/core/IMOps.html\n\n对应的imageMagick的命令行:\nhttp://www.imagemagick.org/script/mogrify.php \n\n```\n","source":"_posts/其他/图像处理-ImageMagick-+-im4java.md","raw":"---\ntitle: 图像处理-ImageMagick-+-im4java\ndate: 2016-09-11\ncategories: \n- others\n---\n\n> 注意先下载所需要的各类依赖之后再装主题ImageMagick\n\n```\n\n参考记录:\nhttp://blog.csdn.net/cloudsben/article/details/8164047\n\n```\n\n\n> api 的链接\n\n```\n\nim4java:\nhttp://im4java.sourceforge.net/api/org/im4java/core/IMOps.html\n\n对应的imageMagick的命令行:\nhttp://www.imagemagick.org/script/mogrify.php \n\n```\n","slug":"其他/图像处理-ImageMagick-+-im4java","published":1,"updated":"2017-02-06T03:05:30.000Z","_id":"ciytikual002ji20o0tvne4yh","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>注意先下载所需要的各类依赖之后再装主题ImageMagick</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">参考记录:</div><div class=\"line\">http://blog.csdn.net/cloudsben/article/details/8164047</div></pre></td></tr></table></figure>\n<blockquote>\n<p>api 的链接</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">im4java:</div><div class=\"line\">http://im4java.sourceforge.net/api/org/im4java/core/IMOps.html</div><div class=\"line\"></div><div class=\"line\">对应的imageMagick的命令行:</div><div class=\"line\">http://www.imagemagick.org/script/mogrify.php</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>注意先下载所需要的各类依赖之后再装主题ImageMagick</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">参考记录:</div><div class=\"line\">http://blog.csdn.net/cloudsben/article/details/8164047</div></pre></td></tr></table></figure>\n<blockquote>\n<p>api 的链接</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">im4java:</div><div class=\"line\">http://im4java.sourceforge.net/api/org/im4java/core/IMOps.html</div><div class=\"line\"></div><div class=\"line\">对应的imageMagick的命令行:</div><div class=\"line\">http://www.imagemagick.org/script/mogrify.php</div></pre></td></tr></table></figure>\n"},{"title":"如何更有效地使用谷歌搜索-Chrome","date":"2016-09-10T16:00:00.000Z","_content":"\n> 排除条件\n\n\n![exclude.png](http://upload-images.jianshu.io/upload_images/80378-bd10a110bf9ea466.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 相关条件、相关网站\n\n\n![related.png](http://upload-images.jianshu.io/upload_images/80378-8141a6cc1d1df549.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 关联文档、电影、PDF等等\n\n![:file.png](http://upload-images.jianshu.io/upload_images/80378-ff5ca6826cb4af77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 站内搜索\n\n![:site.png](http://upload-images.jianshu.io/upload_images/80378-a45d59033cace0f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n","source":"_posts/其他/如何更有效地使用谷歌搜索-Chrome.md","raw":"---\ntitle: 如何更有效地使用谷歌搜索-Chrome\ndate: 2016-09-11\ncategories: \n- others\n---\n\n> 排除条件\n\n\n![exclude.png](http://upload-images.jianshu.io/upload_images/80378-bd10a110bf9ea466.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 相关条件、相关网站\n\n\n![related.png](http://upload-images.jianshu.io/upload_images/80378-8141a6cc1d1df549.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 关联文档、电影、PDF等等\n\n![:file.png](http://upload-images.jianshu.io/upload_images/80378-ff5ca6826cb4af77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 站内搜索\n\n![:site.png](http://upload-images.jianshu.io/upload_images/80378-a45d59033cace0f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n","slug":"其他/如何更有效地使用谷歌搜索-Chrome","published":1,"updated":"2017-02-06T03:05:25.000Z","_id":"ciytikuap002ki20opala4ac0","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>排除条件</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-bd10a110bf9ea466.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"exclude.png\"></p>\n<blockquote>\n<p>相关条件、相关网站</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-8141a6cc1d1df549.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"related.png\"></p>\n<blockquote>\n<p>关联文档、电影、PDF等等</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-ff5ca6826cb4af77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\":file.png\"></p>\n<blockquote>\n<p>站内搜索</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-a45d59033cace0f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\":site.png\"></p>\n","excerpt":"","more":"<blockquote>\n<p>排除条件</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-bd10a110bf9ea466.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"exclude.png\"></p>\n<blockquote>\n<p>相关条件、相关网站</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-8141a6cc1d1df549.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"related.png\"></p>\n<blockquote>\n<p>关联文档、电影、PDF等等</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-ff5ca6826cb4af77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\":file.png\"></p>\n<blockquote>\n<p>站内搜索</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/80378-a45d59033cace0f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\":site.png\"></p>\n"},{"title":"Mac-Photoshop-cs6","date":"2016-09-10T16:00:00.000Z","_content":"\n> 使用说明:\n\n```\n1、运行Block Adobe Activation，防止ADOBE激活程序启动，按操作提示点击即可。\n2、运行Adobe CS6安装程序\n3、选择“试用”\n4、输入Adobe ID，如果没有，免费注册一个，登录\n5、安装完之后，在Adobe Photoshop CS6程序按右键，选择显示包内容，打开/ Contents / Frameworks /文件夹，把amtlib.framework文件夹拷进去替换。\n6、同样道理，激活illustrator,indesign等程序，也是同样办法，在对应的Adobe  CS6程序按右键，选择显示包内容，打开/ Contents / Frameworks /文件夹，把amtlib.framework文件夹拷进去替换。\n7、运行Adobe 程序，激活成功。享受ADOBE CS6吧！\n\n```\n\n下载链接: https://pan.baidu.com/s/1ciesRO 密码: f95w\n","source":"_posts/工具/Mac-Photoshop-cs6.md","raw":"---\ntitle: Mac-Photoshop-cs6\ndate: 2016-09-11\ncategories: \n- 工具\n---\n\n> 使用说明:\n\n```\n1、运行Block Adobe Activation，防止ADOBE激活程序启动，按操作提示点击即可。\n2、运行Adobe CS6安装程序\n3、选择“试用”\n4、输入Adobe ID，如果没有，免费注册一个，登录\n5、安装完之后，在Adobe Photoshop CS6程序按右键，选择显示包内容，打开/ Contents / Frameworks /文件夹，把amtlib.framework文件夹拷进去替换。\n6、同样道理，激活illustrator,indesign等程序，也是同样办法，在对应的Adobe  CS6程序按右键，选择显示包内容，打开/ Contents / Frameworks /文件夹，把amtlib.framework文件夹拷进去替换。\n7、运行Adobe 程序，激活成功。享受ADOBE CS6吧！\n\n```\n\n下载链接: https://pan.baidu.com/s/1ciesRO 密码: f95w\n","slug":"工具/Mac-Photoshop-cs6","published":1,"updated":"2017-02-06T03:04:56.000Z","_id":"ciytilfz5002si20ozse94wce","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>使用说明:</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">1、运行Block Adobe Activation，防止ADOBE激活程序启动，按操作提示点击即可。</div><div class=\"line\">2、运行Adobe CS6安装程序</div><div class=\"line\">3、选择“试用”</div><div class=\"line\">4、输入Adobe ID，如果没有，免费注册一个，登录</div><div class=\"line\">5、安装完之后，在Adobe Photoshop CS6程序按右键，选择显示包内容，打开/ Contents / Frameworks /文件夹，把amtlib.framework文件夹拷进去替换。</div><div class=\"line\">6、同样道理，激活illustrator,indesign等程序，也是同样办法，在对应的Adobe  CS6程序按右键，选择显示包内容，打开/ Contents / Frameworks /文件夹，把amtlib.framework文件夹拷进去替换。</div><div class=\"line\">7、运行Adobe 程序，激活成功。享受ADOBE CS6吧！</div></pre></td></tr></table></figure>\n<p>下载链接: <a href=\"https://pan.baidu.com/s/1ciesRO\" target=\"_blank\" rel=\"external\">https://pan.baidu.com/s/1ciesRO</a> 密码: f95w</p>\n","excerpt":"","more":"<blockquote>\n<p>使用说明:</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">1、运行Block Adobe Activation，防止ADOBE激活程序启动，按操作提示点击即可。</div><div class=\"line\">2、运行Adobe CS6安装程序</div><div class=\"line\">3、选择“试用”</div><div class=\"line\">4、输入Adobe ID，如果没有，免费注册一个，登录</div><div class=\"line\">5、安装完之后，在Adobe Photoshop CS6程序按右键，选择显示包内容，打开/ Contents / Frameworks /文件夹，把amtlib.framework文件夹拷进去替换。</div><div class=\"line\">6、同样道理，激活illustrator,indesign等程序，也是同样办法，在对应的Adobe  CS6程序按右键，选择显示包内容，打开/ Contents / Frameworks /文件夹，把amtlib.framework文件夹拷进去替换。</div><div class=\"line\">7、运行Adobe 程序，激活成功。享受ADOBE CS6吧！</div></pre></td></tr></table></figure>\n<p>下载链接: <a href=\"https://pan.baidu.com/s/1ciesRO\">https://pan.baidu.com/s/1ciesRO</a> 密码: f95w</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ciytfmesh001ps10ojtjft1kt","category_id":"ciytfkk0v0016s10opv15jsd9","_id":"ciytfmesn001qs10ox13dppdf"},{"post_id":"ciytfmesq001rs10ovjjfjscs","category_id":"ciytfkk0v0016s10opv15jsd9","_id":"ciytfmess001ss10oc6i69kpv"},{"post_id":"ciytfmhe1001ts10ox9bu17ve","category_id":"ciytfjhcn0014s10oizpzfhq5","_id":"ciytfmhe3001us10o9i1ml95t"},{"post_id":"ciytfmk7n001vs10otiuk9iwd","category_id":"ciytfidvo000us10ol5hdwrgm","_id":"ciytfmk7v001xs10ovt7nyfsh"},{"post_id":"ciytfmk7n001vs10otiuk9iwd","category_id":"ciytfidvo000vs10o9nkhsxts","_id":"ciytfmk7w001ys10or8ertm2q"},{"post_id":"ciytfmk7q001ws10ondz24d19","category_id":"ciytfidvo000us10ol5hdwrgm","_id":"ciytfmk81001zs10ov4zt11fo"},{"post_id":"ciytfmk7q001ws10ondz24d19","category_id":"ciytfidvo000vs10o9nkhsxts","_id":"ciytfmk820020s10oplajkok9"},{"post_id":"ciytfmk830021s10orp1r7l1f","category_id":"ciytfidvo000us10ol5hdwrgm","_id":"ciytfmk860022s10ocq6hfxux"},{"post_id":"ciytfmk830021s10orp1r7l1f","category_id":"ciytfidvo000vs10o9nkhsxts","_id":"ciytfmk860023s10oxutfgzsz"},{"post_id":"ciytfmmst0024s10oii29p4br","category_id":"ciytffo770001s10oso7rbaun","_id":"ciytfmmsz0027s10o1k5uyzbz"},{"post_id":"ciytfmmsu0025s10opmkc121l","category_id":"ciytffo770001s10oso7rbaun","_id":"ciytfmmt10029s10opahznop3"},{"post_id":"ciytfmmsw0026s10omhocqxyc","category_id":"ciytffo770001s10oso7rbaun","_id":"ciytfmmt4002bs10oahkh3x5d"},{"post_id":"ciytfmmsz0028s10o9xoqfg9z","category_id":"ciytffo770001s10oso7rbaun","_id":"ciytfmmtb002ds10ojocmehid"},{"post_id":"ciytfmmt1002as10o5gff7ovi","category_id":"ciytffo770001s10oso7rbaun","_id":"ciytfmmtk002fs10of7ij1seu"},{"post_id":"ciytfmmt5002cs10okt2mc6bb","category_id":"ciytffo770001s10oso7rbaun","_id":"ciytfmmtl002gs10orre744mg"},{"post_id":"ciytfmmtb002es10oc8335wt1","category_id":"ciytffo770001s10oso7rbaun","_id":"ciytfmmtl002hs10ob64ipx60"},{"post_id":"ciytfmmu4002is10oc8573nbo","category_id":"ciytffo770001s10oso7rbaun","_id":"ciytfmmu8002ls10oax2td1d5"},{"post_id":"ciytfmmu6002js10o16fw7ci4","category_id":"ciytffo770001s10oso7rbaun","_id":"ciytfmmu9002ns10ohbsxgj26"},{"post_id":"ciytfmmu7002ks10oq4438cm2","category_id":"ciytffo770001s10oso7rbaun","_id":"ciytfmmua002ps10ohwlt8h7x"},{"post_id":"ciytfmmu8002ms10o42zut5mx","category_id":"ciytffo770001s10oso7rbaun","_id":"ciytfmmub002rs10o1lcnz414"},{"post_id":"ciytfmmu9002os10of98dxovk","category_id":"ciytffo770001s10oso7rbaun","_id":"ciytfmmuc002ts10o19l5stz6"},{"post_id":"ciytfmmua002qs10o6an0h4oo","category_id":"ciytffo770001s10oso7rbaun","_id":"ciytfmmud002vs10oimtvh2ql"},{"post_id":"ciytfmmub002ss10oxer3jyp1","category_id":"ciytffo770001s10oso7rbaun","_id":"ciytfmmuf002xs10o805t1zk0"},{"post_id":"ciytfmmuc002us10oz8w8ssy6","category_id":"ciytffo770001s10oso7rbaun","_id":"ciytfmmug002zs10o83sjzl0n"},{"post_id":"ciytfmmue002ws10oohxmgpav","category_id":"ciytffo770001s10oso7rbaun","_id":"ciytfmmuh0031s10omk3wcq5t"},{"post_id":"ciytfmmuf002ys10or92733ug","category_id":"ciytffo770001s10oso7rbaun","_id":"ciytfmmui0033s10ofzzzxhwk"},{"post_id":"ciytfmmug0030s10ola4f7rgr","category_id":"ciytffo770001s10oso7rbaun","_id":"ciytfmmui0035s10ortb0qw33"},{"post_id":"ciytfmmuh0032s10ok3lhi2m0","category_id":"ciytffo770001s10oso7rbaun","_id":"ciytfmmuj0037s10oeczpixgs"},{"post_id":"ciytfmmui0034s10oab30wzpx","category_id":"ciytffo770001s10oso7rbaun","_id":"ciytfmmuk0039s10ouxuj072s"},{"post_id":"ciytfmmui0036s10ov041s42s","category_id":"ciytffo770001s10oso7rbaun","_id":"ciytfmmuk003bs10o11uvgnuo"},{"post_id":"ciytfmmuj0038s10oooygw0h1","category_id":"ciytffo770001s10oso7rbaun","_id":"ciytfmmuk003cs10oxu8uyxk2"},{"post_id":"ciytfmmuk003as10o9bhho38i","category_id":"ciytffo770001s10oso7rbaun","_id":"ciytfmmuk003ds10owajjnc56"},{"post_id":"ciytfmmun003es10o7pfafma8","category_id":"ciytffo770001s10oso7rbaun","_id":"ciytfmmuo003gs10ojff8vl77"},{"post_id":"ciytfmmun003fs10oj7kjo2re","category_id":"ciytffo770001s10oso7rbaun","_id":"ciytfmmuo003hs10o2fjq3mlk"},{"post_id":"ciytgdrxb0068s10ooa6s9i0f","category_id":"ciytfm8th001as10oq3ibddkl","_id":"ciytgdrxi0069s10o2nddhep1"},{"post_id":"ciytg3xb4003ks10ow6ffrzb0","category_id":"ciytgetdj006as10ons8uceli","_id":"ciytgetdk006bs10opu76593s"},{"post_id":"ciytg3xb7003ls10o0bfzrz1d","category_id":"ciytgetdj006as10ons8uceli","_id":"ciytgf28t006cs10ok48locod"},{"post_id":"ciytg3zp5003os10olgli0l03","category_id":"ciytgfwq9006es10olitic2il","_id":"ciytgfwq9006fs10obq6aiofp"},{"post_id":"ciytgopjh006ns10oc267prbg","category_id":"ciytggwox006js10o5sx9nf23","_id":"ciytgosg0006ys10o8dj52roe"},{"post_id":"ciytgopjt006os10otfqoeo98","category_id":"ciytggwox006js10o5sx9nf23","_id":"ciytgozt0006zs10otumb2o6e"},{"post_id":"ciytgopk4006ts10oce8s7l6j","category_id":"ciytggwox006js10o5sx9nf23","_id":"ciytgpr5f0071s10op6wnjfth"},{"post_id":"ciytgopkg006ws10oozyo7f7c","category_id":"ciytggwox006js10o5sx9nf23","_id":"ciytgqgjp0073s10o2dbs45me"},{"post_id":"ciytg4bj0004hs10omo1zg4yy","category_id":"ciytgsr1q0075s10ooqmw3z7q","_id":"ciytgsr1q0076s10ou9qyb9p6"},{"post_id":"ciytg4bj9004ls10o43rwgiqh","category_id":"ciytgsr1q0075s10ooqmw3z7q","_id":"ciytgswce0077s10opxe694px"},{"post_id":"ciytg4bjb004ms10op74umx29","category_id":"ciytgsr1q0075s10ooqmw3z7q","_id":"ciytgsytn0078s10oo0eh3r7e"},{"post_id":"ciytg4bji004ns10oia918fph","category_id":"ciytgsr1q0075s10ooqmw3z7q","_id":"ciytgt18g0079s10otavqmy06"},{"post_id":"ciytg4biz004gs10oiihglspf","category_id":"ciytgsr1q0075s10ooqmw3z7q","_id":"ciytgt3fq007as10oeumvlhjp"},{"post_id":"ciytg4bjj004os10o733je4fg","category_id":"ciytgsr1q0075s10ooqmw3z7q","_id":"ciytgt5sk007bs10oayctrkwg"},{"post_id":"ciytg4bj1004is10op8x1bb7y","category_id":"ciytgsr1q0075s10ooqmw3z7q","_id":"ciytgt7s7007cs10oy2zo2t7e"},{"post_id":"ciytg4bj5004js10ot5l7l60y","category_id":"ciytgsr1q0075s10ooqmw3z7q","_id":"ciytgt9p2007ds10o275umj70"},{"post_id":"ciytg4bj6004ks10oru6tpi1i","category_id":"ciytgsr1q0075s10ooqmw3z7q","_id":"ciytgtbnb007es10o5kfz4eku"},{"post_id":"ciytg4bjj004ps10oa8osj9l5","category_id":"ciytgsr1q0075s10ooqmw3z7q","_id":"ciytgtdkt007fs10o3y2t2tm0"},{"post_id":"ciytg4bjv004qs10o77uuev7j","category_id":"ciytgsr1q0075s10ooqmw3z7q","_id":"ciytgtfe5007gs10ouvf6n4i3"},{"post_id":"ciytg4bjy004rs10o1ukh2dcp","category_id":"ciytgsr1q0075s10ooqmw3z7q","_id":"ciytgtht6007hs10ozf7hn5g1"},{"post_id":"ciytg4bk2004ss10of4602bm7","category_id":"ciytgsr1q0075s10ooqmw3z7q","_id":"ciytgtju7007is10o6m3kz9a4"},{"post_id":"ciytg4bk4004ts10oh5r91c4f","category_id":"ciytgsr1q0075s10ooqmw3z7q","_id":"ciytgtm34007js10o8aakdc59"},{"post_id":"ciytg4bk7004us10olyfl266e","category_id":"ciytgsr1q0075s10ooqmw3z7q","_id":"ciytgto3y007ks10ok1stmm9n"},{"post_id":"ciytg454f0040s10onutp4b5q","category_id":"ciytgsr1q0075s10ooqmw3z7q","_id":"ciythwuhl007ls10omnvwp9o6"},{"post_id":"ciytg454d003zs10oim2p7is1","category_id":"ciytgsr1q0075s10ooqmw3z7q","_id":"ciythwxen007ms10oz8yc9f81"},{"post_id":"ciytg454g0041s10oaer5a9an","category_id":"ciytgsr1q0075s10ooqmw3z7q","_id":"ciythx0ak007ns10okquqqyw1"},{"post_id":"ciytg454g0042s10o9qyu1lt5","category_id":"ciytgsr1q0075s10ooqmw3z7q","_id":"ciythx3d3007os10ovhd82vqz"},{"post_id":"ciytg454h0044s10oub5wndg6","category_id":"ciytgsr1q0075s10ooqmw3z7q","_id":"ciythx61z007ps10o244al0oi"},{"post_id":"ciytg454h0043s10o2in0non7","category_id":"ciytgsr1q0075s10ooqmw3z7q","_id":"ciythx9wj007qs10o3va1awco"},{"post_id":"ciytg454j0046s10okvlr3ua9","category_id":"ciytgsr1q0075s10ooqmw3z7q","_id":"ciythxcfv007rs10oib1ba4bj"},{"post_id":"ciytg454i0045s10o7lq2u33g","category_id":"ciytgsr1q0075s10ooqmw3z7q","_id":"ciythxhxf007ss10ok9l42b7e"},{"post_id":"ciytg4894004es10o95d6dnwy","category_id":"ciytgsr1q0075s10ooqmw3z7q","_id":"ciyti0l7z0000i20o3eno2po3"},{"post_id":"ciytg488y004bs10osdpfmmur","category_id":"ciytgsr1q0075s10ooqmw3z7q","_id":"ciyti0n9x0001i20okj4txc2p"},{"post_id":"ciytg488w0049s10oiz17mbhw","category_id":"ciytgsr1q0075s10ooqmw3z7q","_id":"ciyti0pn10002i20ozy3yb0nx"},{"post_id":"ciytg488u0047s10oqjb8p8sw","category_id":"ciytgsr1q0075s10ooqmw3z7q","_id":"ciyti0rtf0003i20oan3ego1y"},{"post_id":"ciytg488v0048s10o1uh8l7o1","category_id":"ciytgsr1q0075s10ooqmw3z7q","_id":"ciyti0weg0005i20o46wqq0qg"},{"post_id":"ciytg4892004ds10oitezfneh","category_id":"ciytgsr1q0075s10ooqmw3z7q","_id":"ciyti0yn40006i20ogzkg4rw0"},{"post_id":"ciytg488x004as10o6il7042j","category_id":"ciytgsr1q0075s10ooqmw3z7q","_id":"ciyti10xj0007i20o9b2xg4qz"},{"post_id":"ciytg4895004fs10oxligw1sf","category_id":"ciytgsr1q0075s10ooqmw3z7q","_id":"ciyti132q0008i20o1rebygmv"},{"post_id":"ciyti1rj50009i20ohzrwxpwy","category_id":"ciytgsr1q0075s10ooqmw3z7q","_id":"ciyti1rj6000ai20o4pem4hit"},{"post_id":"ciytg4e53004ws10orr2933iq","category_id":"ciytgsr1q0075s10ooqmw3z7q","_id":"ciyti2ybi000bi20o70xbld6b"},{"post_id":"ciytg4e570051s10ob2ct183i","category_id":"ciytgsr1q0075s10ooqmw3z7q","_id":"ciyti3196000ci20ovd1suay6"},{"post_id":"ciytg4e52004vs10on218v7pv","category_id":"ciytgsr1q0075s10ooqmw3z7q","_id":"ciyti33x7000di20owf94xtrb"},{"post_id":"ciytg4e54004xs10oxe6edkkj","category_id":"ciytgsr1q0075s10ooqmw3z7q","_id":"ciyti35wk000ei20ou18dfnx3"},{"post_id":"ciytg4e55004ys10ofxlxfw1m","category_id":"ciytgsr1q0075s10ooqmw3z7q","_id":"ciyti37rf000fi20ogx40dfbm"},{"post_id":"ciytg4e560050s10o32ndjk32","category_id":"ciytgsr1q0075s10ooqmw3z7q","_id":"ciyti3dre000gi20ovf76wwte"},{"post_id":"ciytg4e56004zs10o5j5cwbcg","category_id":"ciytgsr1q0075s10ooqmw3z7q","_id":"ciyti3gbe000hi20ob1bvmga6"},{"post_id":"ciytdotw80035nr0o25ido452","category_id":"ciyti51yb000ji20o8n63zb6i","_id":"ciyti51yc000ki20odxx7t450"},{"post_id":"ciytg4h1h0057s10oaqfvr9r7","category_id":"ciyti5yk3000li20o9q9h9phl","_id":"ciyti5ykd000ni20om1lh2eeh"},{"post_id":"ciytg4h1e0055s10ozn1q497n","category_id":"ciyti5yk3000li20o9q9h9phl","_id":"ciyti5ykf000pi20o95m8o1p8"},{"post_id":"ciytg4h1b0053s10of44dplsf","category_id":"ciyti5yk3000li20o9q9h9phl","_id":"ciyti5ykg000qi20ouk13o6wj"},{"post_id":"ciytg4h1a0052s10o2hsbkp0m","category_id":"ciyti5yk3000li20o9q9h9phl","_id":"ciyti5ykg000ri20ologejbvt"},{"post_id":"ciytg4h1c0054s10orlvjrhdh","category_id":"ciyti5yk3000li20o9q9h9phl","_id":"ciyti5ykj000si20ofubpjn2f"},{"post_id":"ciytg4h1f0056s10o2ye5jb7w","category_id":"ciyti5yk3000li20o9q9h9phl","_id":"ciyti5ykk000ti20op1iytnud"},{"post_id":"ciytg4jjs0058s10olxkh4h48","category_id":"ciyti721s000ui20oa5ta50wc","_id":"ciyti721t000vi20ozsb1z3ts"},{"post_id":"ciytg4m770059s10o2k6r7050","category_id":"ciyti7t1i000xi20ohtbyxwj5","_id":"ciyti7t1j000yi20olgmo4al3"},{"post_id":"ciytia1dv0013i20ofr7qo3eu","category_id":"ciyti950e000zi20o2oj82ngb","_id":"ciytia1e70015i20oo4yl3k5v"},{"post_id":"ciytia1dz0014i20ozbzidxtr","category_id":"ciyti950e000zi20o2oj82ngb","_id":"ciytia1e80016i20oe52pcf8w"},{"post_id":"ciytia1ee0017i20o2asb6k65","category_id":"ciyti950e000zi20o2oj82ngb","_id":"ciytia1eh0018i20ot833qzmh"},{"post_id":"ciytg4rts005hs10ohs9dxs5f","category_id":"ciytiewia001ai20ot94iuh8y","_id":"ciytiewif001ci20ocbhnb5zr"},{"post_id":"ciytg4ru6005ns10o21w4kdio","category_id":"ciytiewia001ai20ot94iuh8y","_id":"ciytiewii001ei20ozezi488s"},{"post_id":"ciytg4rtr005gs10og7437z8a","category_id":"ciytiewia001ai20ot94iuh8y","_id":"ciytiewin001fi20o8ygmjb3t"},{"post_id":"ciytg4rtr005fs10oe6ameax6","category_id":"ciytiewia001ai20ot94iuh8y","_id":"ciytiewis001gi20o7lh05y89"},{"post_id":"ciytg4rtt005js10oo9dpzklv","category_id":"ciytiewia001ai20ot94iuh8y","_id":"ciytiewiy001hi20osztqafbo"},{"post_id":"ciytg4rtw005ks10on7p2qz7j","category_id":"ciytiewia001ai20ot94iuh8y","_id":"ciytiewj1001ii20o7y58gu38"},{"post_id":"ciytg4ru3005ms10o5st8mucv","category_id":"ciytiewia001ai20ot94iuh8y","_id":"ciytiewj2001ji20o2rkh783d"},{"post_id":"ciytg4rtt005is10of3e1ejzl","category_id":"ciytiewia001ai20ot94iuh8y","_id":"ciytiewj2001ki20o679jkl4g"},{"post_id":"ciytg4rtq005es10o7jt7lrww","category_id":"ciytiewia001ai20ot94iuh8y","_id":"ciytiewja001li20otyhn4aoj"},{"post_id":"ciytg4ru1005ls10onhf5o25z","category_id":"ciytiewia001ai20ot94iuh8y","_id":"ciytiewjb001mi20o7gjcog4a"},{"post_id":"ciytg4u3u005ps10omr8enlnm","category_id":"ciytigzns001ni20o4arwu8jj","_id":"ciytigzo5001pi20oy9edg2ek"},{"post_id":"ciytg4u3s005os10o15p18ztx","category_id":"ciytigzns001ni20o4arwu8jj","_id":"ciytigzo6001qi20oitbaf9w0"},{"post_id":"ciytiipr30022i20oa9yhdb79","category_id":"ciyti950e000zi20o2oj82ngb","_id":"ciytiipr70023i20o57y06b3e"},{"post_id":"ciytija3q0026i20ot802vl35","category_id":"ciytii0zt001ti20og2ttqhcd","_id":"ciytija3s0027i20oliarvh58"},{"post_id":"ciytijd4v0028i20oucx4a39c","category_id":"ciytii0zt001ti20og2ttqhcd","_id":"ciytijd4x0029i20ojk2hk0r6"},{"post_id":"ciytijgjg002ai20o3kcxwv73","category_id":"ciytii0zt001ti20og2ttqhcd","_id":"ciytijgji002bi20owmq01l6h"},{"post_id":"ciytijmi8002ci20oqxb2bcls","category_id":"ciytii0zt001ti20og2ttqhcd","_id":"ciytijmia002di20o62jxx2gf"},{"post_id":"ciytikuak002hi20o8cgr603s","category_id":"ciytil98j002li20oia6rplic","_id":"ciytil98l002oi20opjcieib8"},{"post_id":"ciytikuag002fi20ov6evwp64","category_id":"ciytil98j002li20oia6rplic","_id":"ciytil98m002pi20ouzw90b4x"},{"post_id":"ciytilfz5002si20ozse94wce","category_id":"ciyti950e000zi20o2oj82ngb","_id":"ciytilfz6002ti20o88dew5cx"},{"post_id":"ciytikual002ji20o0tvne4yh","category_id":"ciytil98j002li20oia6rplic","_id":"ciytilpzj002ui20omjw7n0fa"},{"post_id":"ciytikuap002ki20opala4ac0","category_id":"ciytil98j002li20oia6rplic","_id":"ciytils4v002vi20oaixr3e0l"}],"PostTag":[],"Tag":[]}}